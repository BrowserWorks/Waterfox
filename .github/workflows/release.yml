name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: 'G'

jobs:
  soft-release:
    name: Soft Release
    runs-on: ubuntu-latest
    steps:
      - name: Download assets
        run: |
          sudo apt install wget2
          wget2 https://cdn.waterfox.net/staging/x86_64/Windows_NT/Waterfox\ ${{ github.event.inputs.version }}\ Setup.exe
          wget2 https://cdn.waterfox.net/staging/x86_64/Linux/waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
          wget2 https://cdn.waterfox.net/staging/x86_64/Darwin/Waterfox\ ${{ github.event.inputs.version }}\ Setup.dmg
          wget2 https://cdn.waterfox.net/staging/aarch64/Darwin/Waterfox\ ${{ github.event.inputs.version }}\ ARM\ Setup.dmg 

      - name: Release Step
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          # In the future, add release notes to this step.
          removeArtifacts: true
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ü™ü Upload Windows Installer
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: Waterfox\ ${{ github.event.inputs.version }}\ Setup.exe
          artifactContentType: application/vnd.microsoft.portable-executable
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: üçé Upload Apple X64 Image
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: Waterfox\ ${{ github.event.inputs.version }}\ Setup.dmg
          artifactContentType: application/x-apple-diskimage
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: üçé Upload Apple ARM Image
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: Waterfox\ ${{ github.event.inputs.version }}\ ARM\ Setup.dmg
          artifactContentType: application/x-apple-diskimage
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: üêß Upload Linux tarball
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
          artifactContentType: application/zip
          tag: ${{ github.event.inputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Dry run AUS
        run: |
          os=(Windows_NT_x86_64 Linux_x86_64 Darwin_x86_64 Darwin_aarch64)
          for i in ${os[@]}
          do
            update_loc='s3://aus.waterfox.net/update/staging/$i/update.xml'
            for j in $(AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 ls s3://aus.waterfox.net/update/Waterfox/ | awk '{OFS=" "};{if ($1=="PRE") print $2}')
            do
              if [[ $j != '/' ]]
              then
              ver=$(echo $j | sed 's/\///g')
              AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 cp --dryrun --content-type="text/xml" --metadata-directive="REPLACE" --region=us-west-2 $update_loc \
                s3://aus.waterfox.net/update/Waterfox/$ver/default/$i/update.xml
              fi
            done
            # grab the current version so we can create a new dir with a blank xml
            touch blank.xml
            echo "<?xml version="1.0"?><updates></updates>" >> blank.xml
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 cp --dryrun --content-type="text/xml" --metadata-directive="REPLACE" --region=us-west-2 blank.xml \
              s3://aus.waterfox.net/update/Waterfox/${{ github.event.inputs.version }}/default/$i/update.xml
          done

      # - name: Rebuild website
      #   run: |
      #     # POST request to Cloudflare endpoint
      #     curl \
      #     -X POST \
      #     -H "content-type": "application/json;charset=UTF-8" \
      #     -H "X-Auth-Email": ${{ secrets.CF_EMAIL }} \
      #     -H "X-Auth-Key": ${{ secrets.CF_API_KEY }} \
      #     https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCT_ID }}/pages/projects/${{ secrets.CF_PROJECT_NAME }}/deployments
          
  hard-release:
    name: Full Release
    needs: [soft-release]
    environment: hard-release
    runs-on: ubuntu-latest
    steps:
      # - name: Release AUS
      #   run: |
      #     os=(Windows_NT_x86_64 Linux_x86_64 Darwin_x86_64 Darwin_aarch64)
      #     for i in ${os[@]}
      #     do
      #       update_loc='s3://aus.waterfox.net/update/staging/$i/update.xml'
      #       for j in $(AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 ls s3://aus.waterfox.net/update/Waterfox/ | awk '{OFS=" "};{if ($1=="PRE") print $2}')
      #       do
      #         if [[ $j != '/' ]]
      #         then
      #         ver=$(echo $j | sed 's/\///g')
      #         AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 cp --content-type="text/xml" --metadata-directive="REPLACE" --region=us-west-2 $update_loc \
      #           s3://aus.waterfox.net/update/Waterfox/$ver/default/$i/update.xml
      #         fi
      #       done
      #       # grab the current version so we can create a new dir with a blank xml
      #       touch blank.xml
      #       echo "<?xml version="1.0"?><updates></updates>" >> blank.xml
      #       AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} aws s3 cp --content-type="text/xml" --metadata-directive="REPLACE" --region=us-west-2 blank.xml \
      #         s3://aus.waterfox.net/update/Waterfox/${{ github.event.inputs.version }}/default/$i/update.xml
      #     done
      - name: Move from staging
        run: |
          ftp -n -v ftp.keycdn.com << EOT
          ascii
          user ${{ secrets.FTP_USR }} ${{ secrets.FTP_PASS }}
          prompt
            rename staging/x86_64/Windows_NT/Waterfox\ ${{ github.event.inputs.version }}\ Setup.exe releases/win64/installer/Waterfox\ ${{ github.event.inputs.version }}\ Setup.exe
            rename staging/x86_64/Windows_NT/waterfox-${{ github.event.inputs.version }}.en-US.win64.complete.xz.mar releases/win64/update/waterfox-${{ github.event.inputs.version }}.en-US.win64.complete.xz.mar
            rename staging/x86_64/Linux/waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2 releases/linux64/installer/waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
            rename staging/x86_64/Linux/waterfox-${{ github.event.inputs.version }}.en-US.linux64.complete.xz.mar releases/linux64/update/waterfox-${{ github.event.inputs.version }}.en-US.linux64.complete.xz.mar
            rename staging/x86_64/Darwin/waterfox-${{ github.event.inputs.version }}.en-US.osx64.complete.xz.mar releases/osx64/update/waterfox-${{ github.event.inputs.version }}.en-US.osx64.complete.xz.mar
            rename staging/aarch64/Darwin/waterfox-${{ github.event.inputs.version }}.en-US.osx-arm64.complete.xz.mar releases/osx64/update/waterfox-${{ github.event.inputs.version }}.en-US.osx-arm64.complete.xz.mar
          EOT
