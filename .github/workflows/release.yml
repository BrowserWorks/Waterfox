name: Release Workflow

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: 'G'

jobs:
  soft-release:
    name: Soft Release
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: push.yml
          workflow_conclusion: success
          branch: actions
      - name: Get directory names
        run: |
          for dir in */
          do
            if [[ $dir == *"Linux"* ]]
            then
              echo "linux_dir=$dir" >> $GITHUB_ENV
            elif [[ $dir == *"macOS Artifacts"* ]]
            then
              echo "mac_dir=$dir" >> $GITHUB_ENV
            elif [[ $dir == *"Windows"* ]]
            then
              echo "windows_dir=$dir" >> $GITHUB_ENV
            fi
          done
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}
          draft: false
          prerelease: false

      - name: Upload Linux tar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.linux_dir }}obj-x86_64-pc-linux-gnu/dist/waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
          asset_name: waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
          asset_label: waterfox-${{ github.event.inputs.version }}.en-US.linux-x86_64.tar.bz2
          asset_content_type: application/gzip
      - name: Upload macOS ARM64 dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.mac_dir }}obj-aarch64-apple-darwin/dist/waterfox/Waterfox ${{ github.event.inputs.version }} Setup.dmg
          asset_name: Waterfox ${{ github.event.inputs.version }} ARM Setup.dmg
          asset_label: Waterfox ${{ github.event.inputs.version }} ARM Setup.dmg
          asset_content_type: application/octet-stream
      - name: Upload macOS X64 dmg
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.mac_dir }}obj-x86_64-apple-darwin/dist/waterfox/Waterfox ${{ github.event.inputs.version }} Setup.dmg
          asset_name: Waterfox ${{ github.event.inputs.version }} Setup.dmg
          asset_label: Waterfox ${{ github.event.inputs.version }} Setup.dmg
          asset_content_type: application/octet-stream
      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.windows_dir }}obj-x86_64-pc-mingw32/dist/install/sea/Waterfox ${{ github.event.inputs.version }} Setup.exe
          asset_name: Waterfox ${{ github.event.inputs.version }} Setup.exe
          asset_label: Waterfox ${{ github.event.inputs.version }} Setup.exe
          asset_content_type: application/octet-stream

      - name: Rebuild website
        run: |
          # POST request to Cloudflare endpoint
          curl \
          -X POST \
          -H "content-type": "application/json;charset=UTF-8" \
          -H "X-Auth-Email": ${{ secrets.CF_EMAIL }} \
          -H "X-Auth-Key": ${{ secrets.CF_API_KEY }} \
          https://api.cloudflare.com/client/v4/accounts/${{ secrets.CF_ACCT_ID }}/pages/projects/${{ secrets.CF_PROJECT_NAME }}/deployments
          
  hard-release:
    name: Full Release
    needs: [soft-release]
    environment: hard-release
    runs-on: ubuntu-latest
    steps:
      - name: Copy update.xml
        run: |
          os=(Windows_NT_x86_64 Linux_x86_64 Darwin_x86_64 Darwin_aarch64)
          for i in ${os[@]}
          do
            update_loc='s3://aus.waterfox.net/update/staging/$i/update.xml'
            for j in $(aws s3 ls s3://aus.waterfox.net/update/Waterfox/ | awk '{OFS=" "};{if ($1=="PRE") print $2}')
            do
              if [[ $j != '/' ]]
              then
              ver=$(echo $j | sed 's/\///g')
              aws s3 cp --content-type="text/xml" --metadata-directive="REPLACE" $update_loc \
                s3://aus.waterfox.net/update/Waterfox/$ver/default/$i/update.xml
              fi
            done
            # grab the current version so we can create a new dir with a blank xml
            touch blank.xml
            echo "<?xml version="1.0"?><updates></updates>" >> blank.xml
            aws s3 cp --content-type="text/xml" --metadata-directive="REPLACE" blank.xml \
              s3://aus.waterfox.net/update/Waterfox/${{ github.event.inputs.version }}/default/$i/update.xml
          done
