[payment-request-constructor.https.html]
  type: testharness
  [Use provided request ID]
    expected: FAIL

  [If the length of the methodData sequence is zero, then throw a TypeError]
    expected: FAIL

  [If the length of the paymentMethod.supportedMethods sequence is zero, then throw a TypeError]
    expected: FAIL

  [Method data must be JSON-serializable object (a list in this case)]
    expected: FAIL

  [Method data must be JSON-serializable object (a dictionary in this case)]
    expected: FAIL

  [Rethrow any exceptions of JSON-serializing paymentMethod.data into a string]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: FAIL

  [If details.total.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: FAIL

  [If the first character of details.total.amount.value is U+002D HYPHEN-MINUS, then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "notdigits"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "ALSONOTDIGITS"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10."), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ".99"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-10."), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "-.99"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "10-"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1-0"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1.0.0"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "1/3"), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case ""), then throw a TypeError]
    expected: FAIL

  [For each item in details.displayItems: if item.amount.value is not a valid decimal monetary value (in this case "null"), then throw a TypeError]
    expected: FAIL

  [Modifier data must be JSON-serializable object (a list in this case)]
    expected: FAIL

  [Modifier data must be JSON-serializable object (a dictionary in this case)]
    expected: FAIL

  [Rethrow any exceptions of JSON-serializing modifier.data into a string]
    expected: FAIL

  [Total is required]
    expected: FAIL

  [Label is required]
    expected: FAIL

  [Amount is required]
    expected: FAIL

  [Amount value is required]
    expected: FAIL

  [Amount currency is required]
    expected: FAIL

  [Shipping type should be valid]
    expected: FAIL

