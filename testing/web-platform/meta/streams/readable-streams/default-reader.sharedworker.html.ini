[default-reader.sharedworker.html]
  type: testharness
  [Can get the ReadableStreamDefaultReader constructor indirectly]
    expected: FAIL

  [ReadableStreamDefaultReader instances should have the correct list of properties]
    expected: FAIL

  [ReadableStreamDefaultReader closed should always return the same promise object]
    expected: FAIL

  [Constructing a ReadableStreamDefaultReader directly should fail if the stream is already locked (via direct construction)]
    expected: FAIL

  [Getting a ReadableStreamDefaultReader via getReader should fail if the stream is already locked (via direct construction)]
    expected: FAIL

  [Constructing a ReadableStreamDefaultReader directly should fail if the stream is already locked (via getReader)]
    expected: FAIL

  [Getting a ReadableStreamDefaultReader via getReader should fail if the stream is already locked (via getReader)]
    expected: FAIL

  [Constructing a ReadableStreamDefaultReader directly should be OK if the stream is closed]
    expected: FAIL

  [Constructing a ReadableStreamDefaultReader directly should be OK if the stream is errored]
    expected: FAIL

  [Reading from a reader for an empty stream will wait until a chunk is available]
    expected: FAIL

  [cancel() on a reader does not release the reader]
    expected: FAIL

  [closed should be fulfilled after stream is closed (.closed access before acquiring)]
    expected: FAIL

  [closed should be rejected after reader releases its lock (multiple stream locks)]
    expected: FAIL

  [Multiple readers can access the stream in sequence]
    expected: FAIL

  [Cannot use an already-released reader to unlock a stream again]
    expected: FAIL

  [cancel() on a released reader is a no-op and does not pass through]
    expected: FAIL

  [Getting a second reader after erroring the stream and releasing the reader should succeed]
    expected: FAIL

  [ReadableStreamDefaultReader closed promise should be rejected with undefined if that is the error]
    expected: FAIL

  [ReadableStreamDefaultReader: if start rejects with no parameter, it should error the stream with an undefined error]
    expected: FAIL

  [Erroring a ReadableStream after checking closed should reject ReadableStreamDefaultReader closed promise]
    expected: FAIL

  [Erroring a ReadableStream before checking closed should reject ReadableStreamDefaultReader closed promise]
    expected: FAIL

  [Reading twice on a stream that gets closed]
    expected: FAIL

  [Reading twice on a closed stream]
    expected: FAIL

  [Reading twice on an errored stream]
    expected: FAIL

  [Reading twice on a stream that gets errored]
    expected: FAIL

