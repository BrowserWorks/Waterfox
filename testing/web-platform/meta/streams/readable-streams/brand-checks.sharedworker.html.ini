[brand-checks.sharedworker.html]
  type: testharness
  [Can get the ReadableStreamReader constructor indirectly]
    expected: FAIL

  [Can get the ReadableStreamController constructor indirectly]
    expected: FAIL

  [ReadableStream.prototype.cancel enforces a brand check]
    expected: FAIL

  [ReadableStream.prototype.getReader enforces a brand check]
    expected: FAIL

  [ReadableStream.prototype.tee enforces a brand check]
    expected: FAIL

  [ReadableStreamReader.prototype.closed enforces a brand check]
    expected: FAIL

  [ReadableStreamReader.prototype.cancel enforces a brand check]
    expected: FAIL

  [ReadableStreamReader.prototype.read enforces a brand check]
    expected: FAIL

  [ReadableStreamReader.prototype.releaseLock enforces a brand check]
    expected: FAIL

  [ReadableStreamController can't be given a fully-constructed ReadableStream]
    expected: FAIL

  [ReadableStreamController.prototype.close enforces a brand check]
    expected: FAIL

  [ReadableStreamController.prototype.enqueue enforces a brand check]
    expected: FAIL

  [ReadableStreamController.prototype.error enforces a brand check]
    expected: FAIL

  [Can get the ReadableStreamDefaultReader constructor indirectly]
    expected: FAIL

  [ReadableStreamDefaultReader.prototype.closed enforces a brand check]
    expected: FAIL

  [ReadableStreamDefaultReader.prototype.cancel enforces a brand check]
    expected: FAIL

  [ReadableStreamDefaultReader.prototype.read enforces a brand check]
    expected: FAIL

  [ReadableStreamDefaultReader.prototype.releaseLock enforces a brand check]
    expected: FAIL

