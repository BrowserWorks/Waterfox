[general.html]
  type: testharness
  [getReader({mode: "byob"}) throws on non-bytes streams]
    expected: FAIL

  [ReadableStream with byte source can be constructed with no errors]
    expected: FAIL

  [ReadableStream with byte source: Construct and expect start and pull being called]
    expected: FAIL

  [ReadableStream with byte source: No automatic pull call if start doesn't finish]
    expected: FAIL

  [ReadableStream with byte source: Construct with highWaterMark of 0]
    expected: FAIL

  [ReadableStream with byte source: getReader(), then releaseLock()]
    expected: FAIL

  [ReadableStream with byte source: getReader() with mode set to byob, then releaseLock()]
    expected: FAIL

  [ReadableStream with byte source: Test that closing a stream does not release a reader automatically]
    expected: FAIL

  [ReadableStream with byte source: Test that closing a stream does not release a BYOB reader automatically]
    expected: FAIL

  [ReadableStream with byte source: Test that erroring a stream does not release a reader automatically]
    expected: FAIL

  [ReadableStream with byte source: Test that erroring a stream does not release a BYOB reader automatically]
    expected: FAIL

  [ReadableStream with byte source: releaseLock() on ReadableStreamReader with pending read() must throw]
    expected: FAIL

  [ReadableStream with byte source: Automatic pull() after start()]
    expected: FAIL

  [ReadableStream with byte source: Automatic pull() after start() and read()]
    expected: FAIL

  [ReadableStream with byte source: autoAllocateChunkSize]
    expected: FAIL

  [ReadableStream with byte source: Mix of auto allocate and BYOB]
    expected: FAIL

  [ReadableStream with byte source: Automatic pull() after start() and read(view)]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then read()]
    expected: FAIL

  [ReadableStream with byte source: Push source that doesn't understand pull signal]
    expected: FAIL

  [ReadableStream with byte source: read(), but pull() function is not callable]
    expected: FAIL

  [ReadableStream with byte source: read(view), but pull() function is not callable]
    expected: FAIL

  [ReadableStream with byte source: enqueue() with Uint16Array, getReader(), then read()]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), read(view) partially, then read()]
    expected: FAIL

  [ReadableStream with byte source: getReader(), enqueue(), close(), then read()]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), close(), getReader(), then read()]
    expected: FAIL

  [ReadableStream with byte source: Respond to pull() by enqueue()]
    expected: FAIL

  [ReadableStream with byte source: Respond to pull() by enqueue() asynchronously]
    expected: FAIL

  [ReadableStream with byte source: read(view), then respond()]
    expected: FAIL

  [ReadableStream with byte source: read(view), then respond() with a transferred ArrayBuffer]
    expected: FAIL

  [ReadableStream with byte source: read(view), then respond() with too big value]
    expected: FAIL

  [ReadableStream with byte source: respond(3) to read(view) with 2 element Uint16Array enqueues the 1 byte remainder]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then read(view)]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then cancel() (mode = not BYOB)]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then cancel() (mode = BYOB)]
    expected: FAIL

  [ReadableStream with byte source: getReader(), read(view), then cancel()]
    expected: FAIL

  [ReadableStream with byte source: cancel() with partially filled pending pull() request]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then read(view) where view.buffer is not fully covered by view]
    expected: FAIL

  [ReadableStream with byte source: Multiple enqueue(), getReader(), then read(view)]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then read(view) with a bigger view]
    expected: FAIL

  [ReadableStream with byte source: enqueue(), getReader(), then read(view) with a smaller views]
    expected: FAIL

  [ReadableStream with byte source: enqueue() 1 byte, getReader(), then read(view) with Uint16Array]
    expected: FAIL

  [ReadableStream with byte source: enqueue() 3 byte, getReader(), then read(view) with 2-element Uint16Array]
    expected: FAIL

  [ReadableStream with byte source: read(view) with Uint16Array on close()-d stream with 1 byte enqueue()-d must fail]
    expected: FAIL

  [ReadableStream with byte source: A stream must be errored if close()-d before fulfilling read(view) with Uint16Array]
    expected: FAIL

  [ReadableStream with byte source: Throw if close()-ed more than once]
    expected: FAIL

  [ReadableStream with byte source: Throw on enqueue() after close()]
    expected: FAIL

  [ReadableStream with byte source: read(view), then respond() and close() in pull()]
    expected: FAIL

  [ReadableStream with byte source: read(view) with Uint32Array, then fill it by multiple respond() calls]
    expected: FAIL

  [ReadableStream with byte source: read() twice, then enqueue() twice]
    expected: FAIL

  [ReadableStream with byte source: Multiple read(view), close() and respond()]
    expected: FAIL

  [ReadableStream with byte source: Multiple read(view), big enqueue()]
    expected: FAIL

  [ReadableStream with byte source: Multiple read(view) and multiple enqueue()]
    expected: FAIL

  [ReadableStream with byte source: read(view) with passing undefined as view must fail]
    expected: FAIL

  [ReadableStream with byte source: read(view) with zero-length view must fail]
    expected: FAIL

  [ReadableStream with byte source: read(view) with passing an empty object as view must fail]
    expected: FAIL

  [ReadableStream with byte source: Even read(view) with passing ArrayBufferView like object as view must fail]
    expected: FAIL

  [ReadableStream with byte source: read() on an errored stream]
    expected: FAIL

  [ReadableStream with byte source: read(), then error()]
    expected: FAIL

  [ReadableStream with byte source: read(view) on an errored stream]
    expected: FAIL

  [ReadableStream with byte source: read(view), then error()]
    expected: FAIL

  [ReadableStream with byte source: Throwing in pull function must error the stream]
    expected: FAIL

  [ReadableStream with byte source: Throwing in pull in response to read() must be ignored if the stream is errored in it]
    expected: FAIL

  [ReadableStream with byte source: Throwing in pull in response to read(view) function must error the stream]
    expected: FAIL

  [ReadableStream with byte source: Throwing in pull in response to read(view) must be ignored if the stream is errored in it]
    expected: FAIL

  [ReadableStreamBYOBReader can be constructed directly]
    expected: FAIL

  [ReadableStreamBYOBReader constructor requires a ReadableStream argument]
    expected: FAIL

  [ReadableStreamBYOBReader constructor requires an unlocked ReadableStream]
    expected: FAIL

  [ReadableStreamBYOBReader constructor requires a ReadableStream with type "bytes"]
    expected: FAIL

  [ReadableStream with byte source: desiredSize when closed]
    expected: FAIL

  [ReadableStream with byte source: desiredSize when errored]
    expected: FAIL

  [getReader({mode}) must perform ToString()]
    expected: FAIL

  [ReadableStream with byte source: default reader + autoAllocateChunkSize + byobRequest interaction]
    expected: FAIL

