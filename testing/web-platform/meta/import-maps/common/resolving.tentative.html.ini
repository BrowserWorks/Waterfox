[resolving.tentative.html]
  [Package-like scenarios: package submodules: moment/foo]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: \\invalid-specifier]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: https://example.com/app/]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: /app/]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-subpath base URL (fail): moment]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to toplevel: moment/foo]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: c]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Subpath base URL (prefix match): moment/foo]
    expected: FAIL

  [fetch scheme absolute URLs: https://fetch%2Dscheme.com/]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: ..\\]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: %2E/invalid-specifier]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: .%2Finvalid-specifier]
    expected: FAIL

  [Package-like scenarios: package modules that are not declared should fail: underscore/foo]
    expected: FAIL

  [fetch scheme absolute URLs: https://fetch-scheme.net]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Non-subpath base URL (fail): moment/foo]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Non-trailing-slash base URL (fail): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Non-subpath base URL (fail): moment]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: /]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot/foo]
    expected: FAIL

  [Tricky specifiers: explicitly-mapped specifiers that happen to have a slash: package/withslash]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot/foo]
    expected: FAIL

  [Package-like scenarios: package main modules: lodash-dot]
    expected: FAIL

  [URL-like specifiers: prefix-matched by keys with trailing slashes: https://example.com/app/test/foo.mjs]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/x]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to less specific scope: moment]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b]
    expected: FAIL

  [Package-like scenarios: package main modules: moment]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/]
    expected: FAIL

  [valid relative specifiers: /foo/bar]
    expected: FAIL

  [valid relative specifiers: ../foo]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot/foo]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: %2F]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: %2E]
    expected: FAIL

  [URL-like specifiers: should use the last entry's address when URL-like specifiers parse to the same absolute URL: /test]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [valid relative specifiers: ../../../foo/bar]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b/]
    expected: FAIL

  [non-fetch scheme absolute URLs: wss:non-fetch-scheme]
    expected: FAIL

  [should favor the most-specific key: Overlapping entries with trailing slashes: a/b/c]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Non-trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [valid relative specifiers: ./foo/bar]
    expected: FAIL

  [Package-like scenarios: should still fail for package-like specifiers that are not declared: underscore/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-subpath base URL (fail): moment/foo]
    expected: FAIL

  [non-fetch scheme absolute URLs: mailto:non-fetch-scheme]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: a]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Subpath base URL (fail): moment]
    expected: FAIL

  [valid relative specifiers: ./foo]
    expected: FAIL

  [invalid absolute URLs should fail: https://invalid-url.com:demo]
    expected: FAIL

  [Tricky specifiers: submodule of something not declared with a trailing slash should fail: not-a-package/foo]
    expected: FAIL

  [fetch scheme absolute URLs: about:fetch-scheme]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: %2E%2E/invalid-specifier]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: c]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: invalid-specifier]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: a]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: :invalid-specifier]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Trailing-slash base URL (fail): moment/foo]
    expected: FAIL

  [invalid absolute URLs should fail: http://[invalid-url.com\]/]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: https://example.com/dotdotrelative/foo.mjs]
    expected: FAIL

  [Package-like scenarios: should still fail for package-like specifiers that are not declared: underscore/]
    expected: FAIL

  [valid relative specifiers: /foo]
    expected: FAIL

  [Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Non-trailing-slash base URL (fail): moment/foo]
    expected: FAIL

  [Package-like scenarios: package main modules: lodash-dotdot]
    expected: FAIL

  [valid relative specifiers: /../../foo/bar]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope fallback to less specific scope: vue]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dot/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Subpath base URL (prefix match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scope with trailing slash only: Trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Non-trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: c]
    expected: FAIL

  [Relative URL scope keys: '../' scope is a scope with import map base URL's parent directory: b]
    expected: FAIL

  [fetch scheme absolute URLs: https://///fetch-scheme.com///]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Non-subpath base URL (fail): moment]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: https://example.com/]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dot]
    expected: FAIL

  [Package-like scenarios: package names that end in a slash should just pass through: moment/]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: https://example.com/lib/foo.mjs]
    expected: FAIL

  [non-fetch scheme absolute URLs: import:non-fetch-scheme]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: https://example.com/app/dotrelative/foo.mjs]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Subpath base URL (prefix match): moment/foo]
    expected: FAIL

  [Package-like scenarios: package submodules: lodash-dot/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Tricky specifiers: module for which only a trailing-slash version is present should fail: only-slash]
    expected: FAIL

  [Package-like scenarios: Base URLs outside a scope shouldn't use the scope even if the scope has matching keys: lodash-dotdot]
    expected: FAIL

  [valid relative specifiers: /../foo/../bar]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: https://///example.com/lib/foo.mjs]
    expected: FAIL

  [Package-like scenarios: package submodules: lodash-dotdot/foo]
    expected: FAIL

  [valid relative specifiers: ./foo/../bar]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: ../]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: ..]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: d]
    expected: FAIL

  [Package-like scenarios: Base URLs inside the scope should use the scope if the scope has matching keys: lodash-dotdot]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: b]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use an indirect scope override: c]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Trailing-slash base URL (fail): moment]
    expected: FAIL

  [valid relative specifiers: ../foo/bar]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: c]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: b]
    expected: FAIL

  [Relative URL scope keys: './' scope is a scope with import map base URL's directory: a]
    expected: FAIL

  [non-fetch scheme absolute URLs: javascript:non-fetch-scheme]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: ../app/dotrelative/foo.mjs]
    expected: FAIL

  [data: base URL (?): should favor the most-specific key: foo/bar]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Non-trailing-slash base URL (exact match): moment/foo]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Non-subpath base URL (fail): moment/foo]
    expected: FAIL

  [valid relative specifiers: ./foo/../../bar]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: /lib/foo.mjs]
    expected: FAIL

  [URL-like specifiers: Ordinal URL-like specifiers: ../dotdotrelative/foo.mjs]
    expected: FAIL

  [valid relative URLs that are invalid as specifiers should fail: @invalid-specifier]
    expected: FAIL

  [URL-like specifiers: Import map entries just composed from / and .: ../app/]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: d]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: c]
    expected: FAIL

  [Fallback to toplevel and between scopes: should fall back to `imports` when no scopes match: b]
    expected: FAIL

  [Package-like scenarios: Fallback to toplevel or not, depending on trailing slash match: moment/foo]
    expected: FAIL

  [fetch scheme absolute URLs: https:fetch-scheme.org]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Trailing-slash base URL (exact match): moment]
    expected: FAIL

  [Exact vs. prefix based matching: Scopes with and without trailing slash: Subpath base URL (prefix match): moment]
    expected: FAIL

  [Relative URL scope keys: An empty string scope is a scope with import map base URL: b]
    expected: FAIL

  [Exact vs. prefix based matching: Scope without trailing slash only: Subpath base URL (fail): moment/foo]
    expected: FAIL

  [URL-like specifiers: prefix-matched by keys with trailing slashes: /test/foo.mjs]
    expected: FAIL

  [Package-like scenarios: package modules that are not declared should fail: underscore/]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: b]
    expected: FAIL

  [Tricky specifiers: specifier with punctuation: .]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: a]
    expected: FAIL

  [Fallback to toplevel and between scopes: should use a direct scope override: d]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to absolute URL parsing: https://example.com/null]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: prefix-resolution-error/b/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: prefix-resolution-error/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: invalid-url/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: null/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: invalid-url/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to absolute URL parsing: https://example.com/invalid-url]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific scopes: invalid-url]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: without-trailing-slashes/b/c/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: without-trailing-slashes/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific scopes: without-trailing-slashes/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: without-trailing-slashes/b/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: invalid-url/b/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: null/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to absolute URL parsing: https://example.com/without-trailing-slashes/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: prefix-resolution-error/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific scopes: null]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to absolute URL parsing: https://example.com/prefix-resolution-error/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific prefixes: null/b/x]
    expected: FAIL

  [Entries with errors shouldn't allow fallback: No fallback to less-specific scopes: prefix-resolution-error/x]
    expected: FAIL

