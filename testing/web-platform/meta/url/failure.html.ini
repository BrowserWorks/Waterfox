[failure.html]
  max-asserts: 3
  [URL's href: file://example:1/ should throw]
    expected: FAIL

  [XHR: file://example:1/ should throw]
    expected: FAIL

  [URL's href: file://example:test/ should throw]
    expected: FAIL

  [XHR: file://example:test/ should throw]
    expected: FAIL

  [URL's href: file://example%/ should throw]
    expected: FAIL

  [XHR: file://example%/ should throw]
    expected: FAIL

  [URL's href: file://[example\]/ should throw]
    expected: FAIL

  [XHR: file://[example\]/ should throw]
    expected: FAIL

  [Location's href: http://user:pass@/ should throw]
    expected: FAIL

  [Location's href: http://foo:-80/ should throw]
    expected: FAIL

  [Location's href: http://user@/www.example.com should throw]
    expected: FAIL

  [Location's href: http://@/www.example.com should throw]
    expected: FAIL

  [Location's href: http://a:b@/www.example.com should throw]
    expected: FAIL

  [XHR: http:@:www.example.com should throw]
    expected: FAIL

  [sendBeacon(): http:@:www.example.com should throw]
    expected: FAIL

  [Location's href: http:@:www.example.com should throw]
    expected: FAIL

  [XHR: http:/@:www.example.com should throw]
    expected: FAIL

  [sendBeacon(): http:/@:www.example.com should throw]
    expected: FAIL

  [Location's href: http:/@:www.example.com should throw]
    expected: FAIL

  [Location's href: http://@:www.example.com should throw]
    expected: FAIL

  [Location's href: https://� should throw]
    expected: FAIL

  [Location's href: https://%EF%BF%BD should throw]
    expected: FAIL

  [Location's href: https://x x:12 should throw]
    expected: FAIL

  [Location's href: http://[www.google.com\]/ should throw]
    expected: FAIL

  [URL's href: sc://\x00/ should throw]
    expected: FAIL

  [XHR: sc://\x00/ should throw]
    expected: FAIL

  [Location's href: sc://\x00/ should throw]
    expected: FAIL

  [URL's href: sc:// / should throw]
    expected: FAIL

  [XHR: sc:// / should throw]
    expected: FAIL

  [Location's href: sc:// / should throw]
    expected: FAIL

  [URL's href: sc://@/ should throw]
    expected: FAIL

  [XHR: sc://@/ should throw]
    expected: FAIL

  [Location's href: sc://@/ should throw]
    expected: FAIL

  [URL's href: sc://te@s:t@/ should throw]
    expected: FAIL

  [XHR: sc://te@s:t@/ should throw]
    expected: FAIL

  [Location's href: sc://te@s:t@/ should throw]
    expected: FAIL

  [URL's href: sc://:/ should throw]
    expected: FAIL

  [XHR: sc://:/ should throw]
    expected: FAIL

  [Location's href: sc://:/ should throw]
    expected: FAIL

  [URL's href: sc://:12/ should throw]
    expected: FAIL

  [XHR: sc://:12/ should throw]
    expected: FAIL

  [Location's href: sc://:12/ should throw]
    expected: FAIL

  [URL's href: sc://[/ should throw]
    expected: FAIL

  [XHR: sc://[/ should throw]
    expected: FAIL

  [Location's href: sc://[/ should throw]
    expected: FAIL

  [URL's href: sc://\\/ should throw]
    expected: FAIL

  [XHR: sc://\\/ should throw]
    expected: FAIL

  [Location's href: sc://\\/ should throw]
    expected: FAIL

  [URL's href: sc://\]/ should throw]
    expected: FAIL

  [XHR: sc://\]/ should throw]
    expected: FAIL

  [Location's href: sc://\]/ should throw]
    expected: FAIL

  [Location's href: ftp://example.com%80/ should throw]
    expected: FAIL

  [Location's href: ftp://example.com%A0/ should throw]
    expected: FAIL

  [Location's href: https://example.com%80/ should throw]
    expected: FAIL

  [Location's href: https://example.com%A0/ should throw]
    expected: FAIL

  [Location's href: https://[0::0::0\] should throw]
    expected: FAIL

  [Location's href: https://[0:.0\] should throw]
    expected: FAIL

  [Location's href: https://[0:0:\] should throw]
    expected: FAIL

  [Location's href: https://[0:1:2:3:4:5:6:7.0.0.0.1\] should throw]
    expected: FAIL

  [Location's href: https://[0:1.00.0.0.0\] should throw]
    expected: FAIL

  [Location's href: https://[0:1.290.0.0.0\] should throw]
    expected: FAIL

  [Location's href: https://[0:1.23.23\] should throw]
    expected: FAIL

  [Location's href: http://? should throw]
    expected: FAIL

  [Location's href: http://# should throw]
    expected: FAIL

  [URL's href: non-special://[:80/ should throw]
    expected: FAIL

  [XHR: non-special://[:80/ should throw]
    expected: FAIL

  [Location's href: non-special://[:80/ should throw]
    expected: FAIL

  [window.open(): file://example:1/ should throw]
    expected: FAIL

  [window.open(): file://example:test/ should throw]
    expected: FAIL

  [window.open(): file://example%/ should throw]
    expected: FAIL

  [window.open(): file://[example\]/ should throw]
    expected: FAIL

  [window.open(): http:@:www.example.com should throw]
    expected: FAIL

  [window.open(): http:/@:www.example.com should throw]
    expected: FAIL

  [window.open(): sc://\x00/ should throw]
    expected: FAIL

  [window.open(): sc:// / should throw]
    expected: FAIL

  [window.open(): sc://@/ should throw]
    expected: FAIL

  [window.open(): sc://te@s:t@/ should throw]
    expected: FAIL

  [window.open(): sc://:/ should throw]
    expected: FAIL

  [window.open(): sc://:12/ should throw]
    expected: FAIL

  [window.open(): sc://[/ should throw]
    expected: FAIL

  [window.open(): sc://\\/ should throw]
    expected: FAIL

  [window.open(): sc://\]/ should throw]
    expected: FAIL

  [window.open(): non-special://[:80/ should throw]
    expected: FAIL

  [URL's href: https://0x100000000/test should throw]
    expected: FAIL

  [XHR: https://0x100000000/test should throw]
    expected: FAIL

  [sendBeacon(): https://0x100000000/test should throw]
    expected: FAIL

  [Location's href: https://0x100000000/test should throw]
    expected: FAIL

  [window.open(): https://0x100000000/test should throw]
    expected: FAIL

  [URL's href: https://256.0.0.1/test should throw]
    expected: FAIL

  [XHR: https://256.0.0.1/test should throw]
    expected: FAIL

  [sendBeacon(): https://256.0.0.1/test should throw]
    expected: FAIL

  [Location's href: https://256.0.0.1/test should throw]
    expected: FAIL

  [window.open(): https://256.0.0.1/test should throw]
    expected: FAIL

  [Location's href: http://[::127.0.0.0.1\] should throw]
    expected: FAIL

  [URL's constructor's base argument: file://example:1/ should throw]
    expected: FAIL

  [URL's constructor's base argument: file://example:test/ should throw]
    expected: FAIL

  [URL's constructor's base argument: file://example%/ should throw]
    expected: FAIL

  [URL's constructor's base argument: file://[example\]/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://\x00/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc:// / should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://@/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://te@s:t@/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://:/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://:12/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://[/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://\\/ should throw]
    expected: FAIL

  [URL's constructor's base argument: sc://\]/ should throw]
    expected: FAIL

  [URL's constructor's base argument: https://0x100000000/test should throw]
    expected: FAIL

  [URL's constructor's base argument: https://256.0.0.1/test should throw]
    expected: FAIL

  [URL's constructor's base argument: non-special://[:80/ should throw]
    expected: FAIL

  [Location's href: https://� should throw]
    expected: FAIL

  [Location's href: https://� should throw]
    expected: FAIL

  [URL's constructor's base argument: file://xn--/p should throw]
    expected: FAIL

  [window.open(): file://xn--/p should throw]
    expected: FAIL

  [URL's href: file://%C2%AD/p should throw]
    expected: FAIL

  [Location's href: file://­/p should throw]
    expected:
      if (os == "win") and fission and debug: [PASS, FAIL]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "linux") and fission: [FAIL, PASS]
      if os == "android": [FAIL, PASS]

  [window.open(): file://%C2%AD/p should throw]
    expected: FAIL

  [XHR: file://xn--/p should throw]
    expected: FAIL

  [URL's constructor's base argument: file://%C2%AD/p should throw]
    expected: FAIL

  [window.open(): file://­/p should throw]
    expected: FAIL

  [XHR: file://%C2%AD/p should throw]
    expected: FAIL

  [Location's href: file://xn--/p should throw]
    bug:
      if os == "android": https://bugzilla.mozilla.org/show_bug.cgi?id=1695101
      if fission: https://bugzilla.mozilla.org/show_bug.cgi?id=1695101
    expected:
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if (os == "linux") and fission: [FAIL, PASS]
      if os == "android": [FAIL, PASS]

  [URL's href: file://xn--/p should throw]
    expected: FAIL

  [URL's constructor's base argument: file://­/p should throw]
    expected: FAIL

  [URL's href: file://­/p should throw]
    expected: FAIL

  [XHR: file://­/p should throw]
    expected: FAIL

  [Location's href: file://%C2%AD/p should throw]
    bug:
      if os == "android": https://bugzilla.mozilla.org/show_bug.cgi?id=1695101
      if fission: https://bugzilla.mozilla.org/show_bug.cgi?id=1695101
    expected:
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if (os == "linux") and fission: [FAIL, PASS]
      if os == "android": [FAIL, PASS]

  [sendBeacon(): \\\\\\.\\Y: should throw]
    expected: FAIL

  [sendBeacon(): \\\\\\.\\y: should throw]
    expected: FAIL

  [window.open(): \\\\\\.\\y: should throw]
    expected: FAIL

  [window.open(): \\\\\\.\\Y: should throw]
    expected: FAIL

  [Location's href: \\\\\\.\\Y: should throw]
    expected: FAIL

  [Location's href: \\\\\\.\\y: should throw]
    expected: FAIL

  [XHR: \\\\\\.\\y: should throw]
    expected: FAIL

  [Location's href: non-special://a>b should throw]
    expected: FAIL

  [Location's href: non-special://a^b should throw]
    expected: FAIL

  [URL's constructor's base argument: non-special://a^b should throw]
    expected: FAIL

  [URL's href: non-special://a^b should throw]
    expected: FAIL

  [window.open(): non-special://a^b should throw]
    expected: FAIL

  [URL's constructor's base argument: non-special://a>b should throw]
    expected: FAIL

  [URL's href: non-special://a<b should throw]
    expected: FAIL

  [window.open(): non-special://a<b should throw]
    expected: FAIL

  [XHR: non-special://a>b should throw]
    expected: FAIL

  [XHR: non-special://a<b should throw]
    expected: FAIL

  [Location's href: http://a<b should throw]
    expected: FAIL

  [XHR: non-special://a^b should throw]
    expected: FAIL

  [URL's constructor's base argument: non-special://a<b should throw]
    expected: FAIL

  [Location's href: http://a>b should throw]
    expected: FAIL

  [Location's href: http://a^b should throw]
    expected: FAIL

  [URL's href: non-special://a>b should throw]
    expected: FAIL

  [Location's href: non-special://a<b should throw]
    expected: FAIL

  [window.open(): non-special://a>b should throw]
    expected: FAIL

  [XHR: \\\\\\.\\Y: should throw]
    expected: FAIL

  [URL's constructor's base argument: file://%43%3A should throw]
    expected: FAIL

  [URL's href: file://%43%3A should throw]
    expected: FAIL

  [XHR: file://%43%3A should throw]
    expected: FAIL

  [Location's href: file://%43%3A should throw]
    expected:
      if (os == "linux") and fission and webrender and not debug: [FAIL, PASS]
      if (os == "linux") and fission and webrender and debug: FAIL
      if (os == "linux") and fission and not webrender: [FAIL, PASS]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if os == "android": FAIL

  [window.open(): file://%43%3A should throw]
    expected: FAIL

  [URL's constructor's base argument: file://%43%7C should throw]
    expected: FAIL

  [URL's href: file://%43%7C should throw]
    expected: FAIL

  [XHR: file://%43%7C should throw]
    expected: FAIL

  [Location's href: file://%43%7C should throw]
    expected:
      if (os == "linux") and fission and webrender and debug: FAIL
      if (os == "linux") and fission and webrender and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "linux") and fission and not webrender: [FAIL, PASS]
      if os == "android": FAIL

  [window.open(): file://%43%7C should throw]
    expected: FAIL

  [URL's constructor's base argument: file://%43| should throw]
    expected: FAIL

  [URL's href: file://%43| should throw]
    expected: FAIL

  [XHR: file://%43| should throw]
    expected: FAIL

  [Location's href: file://%43| should throw]
    expected:
      if (os == "linux") and fission and webrender and not debug: [FAIL, PASS]
      if (os == "linux") and fission and webrender and debug: FAIL
      if (os == "linux") and fission and not webrender: [FAIL, PASS]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if os == "android": FAIL

  [window.open(): file://%43| should throw]
    expected: FAIL

  [URL's constructor's base argument: file://C%7C should throw]
    expected: FAIL

  [URL's href: file://C%7C should throw]
    expected: FAIL

  [XHR: file://C%7C should throw]
    expected: FAIL

  [Location's href: file://C%7C should throw]
    expected:
      if (os == "linux") and fission and webrender and not debug: [FAIL, PASS]
      if (os == "linux") and fission and webrender and debug: FAIL
      if (os == "linux") and fission and not webrender: [FAIL, PASS]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if os == "android": FAIL

  [window.open(): file://C%7C should throw]
    expected: FAIL

  [URL's constructor's base argument: file://%43%7C/ should throw]
    expected: FAIL

  [URL's href: file://%43%7C/ should throw]
    expected: FAIL

  [XHR: file://%43%7C/ should throw]
    expected: FAIL

  [Location's href: file://%43%7C/ should throw]
    expected:
      if (os == "linux") and fission and webrender and debug: FAIL
      if (os == "linux") and fission and webrender and not debug: [FAIL, PASS]
      if (os == "linux") and fission and not webrender: [FAIL, PASS]
      if (os == "win") and fission and debug: [PASS, FAIL]
      if (os == "win") and fission and not debug: [FAIL, PASS]
      if os == "android": FAIL

  [window.open(): file://%43%7C/ should throw]
    expected: FAIL

  [Location's href: https://%43%7C/ should throw]
    expected: FAIL

  [URL's constructor's base argument: asdf://%43|/ should throw]
    expected: FAIL

  [URL's href: asdf://%43|/ should throw]
    expected: FAIL

  [XHR: asdf://%43|/ should throw]
    expected: FAIL

  [Location's href: asdf://%43|/ should throw]
    expected: FAIL

  [window.open(): asdf://%43|/ should throw]
    expected: FAIL

  [URL's constructor's base argument: http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [URL's href: http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [XHR: http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [sendBeacon(): http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [Location's href: http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [window.open(): http://a.b.c.xn--pokxncvks should throw]
    expected: FAIL

  [URL's constructor's base argument: http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [URL's href: http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [XHR: http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [sendBeacon(): http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [Location's href: http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [window.open(): http://10.0.0.xn--pokxncvks should throw]
    expected: FAIL

  [URL's constructor's base argument: foo://ho\x00st/ should throw]
    expected: FAIL

  [URL's href: foo://ho\x00st/ should throw]
    expected: FAIL

  [XHR: foo://ho\x00st/ should throw]
    expected: FAIL

  [Location's href: foo://ho\x00st/ should throw]
    expected: FAIL

  [window.open(): foo://ho\x00st/ should throw]
    expected: FAIL

  [URL's constructor's base argument: foo://ho|st/ should throw]
    expected: FAIL

  [URL's href: foo://ho|st/ should throw]
    expected: FAIL

  [XHR: foo://ho|st/ should throw]
    expected: FAIL

  [Location's href: foo://ho|st/ should throw]
    expected: FAIL

  [window.open(): foo://ho|st/ should throw]
    expected: FAIL

  [Location's href: http://ho%00st/ should throw]
    expected: FAIL

  [Location's href: http://ho%09st/ should throw]
    expected: FAIL

  [Location's href: http://ho%0Ast/ should throw]
    expected: FAIL

  [Location's href: http://ho%0Dst/ should throw]
    expected: FAIL

  [Location's href: http://ho%20st/ should throw]
    expected: FAIL

  [Location's href: http://ho%23st/ should throw]
    expected: FAIL

  [Location's href: http://ho%2Fst/ should throw]
    expected: FAIL

  [Location's href: http://ho%3Ast/ should throw]
    expected: FAIL

  [Location's href: http://ho%3Cst/ should throw]
    expected: FAIL

  [Location's href: http://ho%3Est/ should throw]
    expected: FAIL

  [Location's href: http://ho%3Fst/ should throw]
    expected: FAIL

  [Location's href: http://ho%40st/ should throw]
    expected: FAIL

  [Location's href: http://ho%5Bst/ should throw]
    expected: FAIL

  [Location's href: http://ho%5Cst/ should throw]
    expected: FAIL

  [Location's href: http://ho%5Dst/ should throw]
    expected: FAIL

  [Location's href: http://ho%7Cst/ should throw]
    expected: FAIL
