// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LayerScopePacket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_LayerScopePacket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_LayerScopePacket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_LayerScopePacket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
namespace mozilla {
namespace layers {
namespace layerscope {
class ColorPacket;
class ColorPacketDefaultTypeInternal;
extern ColorPacketDefaultTypeInternal _ColorPacket_default_instance_;
class CommandPacket;
class CommandPacketDefaultTypeInternal;
extern CommandPacketDefaultTypeInternal _CommandPacket_default_instance_;
class DrawPacket;
class DrawPacketDefaultTypeInternal;
extern DrawPacketDefaultTypeInternal _DrawPacket_default_instance_;
class DrawPacket_Rect;
class DrawPacket_RectDefaultTypeInternal;
extern DrawPacket_RectDefaultTypeInternal _DrawPacket_Rect_default_instance_;
class FramePacket;
class FramePacketDefaultTypeInternal;
extern FramePacketDefaultTypeInternal _FramePacket_default_instance_;
class LayersPacket;
class LayersPacketDefaultTypeInternal;
extern LayersPacketDefaultTypeInternal _LayersPacket_default_instance_;
class LayersPacket_Layer;
class LayersPacket_LayerDefaultTypeInternal;
extern LayersPacket_LayerDefaultTypeInternal _LayersPacket_Layer_default_instance_;
class LayersPacket_Layer_Matrix;
class LayersPacket_Layer_MatrixDefaultTypeInternal;
extern LayersPacket_Layer_MatrixDefaultTypeInternal _LayersPacket_Layer_Matrix_default_instance_;
class LayersPacket_Layer_Rect;
class LayersPacket_Layer_RectDefaultTypeInternal;
extern LayersPacket_Layer_RectDefaultTypeInternal _LayersPacket_Layer_Rect_default_instance_;
class LayersPacket_Layer_Region;
class LayersPacket_Layer_RegionDefaultTypeInternal;
extern LayersPacket_Layer_RegionDefaultTypeInternal _LayersPacket_Layer_Region_default_instance_;
class LayersPacket_Layer_Shadow;
class LayersPacket_Layer_ShadowDefaultTypeInternal;
extern LayersPacket_Layer_ShadowDefaultTypeInternal _LayersPacket_Layer_Shadow_default_instance_;
class LayersPacket_Layer_Size;
class LayersPacket_Layer_SizeDefaultTypeInternal;
extern LayersPacket_Layer_SizeDefaultTypeInternal _LayersPacket_Layer_Size_default_instance_;
class MetaPacket;
class MetaPacketDefaultTypeInternal;
extern MetaPacketDefaultTypeInternal _MetaPacket_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class TexturePacket;
class TexturePacketDefaultTypeInternal;
extern TexturePacketDefaultTypeInternal _TexturePacket_default_instance_;
class TexturePacket_EffectMask;
class TexturePacket_EffectMaskDefaultTypeInternal;
extern TexturePacket_EffectMaskDefaultTypeInternal _TexturePacket_EffectMask_default_instance_;
class TexturePacket_Matrix;
class TexturePacket_MatrixDefaultTypeInternal;
extern TexturePacket_MatrixDefaultTypeInternal _TexturePacket_Matrix_default_instance_;
class TexturePacket_Rect;
class TexturePacket_RectDefaultTypeInternal;
extern TexturePacket_RectDefaultTypeInternal _TexturePacket_Rect_default_instance_;
class TexturePacket_Size;
class TexturePacket_SizeDefaultTypeInternal;
extern TexturePacket_SizeDefaultTypeInternal _TexturePacket_Size_default_instance_;
}  // namespace layerscope
}  // namespace layers
}  // namespace mozilla
PROTOBUF_NAMESPACE_OPEN
template<> ::mozilla::layers::layerscope::ColorPacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::ColorPacket>(Arena*);
template<> ::mozilla::layers::layerscope::CommandPacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::CommandPacket>(Arena*);
template<> ::mozilla::layers::layerscope::DrawPacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::DrawPacket>(Arena*);
template<> ::mozilla::layers::layerscope::DrawPacket_Rect* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::DrawPacket_Rect>(Arena*);
template<> ::mozilla::layers::layerscope::FramePacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::FramePacket>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Matrix>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Rect>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer_Region* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Shadow>(Arena*);
template<> ::mozilla::layers::layerscope::LayersPacket_Layer_Size* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Size>(Arena*);
template<> ::mozilla::layers::layerscope::MetaPacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::MetaPacket>(Arena*);
template<> ::mozilla::layers::layerscope::Packet* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::Packet>(Arena*);
template<> ::mozilla::layers::layerscope::TexturePacket* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket>(Arena*);
template<> ::mozilla::layers::layerscope::TexturePacket_EffectMask* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_EffectMask>(Arena*);
template<> ::mozilla::layers::layerscope::TexturePacket_Matrix* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Matrix>(Arena*);
template<> ::mozilla::layers::layerscope::TexturePacket_Rect* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Rect>(Arena*);
template<> ::mozilla::layers::layerscope::TexturePacket_Size* Arena::CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Size>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mozilla {
namespace layers {
namespace layerscope {

enum TexturePacket_Filter : int {
  TexturePacket_Filter_GOOD = 0,
  TexturePacket_Filter_LINEAR = 1,
  TexturePacket_Filter_POINT = 2
};
bool TexturePacket_Filter_IsValid(int value);
constexpr TexturePacket_Filter TexturePacket_Filter_Filter_MIN = TexturePacket_Filter_GOOD;
constexpr TexturePacket_Filter TexturePacket_Filter_Filter_MAX = TexturePacket_Filter_POINT;
constexpr int TexturePacket_Filter_Filter_ARRAYSIZE = TexturePacket_Filter_Filter_MAX + 1;

const std::string& TexturePacket_Filter_Name(TexturePacket_Filter value);
template<typename T>
inline const std::string& TexturePacket_Filter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TexturePacket_Filter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TexturePacket_Filter_Name.");
  return TexturePacket_Filter_Name(static_cast<TexturePacket_Filter>(enum_t_value));
}
bool TexturePacket_Filter_Parse(
    const std::string& name, TexturePacket_Filter* value);
enum LayersPacket_Layer_LayerType : int {
  LayersPacket_Layer_LayerType_UnknownLayer = 0,
  LayersPacket_Layer_LayerType_LayerManager = 1,
  LayersPacket_Layer_LayerType_ContainerLayer = 2,
  LayersPacket_Layer_LayerType_PaintedLayer = 3,
  LayersPacket_Layer_LayerType_CanvasLayer = 4,
  LayersPacket_Layer_LayerType_ImageLayer = 5,
  LayersPacket_Layer_LayerType_ColorLayer = 6,
  LayersPacket_Layer_LayerType_RefLayer = 8,
  LayersPacket_Layer_LayerType_ReadbackLayer = 9,
  LayersPacket_Layer_LayerType_DisplayItemLayer = 10
};
bool LayersPacket_Layer_LayerType_IsValid(int value);
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer_LayerType_LayerType_MIN = LayersPacket_Layer_LayerType_UnknownLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer_LayerType_LayerType_MAX = LayersPacket_Layer_LayerType_DisplayItemLayer;
constexpr int LayersPacket_Layer_LayerType_LayerType_ARRAYSIZE = LayersPacket_Layer_LayerType_LayerType_MAX + 1;

const std::string& LayersPacket_Layer_LayerType_Name(LayersPacket_Layer_LayerType value);
template<typename T>
inline const std::string& LayersPacket_Layer_LayerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayersPacket_Layer_LayerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayersPacket_Layer_LayerType_Name.");
  return LayersPacket_Layer_LayerType_Name(static_cast<LayersPacket_Layer_LayerType>(enum_t_value));
}
bool LayersPacket_Layer_LayerType_Parse(
    const std::string& name, LayersPacket_Layer_LayerType* value);
enum LayersPacket_Layer_ScrollingDirect : int {
  LayersPacket_Layer_ScrollingDirect_VERTICAL = 1,
  LayersPacket_Layer_ScrollingDirect_HORIZONTAL = 2
};
bool LayersPacket_Layer_ScrollingDirect_IsValid(int value);
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer_ScrollingDirect_ScrollingDirect_MIN = LayersPacket_Layer_ScrollingDirect_VERTICAL;
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer_ScrollingDirect_ScrollingDirect_MAX = LayersPacket_Layer_ScrollingDirect_HORIZONTAL;
constexpr int LayersPacket_Layer_ScrollingDirect_ScrollingDirect_ARRAYSIZE = LayersPacket_Layer_ScrollingDirect_ScrollingDirect_MAX + 1;

const std::string& LayersPacket_Layer_ScrollingDirect_Name(LayersPacket_Layer_ScrollingDirect value);
template<typename T>
inline const std::string& LayersPacket_Layer_ScrollingDirect_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayersPacket_Layer_ScrollingDirect>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayersPacket_Layer_ScrollingDirect_Name.");
  return LayersPacket_Layer_ScrollingDirect_Name(static_cast<LayersPacket_Layer_ScrollingDirect>(enum_t_value));
}
bool LayersPacket_Layer_ScrollingDirect_Parse(
    const std::string& name, LayersPacket_Layer_ScrollingDirect* value);
enum LayersPacket_Layer_Filter : int {
  LayersPacket_Layer_Filter_FILTER_FAST = 0,
  LayersPacket_Layer_Filter_FILTER_GOOD = 1,
  LayersPacket_Layer_Filter_FILTER_BEST = 2,
  LayersPacket_Layer_Filter_FILTER_NEAREST = 3,
  LayersPacket_Layer_Filter_FILTER_BILINEAR = 4,
  LayersPacket_Layer_Filter_FILTER_GAUSSIAN = 5,
  LayersPacket_Layer_Filter_FILTER_SENTINEL = 6,
  LayersPacket_Layer_Filter_FILTER_LINEAR = 7,
  LayersPacket_Layer_Filter_FILTER_POINT = 8
};
bool LayersPacket_Layer_Filter_IsValid(int value);
constexpr LayersPacket_Layer_Filter LayersPacket_Layer_Filter_Filter_MIN = LayersPacket_Layer_Filter_FILTER_FAST;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer_Filter_Filter_MAX = LayersPacket_Layer_Filter_FILTER_POINT;
constexpr int LayersPacket_Layer_Filter_Filter_ARRAYSIZE = LayersPacket_Layer_Filter_Filter_MAX + 1;

const std::string& LayersPacket_Layer_Filter_Name(LayersPacket_Layer_Filter value);
template<typename T>
inline const std::string& LayersPacket_Layer_Filter_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LayersPacket_Layer_Filter>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LayersPacket_Layer_Filter_Name.");
  return LayersPacket_Layer_Filter_Name(static_cast<LayersPacket_Layer_Filter>(enum_t_value));
}
bool LayersPacket_Layer_Filter_Parse(
    const std::string& name, LayersPacket_Layer_Filter* value);
enum Packet_DataType : int {
  Packet_DataType_FRAMESTART = 1,
  Packet_DataType_FRAMEEND = 2,
  Packet_DataType_COLOR = 3,
  Packet_DataType_TEXTURE = 4,
  Packet_DataType_LAYERS = 5,
  Packet_DataType_META = 6,
  Packet_DataType_DRAW = 7
};
bool Packet_DataType_IsValid(int value);
constexpr Packet_DataType Packet_DataType_DataType_MIN = Packet_DataType_FRAMESTART;
constexpr Packet_DataType Packet_DataType_DataType_MAX = Packet_DataType_DRAW;
constexpr int Packet_DataType_DataType_ARRAYSIZE = Packet_DataType_DataType_MAX + 1;

const std::string& Packet_DataType_Name(Packet_DataType value);
template<typename T>
inline const std::string& Packet_DataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Packet_DataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Packet_DataType_Name.");
  return Packet_DataType_Name(static_cast<Packet_DataType>(enum_t_value));
}
bool Packet_DataType_Parse(
    const std::string& name, Packet_DataType* value);
enum CommandPacket_CmdType : int {
  CommandPacket_CmdType_NO_OP = 0,
  CommandPacket_CmdType_LAYERS_TREE = 1,
  CommandPacket_CmdType_LAYERS_BUFFER = 2
};
bool CommandPacket_CmdType_IsValid(int value);
constexpr CommandPacket_CmdType CommandPacket_CmdType_CmdType_MIN = CommandPacket_CmdType_NO_OP;
constexpr CommandPacket_CmdType CommandPacket_CmdType_CmdType_MAX = CommandPacket_CmdType_LAYERS_BUFFER;
constexpr int CommandPacket_CmdType_CmdType_ARRAYSIZE = CommandPacket_CmdType_CmdType_MAX + 1;

const std::string& CommandPacket_CmdType_Name(CommandPacket_CmdType value);
template<typename T>
inline const std::string& CommandPacket_CmdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommandPacket_CmdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommandPacket_CmdType_Name.");
  return CommandPacket_CmdType_Name(static_cast<CommandPacket_CmdType>(enum_t_value));
}
bool CommandPacket_CmdType_Parse(
    const std::string& name, CommandPacket_CmdType* value);
// ===================================================================

class FramePacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.FramePacket) */ {
 public:
  FramePacket();
  virtual ~FramePacket();

  FramePacket(const FramePacket& from);
  FramePacket(FramePacket&& from) noexcept
    : FramePacket() {
    *this = ::std::move(from);
  }

  inline FramePacket& operator=(const FramePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline FramePacket& operator=(FramePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FramePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FramePacket* internal_default_instance() {
    return reinterpret_cast<const FramePacket*>(
               &_FramePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FramePacket& a, FramePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(FramePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FramePacket* New() const final {
    return CreateMaybeMessage<FramePacket>(nullptr);
  }

  FramePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FramePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const FramePacket& from);
  void MergeFrom(const FramePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FramePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.FramePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kScaleFieldNumber = 2,
  };
  // optional uint64 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.FramePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  float scale_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class ColorPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.ColorPacket) */ {
 public:
  ColorPacket();
  virtual ~ColorPacket();

  ColorPacket(const ColorPacket& from);
  ColorPacket(ColorPacket&& from) noexcept
    : ColorPacket() {
    *this = ::std::move(from);
  }

  inline ColorPacket& operator=(const ColorPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorPacket& operator=(ColorPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ColorPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ColorPacket* internal_default_instance() {
    return reinterpret_cast<const ColorPacket*>(
               &_ColorPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColorPacket& a, ColorPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorPacket* New() const final {
    return CreateMaybeMessage<ColorPacket>(nullptr);
  }

  ColorPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const ColorPacket& from);
  void MergeFrom(const ColorPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ColorPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.ColorPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayerrefFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kColorFieldNumber = 4,
  };
  // required uint64 layerref = 1;
  bool has_layerref() const;
  private:
  bool _internal_has_layerref() const;
  public:
  void clear_layerref();
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref() const;
  void set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_layerref() const;
  void _internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 color = 4;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.ColorPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class TexturePacket_Rect :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.TexturePacket.Rect) */ {
 public:
  TexturePacket_Rect();
  virtual ~TexturePacket_Rect();

  TexturePacket_Rect(const TexturePacket_Rect& from);
  TexturePacket_Rect(TexturePacket_Rect&& from) noexcept
    : TexturePacket_Rect() {
    *this = ::std::move(from);
  }

  inline TexturePacket_Rect& operator=(const TexturePacket_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexturePacket_Rect& operator=(TexturePacket_Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TexturePacket_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TexturePacket_Rect* internal_default_instance() {
    return reinterpret_cast<const TexturePacket_Rect*>(
               &_TexturePacket_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TexturePacket_Rect& a, TexturePacket_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(TexturePacket_Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TexturePacket_Rect* New() const final {
    return CreateMaybeMessage<TexturePacket_Rect>(nullptr);
  }

  TexturePacket_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TexturePacket_Rect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TexturePacket_Rect& from);
  void MergeFrom(const TexturePacket_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturePacket_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.TexturePacket.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // optional float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // optional float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // optional float w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // optional float h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.TexturePacket.Rect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float w_;
  float h_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class TexturePacket_Size :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.TexturePacket.Size) */ {
 public:
  TexturePacket_Size();
  virtual ~TexturePacket_Size();

  TexturePacket_Size(const TexturePacket_Size& from);
  TexturePacket_Size(TexturePacket_Size&& from) noexcept
    : TexturePacket_Size() {
    *this = ::std::move(from);
  }

  inline TexturePacket_Size& operator=(const TexturePacket_Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexturePacket_Size& operator=(TexturePacket_Size&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TexturePacket_Size& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TexturePacket_Size* internal_default_instance() {
    return reinterpret_cast<const TexturePacket_Size*>(
               &_TexturePacket_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TexturePacket_Size& a, TexturePacket_Size& b) {
    a.Swap(&b);
  }
  inline void Swap(TexturePacket_Size* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TexturePacket_Size* New() const final {
    return CreateMaybeMessage<TexturePacket_Size>(nullptr);
  }

  TexturePacket_Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TexturePacket_Size>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TexturePacket_Size& from);
  void MergeFrom(const TexturePacket_Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturePacket_Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.TexturePacket.Size";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // optional int32 w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 h = 2;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.TexturePacket.Size)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class TexturePacket_Matrix :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.TexturePacket.Matrix) */ {
 public:
  TexturePacket_Matrix();
  virtual ~TexturePacket_Matrix();

  TexturePacket_Matrix(const TexturePacket_Matrix& from);
  TexturePacket_Matrix(TexturePacket_Matrix&& from) noexcept
    : TexturePacket_Matrix() {
    *this = ::std::move(from);
  }

  inline TexturePacket_Matrix& operator=(const TexturePacket_Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexturePacket_Matrix& operator=(TexturePacket_Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TexturePacket_Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TexturePacket_Matrix* internal_default_instance() {
    return reinterpret_cast<const TexturePacket_Matrix*>(
               &_TexturePacket_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TexturePacket_Matrix& a, TexturePacket_Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(TexturePacket_Matrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TexturePacket_Matrix* New() const final {
    return CreateMaybeMessage<TexturePacket_Matrix>(nullptr);
  }

  TexturePacket_Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TexturePacket_Matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TexturePacket_Matrix& from);
  void MergeFrom(const TexturePacket_Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturePacket_Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.TexturePacket.Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 3,
    kIs2DFieldNumber = 1,
    kIsIdFieldNumber = 2,
  };
  // repeated float m = 3;
  int m_size() const;
  private:
  int _internal_m_size() const;
  public:
  void clear_m();
  private:
  float _internal_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_m() const;
  void _internal_add_m(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_m();
  public:
  float m(int index) const;
  void set_m(int index, float value);
  void add_m(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_m();

  // optional bool is2D = 1;
  bool has_is2d() const;
  private:
  bool _internal_has_is2d() const;
  public:
  void clear_is2d();
  bool is2d() const;
  void set_is2d(bool value);
  private:
  bool _internal_is2d() const;
  void _internal_set_is2d(bool value);
  public:

  // optional bool isId = 2;
  bool has_isid() const;
  private:
  bool _internal_has_isid() const;
  public:
  void clear_isid();
  bool isid() const;
  void set_isid(bool value);
  private:
  bool _internal_isid() const;
  void _internal_set_isid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.TexturePacket.Matrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > m_;
  bool is2d_;
  bool isid_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class TexturePacket_EffectMask :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.TexturePacket.EffectMask) */ {
 public:
  TexturePacket_EffectMask();
  virtual ~TexturePacket_EffectMask();

  TexturePacket_EffectMask(const TexturePacket_EffectMask& from);
  TexturePacket_EffectMask(TexturePacket_EffectMask&& from) noexcept
    : TexturePacket_EffectMask() {
    *this = ::std::move(from);
  }

  inline TexturePacket_EffectMask& operator=(const TexturePacket_EffectMask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexturePacket_EffectMask& operator=(TexturePacket_EffectMask&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TexturePacket_EffectMask& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TexturePacket_EffectMask* internal_default_instance() {
    return reinterpret_cast<const TexturePacket_EffectMask*>(
               &_TexturePacket_EffectMask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TexturePacket_EffectMask& a, TexturePacket_EffectMask& b) {
    a.Swap(&b);
  }
  inline void Swap(TexturePacket_EffectMask* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TexturePacket_EffectMask* New() const final {
    return CreateMaybeMessage<TexturePacket_EffectMask>(nullptr);
  }

  TexturePacket_EffectMask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TexturePacket_EffectMask>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TexturePacket_EffectMask& from);
  void MergeFrom(const TexturePacket_EffectMask& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturePacket_EffectMask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.TexturePacket.EffectMask";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMSizeFieldNumber = 2,
    kMMaskTransformFieldNumber = 3,
    kMIs3DFieldNumber = 1,
  };
  // optional .mozilla.layers.layerscope.TexturePacket.Size mSize = 2;
  bool has_msize() const;
  private:
  bool _internal_has_msize() const;
  public:
  void clear_msize();
  const ::mozilla::layers::layerscope::TexturePacket_Size& msize() const;
  ::mozilla::layers::layerscope::TexturePacket_Size* release_msize();
  ::mozilla::layers::layerscope::TexturePacket_Size* mutable_msize();
  void set_allocated_msize(::mozilla::layers::layerscope::TexturePacket_Size* msize);
  private:
  const ::mozilla::layers::layerscope::TexturePacket_Size& _internal_msize() const;
  ::mozilla::layers::layerscope::TexturePacket_Size* _internal_mutable_msize();
  public:

  // optional .mozilla.layers.layerscope.TexturePacket.Matrix mMaskTransform = 3;
  bool has_mmasktransform() const;
  private:
  bool _internal_has_mmasktransform() const;
  public:
  void clear_mmasktransform();
  const ::mozilla::layers::layerscope::TexturePacket_Matrix& mmasktransform() const;
  ::mozilla::layers::layerscope::TexturePacket_Matrix* release_mmasktransform();
  ::mozilla::layers::layerscope::TexturePacket_Matrix* mutable_mmasktransform();
  void set_allocated_mmasktransform(::mozilla::layers::layerscope::TexturePacket_Matrix* mmasktransform);
  private:
  const ::mozilla::layers::layerscope::TexturePacket_Matrix& _internal_mmasktransform() const;
  ::mozilla::layers::layerscope::TexturePacket_Matrix* _internal_mutable_mmasktransform();
  public:

  // optional bool mIs3D = 1;
  bool has_mis3d() const;
  private:
  bool _internal_has_mis3d() const;
  public:
  void clear_mis3d();
  bool mis3d() const;
  void set_mis3d(bool value);
  private:
  bool _internal_mis3d() const;
  void _internal_set_mis3d(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.TexturePacket.EffectMask)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozilla::layers::layerscope::TexturePacket_Size* msize_;
  ::mozilla::layers::layerscope::TexturePacket_Matrix* mmasktransform_;
  bool mis3d_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class TexturePacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.TexturePacket) */ {
 public:
  TexturePacket();
  virtual ~TexturePacket();

  TexturePacket(const TexturePacket& from);
  TexturePacket(TexturePacket&& from) noexcept
    : TexturePacket() {
    *this = ::std::move(from);
  }

  inline TexturePacket& operator=(const TexturePacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline TexturePacket& operator=(TexturePacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TexturePacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TexturePacket* internal_default_instance() {
    return reinterpret_cast<const TexturePacket*>(
               &_TexturePacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TexturePacket& a, TexturePacket& b) {
    a.Swap(&b);
  }
  inline void Swap(TexturePacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TexturePacket* New() const final {
    return CreateMaybeMessage<TexturePacket>(nullptr);
  }

  TexturePacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TexturePacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const TexturePacket& from);
  void MergeFrom(const TexturePacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TexturePacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.TexturePacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef TexturePacket_Rect Rect;
  typedef TexturePacket_Size Size;
  typedef TexturePacket_Matrix Matrix;
  typedef TexturePacket_EffectMask EffectMask;

  typedef TexturePacket_Filter Filter;
  static constexpr Filter GOOD =
    TexturePacket_Filter_GOOD;
  static constexpr Filter LINEAR =
    TexturePacket_Filter_LINEAR;
  static constexpr Filter POINT =
    TexturePacket_Filter_POINT;
  static inline bool Filter_IsValid(int value) {
    return TexturePacket_Filter_IsValid(value);
  }
  static constexpr Filter Filter_MIN =
    TexturePacket_Filter_Filter_MIN;
  static constexpr Filter Filter_MAX =
    TexturePacket_Filter_Filter_MAX;
  static constexpr int Filter_ARRAYSIZE =
    TexturePacket_Filter_Filter_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Filter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Filter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Filter_Name.");
    return TexturePacket_Filter_Name(enum_t_value);
  }
  static inline bool Filter_Parse(const std::string& name,
      Filter* value) {
    return TexturePacket_Filter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 9,
    kMTextureCoordsFieldNumber = 10,
    kMaskFieldNumber = 21,
    kLayerrefFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kStrideFieldNumber = 4,
    kNameFieldNumber = 5,
    kTargetFieldNumber = 6,
    kDataformatFieldNumber = 7,
    kGlcontextFieldNumber = 8,
    kMFilterFieldNumber = 12,
    kMPremultipliedFieldNumber = 11,
    kIsMaskFieldNumber = 20,
  };
  // optional bytes data = 9;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional .mozilla.layers.layerscope.TexturePacket.Rect mTextureCoords = 10;
  bool has_mtexturecoords() const;
  private:
  bool _internal_has_mtexturecoords() const;
  public:
  void clear_mtexturecoords();
  const ::mozilla::layers::layerscope::TexturePacket_Rect& mtexturecoords() const;
  ::mozilla::layers::layerscope::TexturePacket_Rect* release_mtexturecoords();
  ::mozilla::layers::layerscope::TexturePacket_Rect* mutable_mtexturecoords();
  void set_allocated_mtexturecoords(::mozilla::layers::layerscope::TexturePacket_Rect* mtexturecoords);
  private:
  const ::mozilla::layers::layerscope::TexturePacket_Rect& _internal_mtexturecoords() const;
  ::mozilla::layers::layerscope::TexturePacket_Rect* _internal_mutable_mtexturecoords();
  public:

  // optional .mozilla.layers.layerscope.TexturePacket.EffectMask mask = 21;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const ::mozilla::layers::layerscope::TexturePacket_EffectMask& mask() const;
  ::mozilla::layers::layerscope::TexturePacket_EffectMask* release_mask();
  ::mozilla::layers::layerscope::TexturePacket_EffectMask* mutable_mask();
  void set_allocated_mask(::mozilla::layers::layerscope::TexturePacket_EffectMask* mask);
  private:
  const ::mozilla::layers::layerscope::TexturePacket_EffectMask& _internal_mask() const;
  ::mozilla::layers::layerscope::TexturePacket_EffectMask* _internal_mutable_mask();
  public:

  // required uint64 layerref = 1;
  bool has_layerref() const;
  private:
  bool _internal_has_layerref() const;
  public:
  void clear_layerref();
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref() const;
  void set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_layerref() const;
  void _internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 stride = 4;
  bool has_stride() const;
  private:
  bool _internal_has_stride() const;
  public:
  void clear_stride();
  ::PROTOBUF_NAMESPACE_ID::uint32 stride() const;
  void set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stride() const;
  void _internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  ::PROTOBUF_NAMESPACE_ID::uint32 name() const;
  void set_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_name() const;
  void _internal_set_name(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 target = 6;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::uint32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dataformat = 7;
  bool has_dataformat() const;
  private:
  bool _internal_has_dataformat() const;
  public:
  void clear_dataformat();
  ::PROTOBUF_NAMESPACE_ID::uint32 dataformat() const;
  void set_dataformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dataformat() const;
  void _internal_set_dataformat(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 glcontext = 8;
  bool has_glcontext() const;
  private:
  bool _internal_has_glcontext() const;
  public:
  void clear_glcontext();
  ::PROTOBUF_NAMESPACE_ID::uint64 glcontext() const;
  void set_glcontext(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_glcontext() const;
  void _internal_set_glcontext(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .mozilla.layers.layerscope.TexturePacket.Filter mFilter = 12;
  bool has_mfilter() const;
  private:
  bool _internal_has_mfilter() const;
  public:
  void clear_mfilter();
  ::mozilla::layers::layerscope::TexturePacket_Filter mfilter() const;
  void set_mfilter(::mozilla::layers::layerscope::TexturePacket_Filter value);
  private:
  ::mozilla::layers::layerscope::TexturePacket_Filter _internal_mfilter() const;
  void _internal_set_mfilter(::mozilla::layers::layerscope::TexturePacket_Filter value);
  public:

  // optional bool mPremultiplied = 11;
  bool has_mpremultiplied() const;
  private:
  bool _internal_has_mpremultiplied() const;
  public:
  void clear_mpremultiplied();
  bool mpremultiplied() const;
  void set_mpremultiplied(bool value);
  private:
  bool _internal_mpremultiplied() const;
  void _internal_set_mpremultiplied(bool value);
  public:

  // optional bool isMask = 20;
  bool has_ismask() const;
  private:
  bool _internal_has_ismask() const;
  public:
  void clear_ismask();
  bool ismask() const;
  void set_ismask(bool value);
  private:
  bool _internal_ismask() const;
  void _internal_set_ismask(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.TexturePacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::mozilla::layers::layerscope::TexturePacket_Rect* mtexturecoords_;
  ::mozilla::layers::layerscope::TexturePacket_EffectMask* mask_;
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stride_;
  ::PROTOBUF_NAMESPACE_ID::uint32 name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dataformat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 glcontext_;
  int mfilter_;
  bool mpremultiplied_;
  bool ismask_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer_Size :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer.Size) */ {
 public:
  LayersPacket_Layer_Size();
  virtual ~LayersPacket_Layer_Size();

  LayersPacket_Layer_Size(const LayersPacket_Layer_Size& from);
  LayersPacket_Layer_Size(LayersPacket_Layer_Size&& from) noexcept
    : LayersPacket_Layer_Size() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer_Size& operator=(const LayersPacket_Layer_Size& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer_Size& operator=(LayersPacket_Layer_Size&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer_Size& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer_Size* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer_Size*>(
               &_LayersPacket_Layer_Size_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LayersPacket_Layer_Size& a, LayersPacket_Layer_Size& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer_Size* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer_Size* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer_Size>(nullptr);
  }

  LayersPacket_Layer_Size* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer_Size>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer_Size& from);
  void MergeFrom(const LayersPacket_Layer_Size& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer_Size* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer.Size";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kHFieldNumber = 2,
  };
  // optional int32 w = 1;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 h = 2;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer.Size)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer_Rect :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer.Rect) */ {
 public:
  LayersPacket_Layer_Rect();
  virtual ~LayersPacket_Layer_Rect();

  LayersPacket_Layer_Rect(const LayersPacket_Layer_Rect& from);
  LayersPacket_Layer_Rect(LayersPacket_Layer_Rect&& from) noexcept
    : LayersPacket_Layer_Rect() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer_Rect& operator=(const LayersPacket_Layer_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer_Rect& operator=(LayersPacket_Layer_Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer_Rect* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer_Rect*>(
               &_LayersPacket_Layer_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LayersPacket_Layer_Rect& a, LayersPacket_Layer_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer_Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer_Rect* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer_Rect>(nullptr);
  }

  LayersPacket_Layer_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer_Rect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer_Rect& from);
  void MergeFrom(const LayersPacket_Layer_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  ::PROTOBUF_NAMESPACE_ID::int32 w() const;
  void set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_w() const;
  void _internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  ::PROTOBUF_NAMESPACE_ID::int32 h() const;
  void set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_h() const;
  void _internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 w_;
  ::PROTOBUF_NAMESPACE_ID::int32 h_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer_Region :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer.Region) */ {
 public:
  LayersPacket_Layer_Region();
  virtual ~LayersPacket_Layer_Region();

  LayersPacket_Layer_Region(const LayersPacket_Layer_Region& from);
  LayersPacket_Layer_Region(LayersPacket_Layer_Region&& from) noexcept
    : LayersPacket_Layer_Region() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer_Region& operator=(const LayersPacket_Layer_Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer_Region& operator=(LayersPacket_Layer_Region&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer_Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer_Region* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer_Region*>(
               &_LayersPacket_Layer_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LayersPacket_Layer_Region& a, LayersPacket_Layer_Region& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer_Region* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer_Region* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer_Region>(nullptr);
  }

  LayersPacket_Layer_Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer_Region>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer_Region& from);
  void MergeFrom(const LayersPacket_Layer_Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer_Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer.Region";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
  };
  // repeated .mozilla.layers.layerscope.LayersPacket.Layer.Rect r = 1;
  int r_size() const;
  private:
  int _internal_r_size() const;
  public:
  void clear_r();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* mutable_r(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >*
      mutable_r();
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& _internal_r(int index) const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* _internal_add_r();
  public:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& r(int index) const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* add_r();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >&
      r() const;

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer.Region)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect > r_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer_Matrix :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer.Matrix) */ {
 public:
  LayersPacket_Layer_Matrix();
  virtual ~LayersPacket_Layer_Matrix();

  LayersPacket_Layer_Matrix(const LayersPacket_Layer_Matrix& from);
  LayersPacket_Layer_Matrix(LayersPacket_Layer_Matrix&& from) noexcept
    : LayersPacket_Layer_Matrix() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer_Matrix& operator=(const LayersPacket_Layer_Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer_Matrix& operator=(LayersPacket_Layer_Matrix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer_Matrix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer_Matrix* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer_Matrix*>(
               &_LayersPacket_Layer_Matrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LayersPacket_Layer_Matrix& a, LayersPacket_Layer_Matrix& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer_Matrix* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer_Matrix* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer_Matrix>(nullptr);
  }

  LayersPacket_Layer_Matrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer_Matrix>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer_Matrix& from);
  void MergeFrom(const LayersPacket_Layer_Matrix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer_Matrix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer.Matrix";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMFieldNumber = 3,
    kIs2DFieldNumber = 1,
    kIsIdFieldNumber = 2,
  };
  // repeated float m = 3;
  int m_size() const;
  private:
  int _internal_m_size() const;
  public:
  void clear_m();
  private:
  float _internal_m(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_m() const;
  void _internal_add_m(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_m();
  public:
  float m(int index) const;
  void set_m(int index, float value);
  void add_m(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      m() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_m();

  // optional bool is2D = 1;
  bool has_is2d() const;
  private:
  bool _internal_has_is2d() const;
  public:
  void clear_is2d();
  bool is2d() const;
  void set_is2d(bool value);
  private:
  bool _internal_is2d() const;
  void _internal_set_is2d(bool value);
  public:

  // optional bool isId = 2;
  bool has_isid() const;
  private:
  bool _internal_has_isid() const;
  public:
  void clear_isid();
  bool isid() const;
  void set_isid(bool value);
  private:
  bool _internal_isid() const;
  void _internal_set_isid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > m_;
  bool is2d_;
  bool isid_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer_Shadow :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer.Shadow) */ {
 public:
  LayersPacket_Layer_Shadow();
  virtual ~LayersPacket_Layer_Shadow();

  LayersPacket_Layer_Shadow(const LayersPacket_Layer_Shadow& from);
  LayersPacket_Layer_Shadow(LayersPacket_Layer_Shadow&& from) noexcept
    : LayersPacket_Layer_Shadow() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer_Shadow& operator=(const LayersPacket_Layer_Shadow& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer_Shadow& operator=(LayersPacket_Layer_Shadow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer_Shadow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer_Shadow* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer_Shadow*>(
               &_LayersPacket_Layer_Shadow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(LayersPacket_Layer_Shadow& a, LayersPacket_Layer_Shadow& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer_Shadow* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer_Shadow* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer_Shadow>(nullptr);
  }

  LayersPacket_Layer_Shadow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer_Shadow>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer_Shadow& from);
  void MergeFrom(const LayersPacket_Layer_Shadow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer_Shadow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer.Shadow";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClipFieldNumber = 1,
    kTransformFieldNumber = 2,
    kVRegionFieldNumber = 3,
  };
  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 1;
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& clip() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* release_clip();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* mutable_clip();
  void set_allocated_clip(::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& _internal_clip() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* _internal_mutable_clip();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 2;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& transform() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* release_transform();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* mutable_transform();
  void set_allocated_transform(::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& _internal_transform() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* _internal_mutable_transform();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 3;
  bool has_vregion() const;
  private:
  bool _internal_has_vregion() const;
  public:
  void clear_vregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_vregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_vregion();
  void set_allocated_vregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_vregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_vregion();
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket_Layer :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket.Layer) */ {
 public:
  LayersPacket_Layer();
  virtual ~LayersPacket_Layer();

  LayersPacket_Layer(const LayersPacket_Layer& from);
  LayersPacket_Layer(LayersPacket_Layer&& from) noexcept
    : LayersPacket_Layer() {
    *this = ::std::move(from);
  }

  inline LayersPacket_Layer& operator=(const LayersPacket_Layer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket_Layer& operator=(LayersPacket_Layer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket_Layer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket_Layer* internal_default_instance() {
    return reinterpret_cast<const LayersPacket_Layer*>(
               &_LayersPacket_Layer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(LayersPacket_Layer& a, LayersPacket_Layer& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket_Layer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket_Layer* New() const final {
    return CreateMaybeMessage<LayersPacket_Layer>(nullptr);
  }

  LayersPacket_Layer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket_Layer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket_Layer& from);
  void MergeFrom(const LayersPacket_Layer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket_Layer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket.Layer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayersPacket_Layer_Size Size;
  typedef LayersPacket_Layer_Rect Rect;
  typedef LayersPacket_Layer_Region Region;
  typedef LayersPacket_Layer_Matrix Matrix;
  typedef LayersPacket_Layer_Shadow Shadow;

  typedef LayersPacket_Layer_LayerType LayerType;
  static constexpr LayerType UnknownLayer =
    LayersPacket_Layer_LayerType_UnknownLayer;
  static constexpr LayerType LayerManager =
    LayersPacket_Layer_LayerType_LayerManager;
  static constexpr LayerType ContainerLayer =
    LayersPacket_Layer_LayerType_ContainerLayer;
  static constexpr LayerType PaintedLayer =
    LayersPacket_Layer_LayerType_PaintedLayer;
  static constexpr LayerType CanvasLayer =
    LayersPacket_Layer_LayerType_CanvasLayer;
  static constexpr LayerType ImageLayer =
    LayersPacket_Layer_LayerType_ImageLayer;
  static constexpr LayerType ColorLayer =
    LayersPacket_Layer_LayerType_ColorLayer;
  static constexpr LayerType RefLayer =
    LayersPacket_Layer_LayerType_RefLayer;
  static constexpr LayerType ReadbackLayer =
    LayersPacket_Layer_LayerType_ReadbackLayer;
  static constexpr LayerType DisplayItemLayer =
    LayersPacket_Layer_LayerType_DisplayItemLayer;
  static inline bool LayerType_IsValid(int value) {
    return LayersPacket_Layer_LayerType_IsValid(value);
  }
  static constexpr LayerType LayerType_MIN =
    LayersPacket_Layer_LayerType_LayerType_MIN;
  static constexpr LayerType LayerType_MAX =
    LayersPacket_Layer_LayerType_LayerType_MAX;
  static constexpr int LayerType_ARRAYSIZE =
    LayersPacket_Layer_LayerType_LayerType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& LayerType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayerType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayerType_Name.");
    return LayersPacket_Layer_LayerType_Name(enum_t_value);
  }
  static inline bool LayerType_Parse(const std::string& name,
      LayerType* value) {
    return LayersPacket_Layer_LayerType_Parse(name, value);
  }

  typedef LayersPacket_Layer_ScrollingDirect ScrollingDirect;
  static constexpr ScrollingDirect VERTICAL =
    LayersPacket_Layer_ScrollingDirect_VERTICAL;
  static constexpr ScrollingDirect HORIZONTAL =
    LayersPacket_Layer_ScrollingDirect_HORIZONTAL;
  static inline bool ScrollingDirect_IsValid(int value) {
    return LayersPacket_Layer_ScrollingDirect_IsValid(value);
  }
  static constexpr ScrollingDirect ScrollingDirect_MIN =
    LayersPacket_Layer_ScrollingDirect_ScrollingDirect_MIN;
  static constexpr ScrollingDirect ScrollingDirect_MAX =
    LayersPacket_Layer_ScrollingDirect_ScrollingDirect_MAX;
  static constexpr int ScrollingDirect_ARRAYSIZE =
    LayersPacket_Layer_ScrollingDirect_ScrollingDirect_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ScrollingDirect_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ScrollingDirect>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ScrollingDirect_Name.");
    return LayersPacket_Layer_ScrollingDirect_Name(enum_t_value);
  }
  static inline bool ScrollingDirect_Parse(const std::string& name,
      ScrollingDirect* value) {
    return LayersPacket_Layer_ScrollingDirect_Parse(name, value);
  }

  typedef LayersPacket_Layer_Filter Filter;
  static constexpr Filter FILTER_FAST =
    LayersPacket_Layer_Filter_FILTER_FAST;
  static constexpr Filter FILTER_GOOD =
    LayersPacket_Layer_Filter_FILTER_GOOD;
  static constexpr Filter FILTER_BEST =
    LayersPacket_Layer_Filter_FILTER_BEST;
  static constexpr Filter FILTER_NEAREST =
    LayersPacket_Layer_Filter_FILTER_NEAREST;
  static constexpr Filter FILTER_BILINEAR =
    LayersPacket_Layer_Filter_FILTER_BILINEAR;
  static constexpr Filter FILTER_GAUSSIAN =
    LayersPacket_Layer_Filter_FILTER_GAUSSIAN;
  static constexpr Filter FILTER_SENTINEL =
    LayersPacket_Layer_Filter_FILTER_SENTINEL;
  static constexpr Filter FILTER_LINEAR =
    LayersPacket_Layer_Filter_FILTER_LINEAR;
  static constexpr Filter FILTER_POINT =
    LayersPacket_Layer_Filter_FILTER_POINT;
  static inline bool Filter_IsValid(int value) {
    return LayersPacket_Layer_Filter_IsValid(value);
  }
  static constexpr Filter Filter_MIN =
    LayersPacket_Layer_Filter_Filter_MIN;
  static constexpr Filter Filter_MAX =
    LayersPacket_Layer_Filter_Filter_MAX;
  static constexpr int Filter_ARRAYSIZE =
    LayersPacket_Layer_Filter_Filter_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Filter_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Filter>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Filter_Name.");
    return LayersPacket_Layer_Filter_Name(enum_t_value);
  }
  static inline bool Filter_Parse(const std::string& name,
      Filter* value) {
    return LayersPacket_Layer_Filter_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayListLogFieldNumber = 106,
    kClipFieldNumber = 10,
    kTransformFieldNumber = 11,
    kVRegionFieldNumber = 12,
    kShadowFieldNumber = 13,
    kHitRegionFieldNumber = 20,
    kDispatchRegionFieldNumber = 21,
    kNoActionRegionFieldNumber = 22,
    kHPanRegionFieldNumber = 23,
    kVPanRegionFieldNumber = 24,
    kValidFieldNumber = 100,
    kSizeFieldNumber = 104,
    kPtrFieldNumber = 2,
    kParentPtrFieldNumber = 3,
    kTypeFieldNumber = 1,
    kOpacityFieldNumber = 14,
    kBarIDFieldNumber = 18,
    kMaskFieldNumber = 19,
    kCOpaqueFieldNumber = 15,
    kCAlphaFieldNumber = 16,
    kColorFieldNumber = 101,
    kRefIDFieldNumber = 103,
    kFilterFieldNumber = 102,
    kDisplayListLogLengthFieldNumber = 105,
    kDirectFieldNumber = 17,
  };
  // optional bytes displayListLog = 106;
  bool has_displaylistlog() const;
  private:
  bool _internal_has_displaylistlog() const;
  public:
  void clear_displaylistlog();
  const std::string& displaylistlog() const;
  void set_displaylistlog(const std::string& value);
  void set_displaylistlog(std::string&& value);
  void set_displaylistlog(const char* value);
  void set_displaylistlog(const void* value, size_t size);
  std::string* mutable_displaylistlog();
  std::string* release_displaylistlog();
  void set_allocated_displaylistlog(std::string* displaylistlog);
  private:
  const std::string& _internal_displaylistlog() const;
  void _internal_set_displaylistlog(const std::string& value);
  std::string* _internal_mutable_displaylistlog();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 10;
  bool has_clip() const;
  private:
  bool _internal_has_clip() const;
  public:
  void clear_clip();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& clip() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* release_clip();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* mutable_clip();
  void set_allocated_clip(::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& _internal_clip() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* _internal_mutable_clip();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 11;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& transform() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* release_transform();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* mutable_transform();
  void set_allocated_transform(::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& _internal_transform() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* _internal_mutable_transform();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 12;
  bool has_vregion() const;
  private:
  bool _internal_has_vregion() const;
  public:
  void clear_vregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_vregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_vregion();
  void set_allocated_vregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_vregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_vregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Shadow shadow = 13;
  bool has_shadow() const;
  private:
  bool _internal_has_shadow() const;
  public:
  void clear_shadow();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow& shadow() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* release_shadow();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* mutable_shadow();
  void set_allocated_shadow(::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* shadow);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow& _internal_shadow() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* _internal_mutable_shadow();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hitRegion = 20;
  bool has_hitregion() const;
  private:
  bool _internal_has_hitregion() const;
  public:
  void clear_hitregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& hitregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_hitregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_hitregion();
  void set_allocated_hitregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* hitregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_hitregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_hitregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region dispatchRegion = 21;
  bool has_dispatchregion() const;
  private:
  bool _internal_has_dispatchregion() const;
  public:
  void clear_dispatchregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& dispatchregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_dispatchregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_dispatchregion();
  void set_allocated_dispatchregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* dispatchregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_dispatchregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_dispatchregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region noActionRegion = 22;
  bool has_noactionregion() const;
  private:
  bool _internal_has_noactionregion() const;
  public:
  void clear_noactionregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& noactionregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_noactionregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_noactionregion();
  void set_allocated_noactionregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* noactionregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_noactionregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_noactionregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hPanRegion = 23;
  bool has_hpanregion() const;
  private:
  bool _internal_has_hpanregion() const;
  public:
  void clear_hpanregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& hpanregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_hpanregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_hpanregion();
  void set_allocated_hpanregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* hpanregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_hpanregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_hpanregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vPanRegion = 24;
  bool has_vpanregion() const;
  private:
  bool _internal_has_vpanregion() const;
  public:
  void clear_vpanregion();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vpanregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_vpanregion();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_vpanregion();
  void set_allocated_vpanregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vpanregion);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_vpanregion() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_vpanregion();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region valid = 100;
  bool has_valid() const;
  private:
  bool _internal_has_valid() const;
  public:
  void clear_valid();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& valid() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* release_valid();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* mutable_valid();
  void set_allocated_valid(::mozilla::layers::layerscope::LayersPacket_Layer_Region* valid);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& _internal_valid() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* _internal_mutable_valid();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Size size = 104;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Size& size() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size* release_size();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size* mutable_size();
  void set_allocated_size(::mozilla::layers::layerscope::LayersPacket_Layer_Size* size);
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Size& _internal_size() const;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size* _internal_mutable_size();
  public:

  // required uint64 ptr = 2;
  bool has_ptr() const;
  private:
  bool _internal_has_ptr() const;
  public:
  void clear_ptr();
  ::PROTOBUF_NAMESPACE_ID::uint64 ptr() const;
  void set_ptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ptr() const;
  void _internal_set_ptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 parentPtr = 3;
  bool has_parentptr() const;
  private:
  bool _internal_has_parentptr() const;
  public:
  void clear_parentptr();
  ::PROTOBUF_NAMESPACE_ID::uint64 parentptr() const;
  void set_parentptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_parentptr() const;
  void _internal_set_parentptr(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType type() const;
  void set_type(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType value);
  private:
  ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType _internal_type() const;
  void _internal_set_type(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType value);
  public:

  // optional float opacity = 14;
  bool has_opacity() const;
  private:
  bool _internal_has_opacity() const;
  public:
  void clear_opacity();
  float opacity() const;
  void set_opacity(float value);
  private:
  float _internal_opacity() const;
  void _internal_set_opacity(float value);
  public:

  // optional uint64 barID = 18;
  bool has_barid() const;
  private:
  bool _internal_has_barid() const;
  public:
  void clear_barid();
  ::PROTOBUF_NAMESPACE_ID::uint64 barid() const;
  void set_barid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_barid() const;
  void _internal_set_barid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 mask = 19;
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  ::PROTOBUF_NAMESPACE_ID::uint64 mask() const;
  void set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_mask() const;
  void _internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional bool cOpaque = 15;
  bool has_copaque() const;
  private:
  bool _internal_has_copaque() const;
  public:
  void clear_copaque();
  bool copaque() const;
  void set_copaque(bool value);
  private:
  bool _internal_copaque() const;
  void _internal_set_copaque(bool value);
  public:

  // optional bool cAlpha = 16;
  bool has_calpha() const;
  private:
  bool _internal_has_calpha() const;
  public:
  void clear_calpha();
  bool calpha() const;
  void set_calpha(bool value);
  private:
  bool _internal_calpha() const;
  void _internal_set_calpha(bool value);
  public:

  // optional uint32 color = 101;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::uint32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 refID = 103;
  bool has_refid() const;
  private:
  bool _internal_has_refid() const;
  public:
  void clear_refid();
  ::PROTOBUF_NAMESPACE_ID::uint64 refid() const;
  void set_refid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_refid() const;
  void _internal_set_refid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Filter filter = 102;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  ::mozilla::layers::layerscope::LayersPacket_Layer_Filter filter() const;
  void set_filter(::mozilla::layers::layerscope::LayersPacket_Layer_Filter value);
  private:
  ::mozilla::layers::layerscope::LayersPacket_Layer_Filter _internal_filter() const;
  void _internal_set_filter(::mozilla::layers::layerscope::LayersPacket_Layer_Filter value);
  public:

  // optional uint32 displayListLogLength = 105;
  bool has_displaylistloglength() const;
  private:
  bool _internal_has_displaylistloglength() const;
  public:
  void clear_displaylistloglength();
  ::PROTOBUF_NAMESPACE_ID::uint32 displaylistloglength() const;
  void set_displaylistloglength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_displaylistloglength() const;
  void _internal_set_displaylistloglength(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.ScrollingDirect direct = 17;
  bool has_direct() const;
  private:
  bool _internal_has_direct() const;
  public:
  void clear_direct();
  ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect direct() const;
  void set_direct(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect value);
  private:
  ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect _internal_direct() const;
  void _internal_set_direct(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket.Layer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr displaylistlog_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* shadow_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* hitregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* dispatchregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* noactionregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* hpanregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* vpanregion_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* valid_;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size* size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ptr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 parentptr_;
  int type_;
  float opacity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 barid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 mask_;
  bool copaque_;
  bool calpha_;
  ::PROTOBUF_NAMESPACE_ID::uint32 color_;
  ::PROTOBUF_NAMESPACE_ID::uint64 refid_;
  int filter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 displaylistloglength_;
  int direct_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class LayersPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.LayersPacket) */ {
 public:
  LayersPacket();
  virtual ~LayersPacket();

  LayersPacket(const LayersPacket& from);
  LayersPacket(LayersPacket&& from) noexcept
    : LayersPacket() {
    *this = ::std::move(from);
  }

  inline LayersPacket& operator=(const LayersPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline LayersPacket& operator=(LayersPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LayersPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LayersPacket* internal_default_instance() {
    return reinterpret_cast<const LayersPacket*>(
               &_LayersPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LayersPacket& a, LayersPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(LayersPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LayersPacket* New() const final {
    return CreateMaybeMessage<LayersPacket>(nullptr);
  }

  LayersPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LayersPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const LayersPacket& from);
  void MergeFrom(const LayersPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LayersPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.LayersPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef LayersPacket_Layer Layer;

  // accessors -------------------------------------------------------

  enum : int {
    kLayerFieldNumber = 1,
  };
  // repeated .mozilla.layers.layerscope.LayersPacket.Layer layer = 1;
  int layer_size() const;
  private:
  int _internal_layer_size() const;
  public:
  void clear_layer();
  ::mozilla::layers::layerscope::LayersPacket_Layer* mutable_layer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer >*
      mutable_layer();
  private:
  const ::mozilla::layers::layerscope::LayersPacket_Layer& _internal_layer(int index) const;
  ::mozilla::layers::layerscope::LayersPacket_Layer* _internal_add_layer();
  public:
  const ::mozilla::layers::layerscope::LayersPacket_Layer& layer(int index) const;
  ::mozilla::layers::layerscope::LayersPacket_Layer* add_layer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer >&
      layer() const;

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.LayersPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer > layer_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class MetaPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.MetaPacket) */ {
 public:
  MetaPacket();
  virtual ~MetaPacket();

  MetaPacket(const MetaPacket& from);
  MetaPacket(MetaPacket&& from) noexcept
    : MetaPacket() {
    *this = ::std::move(from);
  }

  inline MetaPacket& operator=(const MetaPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaPacket& operator=(MetaPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MetaPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaPacket* internal_default_instance() {
    return reinterpret_cast<const MetaPacket*>(
               &_MetaPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MetaPacket& a, MetaPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaPacket* New() const final {
    return CreateMaybeMessage<MetaPacket>(nullptr);
  }

  MetaPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const MetaPacket& from);
  void MergeFrom(const MetaPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetaPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.MetaPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kComposedByHwcFieldNumber = 1,
  };
  // optional bool composedByHwc = 1;
  bool has_composedbyhwc() const;
  private:
  bool _internal_has_composedbyhwc() const;
  public:
  void clear_composedbyhwc();
  bool composedbyhwc() const;
  void set_composedbyhwc(bool value);
  private:
  bool _internal_composedbyhwc() const;
  void _internal_set_composedbyhwc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.MetaPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool composedbyhwc_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class DrawPacket_Rect :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.DrawPacket.Rect) */ {
 public:
  DrawPacket_Rect();
  virtual ~DrawPacket_Rect();

  DrawPacket_Rect(const DrawPacket_Rect& from);
  DrawPacket_Rect(DrawPacket_Rect&& from) noexcept
    : DrawPacket_Rect() {
    *this = ::std::move(from);
  }

  inline DrawPacket_Rect& operator=(const DrawPacket_Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawPacket_Rect& operator=(DrawPacket_Rect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DrawPacket_Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawPacket_Rect* internal_default_instance() {
    return reinterpret_cast<const DrawPacket_Rect*>(
               &_DrawPacket_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DrawPacket_Rect& a, DrawPacket_Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawPacket_Rect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawPacket_Rect* New() const final {
    return CreateMaybeMessage<DrawPacket_Rect>(nullptr);
  }

  DrawPacket_Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawPacket_Rect>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrawPacket_Rect& from);
  void MergeFrom(const DrawPacket_Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrawPacket_Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.DrawPacket.Rect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
    kHFieldNumber = 4,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // required float w = 3;
  bool has_w() const;
  private:
  bool _internal_has_w() const;
  public:
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // required float h = 4;
  bool has_h() const;
  private:
  bool _internal_has_h() const;
  public:
  void clear_h();
  float h() const;
  void set_h(float value);
  private:
  float _internal_h() const;
  void _internal_set_h(float value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.DrawPacket.Rect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float w_;
  float h_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class DrawPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.DrawPacket) */ {
 public:
  DrawPacket();
  virtual ~DrawPacket();

  DrawPacket(const DrawPacket& from);
  DrawPacket(DrawPacket&& from) noexcept
    : DrawPacket() {
    *this = ::std::move(from);
  }

  inline DrawPacket& operator=(const DrawPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawPacket& operator=(DrawPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DrawPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DrawPacket* internal_default_instance() {
    return reinterpret_cast<const DrawPacket*>(
               &_DrawPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DrawPacket& a, DrawPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawPacket* New() const final {
    return CreateMaybeMessage<DrawPacket>(nullptr);
  }

  DrawPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const DrawPacket& from);
  void MergeFrom(const DrawPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrawPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.DrawPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DrawPacket_Rect Rect;

  // accessors -------------------------------------------------------

  enum : int {
    kMvMatrixFieldNumber = 3,
    kLayerRectFieldNumber = 5,
    kTexIDsFieldNumber = 7,
    kTextureRectFieldNumber = 8,
    kOffsetXFieldNumber = 1,
    kOffsetYFieldNumber = 2,
    kLayerrefFieldNumber = 6,
    kTotalRectsFieldNumber = 4,
  };
  // repeated float mvMatrix = 3;
  int mvmatrix_size() const;
  private:
  int _internal_mvmatrix_size() const;
  public:
  void clear_mvmatrix();
  private:
  float _internal_mvmatrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_mvmatrix() const;
  void _internal_add_mvmatrix(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_mvmatrix();
  public:
  float mvmatrix(int index) const;
  void set_mvmatrix(int index, float value);
  void add_mvmatrix(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      mvmatrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_mvmatrix();

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect layerRect = 5;
  int layerrect_size() const;
  private:
  int _internal_layerrect_size() const;
  public:
  void clear_layerrect();
  ::mozilla::layers::layerscope::DrawPacket_Rect* mutable_layerrect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >*
      mutable_layerrect();
  private:
  const ::mozilla::layers::layerscope::DrawPacket_Rect& _internal_layerrect(int index) const;
  ::mozilla::layers::layerscope::DrawPacket_Rect* _internal_add_layerrect();
  public:
  const ::mozilla::layers::layerscope::DrawPacket_Rect& layerrect(int index) const;
  ::mozilla::layers::layerscope::DrawPacket_Rect* add_layerrect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >&
      layerrect() const;

  // repeated uint32 texIDs = 7;
  int texids_size() const;
  private:
  int _internal_texids_size() const;
  public:
  void clear_texids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_texids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_texids() const;
  void _internal_add_texids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_texids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 texids(int index) const;
  void set_texids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_texids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      texids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_texids();

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect textureRect = 8;
  int texturerect_size() const;
  private:
  int _internal_texturerect_size() const;
  public:
  void clear_texturerect();
  ::mozilla::layers::layerscope::DrawPacket_Rect* mutable_texturerect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >*
      mutable_texturerect();
  private:
  const ::mozilla::layers::layerscope::DrawPacket_Rect& _internal_texturerect(int index) const;
  ::mozilla::layers::layerscope::DrawPacket_Rect* _internal_add_texturerect();
  public:
  const ::mozilla::layers::layerscope::DrawPacket_Rect& texturerect(int index) const;
  ::mozilla::layers::layerscope::DrawPacket_Rect* add_texturerect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >&
      texturerect() const;

  // required float offsetX = 1;
  bool has_offsetx() const;
  private:
  bool _internal_has_offsetx() const;
  public:
  void clear_offsetx();
  float offsetx() const;
  void set_offsetx(float value);
  private:
  float _internal_offsetx() const;
  void _internal_set_offsetx(float value);
  public:

  // required float offsetY = 2;
  bool has_offsety() const;
  private:
  bool _internal_has_offsety() const;
  public:
  void clear_offsety();
  float offsety() const;
  void set_offsety(float value);
  private:
  float _internal_offsety() const;
  void _internal_set_offsety(float value);
  public:

  // required uint64 layerref = 6;
  bool has_layerref() const;
  private:
  bool _internal_has_layerref() const;
  public:
  void clear_layerref();
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref() const;
  void set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_layerref() const;
  void _internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 totalRects = 4;
  bool has_totalrects() const;
  private:
  bool _internal_has_totalrects() const;
  public:
  void clear_totalrects();
  ::PROTOBUF_NAMESPACE_ID::uint32 totalrects() const;
  void set_totalrects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_totalrects() const;
  void _internal_set_totalrects(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.DrawPacket)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > mvmatrix_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect > layerrect_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > texids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect > texturerect_;
  float offsetx_;
  float offsety_;
  ::PROTOBUF_NAMESPACE_ID::uint64 layerref_;
  ::PROTOBUF_NAMESPACE_ID::uint32 totalrects_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class Packet :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.Packet) */ {
 public:
  Packet();
  virtual ~Packet();

  Packet(const Packet& from);
  Packet(Packet&& from) noexcept
    : Packet() {
    *this = ::std::move(from);
  }

  inline Packet& operator=(const Packet& from) {
    CopyFrom(from);
    return *this;
  }
  inline Packet& operator=(Packet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Packet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Packet* internal_default_instance() {
    return reinterpret_cast<const Packet*>(
               &_Packet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Packet& a, Packet& b) {
    a.Swap(&b);
  }
  inline void Swap(Packet* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Packet* New() const final {
    return CreateMaybeMessage<Packet>(nullptr);
  }

  Packet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Packet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const Packet& from);
  void MergeFrom(const Packet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Packet* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.Packet";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Packet_DataType DataType;
  static constexpr DataType FRAMESTART =
    Packet_DataType_FRAMESTART;
  static constexpr DataType FRAMEEND =
    Packet_DataType_FRAMEEND;
  static constexpr DataType COLOR =
    Packet_DataType_COLOR;
  static constexpr DataType TEXTURE =
    Packet_DataType_TEXTURE;
  static constexpr DataType LAYERS =
    Packet_DataType_LAYERS;
  static constexpr DataType META =
    Packet_DataType_META;
  static constexpr DataType DRAW =
    Packet_DataType_DRAW;
  static inline bool DataType_IsValid(int value) {
    return Packet_DataType_IsValid(value);
  }
  static constexpr DataType DataType_MIN =
    Packet_DataType_DataType_MIN;
  static constexpr DataType DataType_MAX =
    Packet_DataType_DataType_MAX;
  static constexpr int DataType_ARRAYSIZE =
    Packet_DataType_DataType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DataType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataType_Name.");
    return Packet_DataType_Name(enum_t_value);
  }
  static inline bool DataType_Parse(const std::string& name,
      DataType* value) {
    return Packet_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFieldNumber = 2,
    kColorFieldNumber = 3,
    kTextureFieldNumber = 4,
    kLayersFieldNumber = 5,
    kMetaFieldNumber = 6,
    kDrawFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // optional .mozilla.layers.layerscope.FramePacket frame = 2;
  bool has_frame() const;
  private:
  bool _internal_has_frame() const;
  public:
  void clear_frame();
  const ::mozilla::layers::layerscope::FramePacket& frame() const;
  ::mozilla::layers::layerscope::FramePacket* release_frame();
  ::mozilla::layers::layerscope::FramePacket* mutable_frame();
  void set_allocated_frame(::mozilla::layers::layerscope::FramePacket* frame);
  private:
  const ::mozilla::layers::layerscope::FramePacket& _internal_frame() const;
  ::mozilla::layers::layerscope::FramePacket* _internal_mutable_frame();
  public:

  // optional .mozilla.layers.layerscope.ColorPacket color = 3;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::mozilla::layers::layerscope::ColorPacket& color() const;
  ::mozilla::layers::layerscope::ColorPacket* release_color();
  ::mozilla::layers::layerscope::ColorPacket* mutable_color();
  void set_allocated_color(::mozilla::layers::layerscope::ColorPacket* color);
  private:
  const ::mozilla::layers::layerscope::ColorPacket& _internal_color() const;
  ::mozilla::layers::layerscope::ColorPacket* _internal_mutable_color();
  public:

  // optional .mozilla.layers.layerscope.TexturePacket texture = 4;
  bool has_texture() const;
  private:
  bool _internal_has_texture() const;
  public:
  void clear_texture();
  const ::mozilla::layers::layerscope::TexturePacket& texture() const;
  ::mozilla::layers::layerscope::TexturePacket* release_texture();
  ::mozilla::layers::layerscope::TexturePacket* mutable_texture();
  void set_allocated_texture(::mozilla::layers::layerscope::TexturePacket* texture);
  private:
  const ::mozilla::layers::layerscope::TexturePacket& _internal_texture() const;
  ::mozilla::layers::layerscope::TexturePacket* _internal_mutable_texture();
  public:

  // optional .mozilla.layers.layerscope.LayersPacket layers = 5;
  bool has_layers() const;
  private:
  bool _internal_has_layers() const;
  public:
  void clear_layers();
  const ::mozilla::layers::layerscope::LayersPacket& layers() const;
  ::mozilla::layers::layerscope::LayersPacket* release_layers();
  ::mozilla::layers::layerscope::LayersPacket* mutable_layers();
  void set_allocated_layers(::mozilla::layers::layerscope::LayersPacket* layers);
  private:
  const ::mozilla::layers::layerscope::LayersPacket& _internal_layers() const;
  ::mozilla::layers::layerscope::LayersPacket* _internal_mutable_layers();
  public:

  // optional .mozilla.layers.layerscope.MetaPacket meta = 6;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::mozilla::layers::layerscope::MetaPacket& meta() const;
  ::mozilla::layers::layerscope::MetaPacket* release_meta();
  ::mozilla::layers::layerscope::MetaPacket* mutable_meta();
  void set_allocated_meta(::mozilla::layers::layerscope::MetaPacket* meta);
  private:
  const ::mozilla::layers::layerscope::MetaPacket& _internal_meta() const;
  ::mozilla::layers::layerscope::MetaPacket* _internal_mutable_meta();
  public:

  // optional .mozilla.layers.layerscope.DrawPacket draw = 7;
  bool has_draw() const;
  private:
  bool _internal_has_draw() const;
  public:
  void clear_draw();
  const ::mozilla::layers::layerscope::DrawPacket& draw() const;
  ::mozilla::layers::layerscope::DrawPacket* release_draw();
  ::mozilla::layers::layerscope::DrawPacket* mutable_draw();
  void set_allocated_draw(::mozilla::layers::layerscope::DrawPacket* draw);
  private:
  const ::mozilla::layers::layerscope::DrawPacket& _internal_draw() const;
  ::mozilla::layers::layerscope::DrawPacket* _internal_mutable_draw();
  public:

  // required .mozilla.layers.layerscope.Packet.DataType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mozilla::layers::layerscope::Packet_DataType type() const;
  void set_type(::mozilla::layers::layerscope::Packet_DataType value);
  private:
  ::mozilla::layers::layerscope::Packet_DataType _internal_type() const;
  void _internal_set_type(::mozilla::layers::layerscope::Packet_DataType value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.Packet)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::mozilla::layers::layerscope::FramePacket* frame_;
  ::mozilla::layers::layerscope::ColorPacket* color_;
  ::mozilla::layers::layerscope::TexturePacket* texture_;
  ::mozilla::layers::layerscope::LayersPacket* layers_;
  ::mozilla::layers::layerscope::MetaPacket* meta_;
  ::mozilla::layers::layerscope::DrawPacket* draw_;
  int type_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// -------------------------------------------------------------------

class CommandPacket :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:mozilla.layers.layerscope.CommandPacket) */ {
 public:
  CommandPacket();
  virtual ~CommandPacket();

  CommandPacket(const CommandPacket& from);
  CommandPacket(CommandPacket&& from) noexcept
    : CommandPacket() {
    *this = ::std::move(from);
  }

  inline CommandPacket& operator=(const CommandPacket& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandPacket& operator=(CommandPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CommandPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CommandPacket* internal_default_instance() {
    return reinterpret_cast<const CommandPacket*>(
               &_CommandPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CommandPacket& a, CommandPacket& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandPacket* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandPacket* New() const final {
    return CreateMaybeMessage<CommandPacket>(nullptr);
  }

  CommandPacket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandPacket>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)
    final;
  void CopyFrom(const CommandPacket& from);
  void MergeFrom(const CommandPacket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommandPacket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mozilla.layers.layerscope.CommandPacket";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CommandPacket_CmdType CmdType;
  static constexpr CmdType NO_OP =
    CommandPacket_CmdType_NO_OP;
  static constexpr CmdType LAYERS_TREE =
    CommandPacket_CmdType_LAYERS_TREE;
  static constexpr CmdType LAYERS_BUFFER =
    CommandPacket_CmdType_LAYERS_BUFFER;
  static inline bool CmdType_IsValid(int value) {
    return CommandPacket_CmdType_IsValid(value);
  }
  static constexpr CmdType CmdType_MIN =
    CommandPacket_CmdType_CmdType_MIN;
  static constexpr CmdType CmdType_MAX =
    CommandPacket_CmdType_CmdType_MAX;
  static constexpr int CmdType_ARRAYSIZE =
    CommandPacket_CmdType_CmdType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& CmdType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CmdType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CmdType_Name.");
    return CommandPacket_CmdType_Name(enum_t_value);
  }
  static inline bool CmdType_Parse(const std::string& name,
      CmdType* value) {
    return CommandPacket_CmdType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .mozilla.layers.layerscope.CommandPacket.CmdType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::mozilla::layers::layerscope::CommandPacket_CmdType type() const;
  void set_type(::mozilla::layers::layerscope::CommandPacket_CmdType value);
  private:
  ::mozilla::layers::layerscope::CommandPacket_CmdType _internal_type() const;
  void _internal_set_type(::mozilla::layers::layerscope::CommandPacket_CmdType value);
  public:

  // optional bool value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  bool value() const;
  void set_value(bool value);
  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);
  public:

  // @@protoc_insertion_point(class_scope:mozilla.layers.layerscope.CommandPacket)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  bool value_;
  friend struct ::TableStruct_LayerScopePacket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FramePacket

// optional uint64 value = 1;
inline bool FramePacket::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FramePacket::has_value() const {
  return _internal_has_value();
}
inline void FramePacket::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FramePacket::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 FramePacket::value() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.FramePacket.value)
  return _internal_value();
}
inline void FramePacket::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void FramePacket::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.FramePacket.value)
}

// optional float scale = 2;
inline bool FramePacket::_internal_has_scale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FramePacket::has_scale() const {
  return _internal_has_scale();
}
inline void FramePacket::clear_scale() {
  scale_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float FramePacket::_internal_scale() const {
  return scale_;
}
inline float FramePacket::scale() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.FramePacket.scale)
  return _internal_scale();
}
inline void FramePacket::_internal_set_scale(float value) {
  _has_bits_[0] |= 0x00000002u;
  scale_ = value;
}
inline void FramePacket::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.FramePacket.scale)
}

// -------------------------------------------------------------------

// ColorPacket

// required uint64 layerref = 1;
inline bool ColorPacket::_internal_has_layerref() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ColorPacket::has_layerref() const {
  return _internal_has_layerref();
}
inline void ColorPacket::clear_layerref() {
  layerref_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColorPacket::_internal_layerref() const {
  return layerref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ColorPacket::layerref() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.ColorPacket.layerref)
  return _internal_layerref();
}
inline void ColorPacket::_internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  layerref_ = value;
}
inline void ColorPacket::set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_layerref(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.ColorPacket.layerref)
}

// optional uint32 width = 2;
inline bool ColorPacket::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ColorPacket::has_width() const {
  return _internal_has_width();
}
inline void ColorPacket::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::width() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.ColorPacket.width)
  return _internal_width();
}
inline void ColorPacket::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void ColorPacket::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.ColorPacket.width)
}

// optional uint32 height = 3;
inline bool ColorPacket::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ColorPacket::has_height() const {
  return _internal_has_height();
}
inline void ColorPacket::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::height() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.ColorPacket.height)
  return _internal_height();
}
inline void ColorPacket::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  height_ = value;
}
inline void ColorPacket::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.ColorPacket.height)
}

// optional uint32 color = 4;
inline bool ColorPacket::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ColorPacket::has_color() const {
  return _internal_has_color();
}
inline void ColorPacket::clear_color() {
  color_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ColorPacket::color() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.ColorPacket.color)
  return _internal_color();
}
inline void ColorPacket::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  color_ = value;
}
inline void ColorPacket::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.ColorPacket.color)
}

// -------------------------------------------------------------------

// TexturePacket_Rect

// optional float x = 1;
inline bool TexturePacket_Rect::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TexturePacket_Rect::has_x() const {
  return _internal_has_x();
}
inline void TexturePacket_Rect::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float TexturePacket_Rect::_internal_x() const {
  return x_;
}
inline float TexturePacket_Rect::x() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Rect.x)
  return _internal_x();
}
inline void TexturePacket_Rect::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void TexturePacket_Rect::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Rect.x)
}

// optional float y = 2;
inline bool TexturePacket_Rect::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TexturePacket_Rect::has_y() const {
  return _internal_has_y();
}
inline void TexturePacket_Rect::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float TexturePacket_Rect::_internal_y() const {
  return y_;
}
inline float TexturePacket_Rect::y() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Rect.y)
  return _internal_y();
}
inline void TexturePacket_Rect::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void TexturePacket_Rect::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Rect.y)
}

// optional float w = 3;
inline bool TexturePacket_Rect::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TexturePacket_Rect::has_w() const {
  return _internal_has_w();
}
inline void TexturePacket_Rect::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float TexturePacket_Rect::_internal_w() const {
  return w_;
}
inline float TexturePacket_Rect::w() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Rect.w)
  return _internal_w();
}
inline void TexturePacket_Rect::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void TexturePacket_Rect::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Rect.w)
}

// optional float h = 4;
inline bool TexturePacket_Rect::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TexturePacket_Rect::has_h() const {
  return _internal_has_h();
}
inline void TexturePacket_Rect::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TexturePacket_Rect::_internal_h() const {
  return h_;
}
inline float TexturePacket_Rect::h() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Rect.h)
  return _internal_h();
}
inline void TexturePacket_Rect::_internal_set_h(float value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void TexturePacket_Rect::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Rect.h)
}

// -------------------------------------------------------------------

// TexturePacket_Size

// optional int32 w = 1;
inline bool TexturePacket_Size::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TexturePacket_Size::has_w() const {
  return _internal_has_w();
}
inline void TexturePacket_Size::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TexturePacket_Size::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TexturePacket_Size::w() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Size.w)
  return _internal_w();
}
inline void TexturePacket_Size::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  w_ = value;
}
inline void TexturePacket_Size::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Size.w)
}

// optional int32 h = 2;
inline bool TexturePacket_Size::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TexturePacket_Size::has_h() const {
  return _internal_has_h();
}
inline void TexturePacket_Size::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TexturePacket_Size::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TexturePacket_Size::h() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Size.h)
  return _internal_h();
}
inline void TexturePacket_Size::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  h_ = value;
}
inline void TexturePacket_Size::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Size.h)
}

// -------------------------------------------------------------------

// TexturePacket_Matrix

// optional bool is2D = 1;
inline bool TexturePacket_Matrix::_internal_has_is2d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TexturePacket_Matrix::has_is2d() const {
  return _internal_has_is2d();
}
inline void TexturePacket_Matrix::clear_is2d() {
  is2d_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool TexturePacket_Matrix::_internal_is2d() const {
  return is2d_;
}
inline bool TexturePacket_Matrix::is2d() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Matrix.is2D)
  return _internal_is2d();
}
inline void TexturePacket_Matrix::_internal_set_is2d(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is2d_ = value;
}
inline void TexturePacket_Matrix::set_is2d(bool value) {
  _internal_set_is2d(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Matrix.is2D)
}

// optional bool isId = 2;
inline bool TexturePacket_Matrix::_internal_has_isid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TexturePacket_Matrix::has_isid() const {
  return _internal_has_isid();
}
inline void TexturePacket_Matrix::clear_isid() {
  isid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TexturePacket_Matrix::_internal_isid() const {
  return isid_;
}
inline bool TexturePacket_Matrix::isid() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Matrix.isId)
  return _internal_isid();
}
inline void TexturePacket_Matrix::_internal_set_isid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isid_ = value;
}
inline void TexturePacket_Matrix::set_isid(bool value) {
  _internal_set_isid(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Matrix.isId)
}

// repeated float m = 3;
inline int TexturePacket_Matrix::_internal_m_size() const {
  return m_.size();
}
inline int TexturePacket_Matrix::m_size() const {
  return _internal_m_size();
}
inline void TexturePacket_Matrix::clear_m() {
  m_.Clear();
}
inline float TexturePacket_Matrix::_internal_m(int index) const {
  return m_.Get(index);
}
inline float TexturePacket_Matrix::m(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.Matrix.m)
  return _internal_m(index);
}
inline void TexturePacket_Matrix::set_m(int index, float value) {
  m_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.Matrix.m)
}
inline void TexturePacket_Matrix::_internal_add_m(float value) {
  m_.Add(value);
}
inline void TexturePacket_Matrix::add_m(float value) {
  _internal_add_m(value);
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.TexturePacket.Matrix.m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TexturePacket_Matrix::_internal_m() const {
  return m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
TexturePacket_Matrix::m() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.TexturePacket.Matrix.m)
  return _internal_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TexturePacket_Matrix::_internal_mutable_m() {
  return &m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
TexturePacket_Matrix::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.TexturePacket.Matrix.m)
  return _internal_mutable_m();
}

// -------------------------------------------------------------------

// TexturePacket_EffectMask

// optional bool mIs3D = 1;
inline bool TexturePacket_EffectMask::_internal_has_mis3d() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TexturePacket_EffectMask::has_mis3d() const {
  return _internal_has_mis3d();
}
inline void TexturePacket_EffectMask::clear_mis3d() {
  mis3d_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool TexturePacket_EffectMask::_internal_mis3d() const {
  return mis3d_;
}
inline bool TexturePacket_EffectMask::mis3d() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.EffectMask.mIs3D)
  return _internal_mis3d();
}
inline void TexturePacket_EffectMask::_internal_set_mis3d(bool value) {
  _has_bits_[0] |= 0x00000004u;
  mis3d_ = value;
}
inline void TexturePacket_EffectMask::set_mis3d(bool value) {
  _internal_set_mis3d(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.EffectMask.mIs3D)
}

// optional .mozilla.layers.layerscope.TexturePacket.Size mSize = 2;
inline bool TexturePacket_EffectMask::_internal_has_msize() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || msize_ != nullptr);
  return value;
}
inline bool TexturePacket_EffectMask::has_msize() const {
  return _internal_has_msize();
}
inline void TexturePacket_EffectMask::clear_msize() {
  if (msize_ != nullptr) msize_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozilla::layers::layerscope::TexturePacket_Size& TexturePacket_EffectMask::_internal_msize() const {
  const ::mozilla::layers::layerscope::TexturePacket_Size* p = msize_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::TexturePacket_Size*>(
      &::mozilla::layers::layerscope::_TexturePacket_Size_default_instance_);
}
inline const ::mozilla::layers::layerscope::TexturePacket_Size& TexturePacket_EffectMask::msize() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.EffectMask.mSize)
  return _internal_msize();
}
inline ::mozilla::layers::layerscope::TexturePacket_Size* TexturePacket_EffectMask::release_msize() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.TexturePacket.EffectMask.mSize)
  _has_bits_[0] &= ~0x00000001u;
  ::mozilla::layers::layerscope::TexturePacket_Size* temp = msize_;
  msize_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::TexturePacket_Size* TexturePacket_EffectMask::_internal_mutable_msize() {
  _has_bits_[0] |= 0x00000001u;
  if (msize_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Size>(GetArenaNoVirtual());
    msize_ = p;
  }
  return msize_;
}
inline ::mozilla::layers::layerscope::TexturePacket_Size* TexturePacket_EffectMask::mutable_msize() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.TexturePacket.EffectMask.mSize)
  return _internal_mutable_msize();
}
inline void TexturePacket_EffectMask::set_allocated_msize(::mozilla::layers::layerscope::TexturePacket_Size* msize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete msize_;
  }
  if (msize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      msize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msize, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msize_ = msize;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.TexturePacket.EffectMask.mSize)
}

// optional .mozilla.layers.layerscope.TexturePacket.Matrix mMaskTransform = 3;
inline bool TexturePacket_EffectMask::_internal_has_mmasktransform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mmasktransform_ != nullptr);
  return value;
}
inline bool TexturePacket_EffectMask::has_mmasktransform() const {
  return _internal_has_mmasktransform();
}
inline void TexturePacket_EffectMask::clear_mmasktransform() {
  if (mmasktransform_ != nullptr) mmasktransform_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::layers::layerscope::TexturePacket_Matrix& TexturePacket_EffectMask::_internal_mmasktransform() const {
  const ::mozilla::layers::layerscope::TexturePacket_Matrix* p = mmasktransform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::TexturePacket_Matrix*>(
      &::mozilla::layers::layerscope::_TexturePacket_Matrix_default_instance_);
}
inline const ::mozilla::layers::layerscope::TexturePacket_Matrix& TexturePacket_EffectMask::mmasktransform() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.EffectMask.mMaskTransform)
  return _internal_mmasktransform();
}
inline ::mozilla::layers::layerscope::TexturePacket_Matrix* TexturePacket_EffectMask::release_mmasktransform() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.TexturePacket.EffectMask.mMaskTransform)
  _has_bits_[0] &= ~0x00000002u;
  ::mozilla::layers::layerscope::TexturePacket_Matrix* temp = mmasktransform_;
  mmasktransform_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::TexturePacket_Matrix* TexturePacket_EffectMask::_internal_mutable_mmasktransform() {
  _has_bits_[0] |= 0x00000002u;
  if (mmasktransform_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Matrix>(GetArenaNoVirtual());
    mmasktransform_ = p;
  }
  return mmasktransform_;
}
inline ::mozilla::layers::layerscope::TexturePacket_Matrix* TexturePacket_EffectMask::mutable_mmasktransform() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.TexturePacket.EffectMask.mMaskTransform)
  return _internal_mutable_mmasktransform();
}
inline void TexturePacket_EffectMask::set_allocated_mmasktransform(::mozilla::layers::layerscope::TexturePacket_Matrix* mmasktransform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mmasktransform_;
  }
  if (mmasktransform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mmasktransform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mmasktransform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mmasktransform_ = mmasktransform;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.TexturePacket.EffectMask.mMaskTransform)
}

// -------------------------------------------------------------------

// TexturePacket

// required uint64 layerref = 1;
inline bool TexturePacket::_internal_has_layerref() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TexturePacket::has_layerref() const {
  return _internal_has_layerref();
}
inline void TexturePacket::clear_layerref() {
  layerref_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TexturePacket::_internal_layerref() const {
  return layerref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TexturePacket::layerref() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.layerref)
  return _internal_layerref();
}
inline void TexturePacket::_internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  layerref_ = value;
}
inline void TexturePacket::set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_layerref(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.layerref)
}

// optional uint32 width = 2;
inline bool TexturePacket::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TexturePacket::has_width() const {
  return _internal_has_width();
}
inline void TexturePacket::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::width() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.width)
  return _internal_width();
}
inline void TexturePacket::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  width_ = value;
}
inline void TexturePacket::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.width)
}

// optional uint32 height = 3;
inline bool TexturePacket::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TexturePacket::has_height() const {
  return _internal_has_height();
}
inline void TexturePacket::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::height() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.height)
  return _internal_height();
}
inline void TexturePacket::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  height_ = value;
}
inline void TexturePacket::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.height)
}

// optional uint32 stride = 4;
inline bool TexturePacket::_internal_has_stride() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TexturePacket::has_stride() const {
  return _internal_has_stride();
}
inline void TexturePacket::clear_stride() {
  stride_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_stride() const {
  return stride_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::stride() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.stride)
  return _internal_stride();
}
inline void TexturePacket::_internal_set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  stride_ = value;
}
inline void TexturePacket::set_stride(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stride(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.stride)
}

// optional uint32 name = 5;
inline bool TexturePacket::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TexturePacket::has_name() const {
  return _internal_has_name();
}
inline void TexturePacket::clear_name() {
  name_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_name() const {
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::name() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.name)
  return _internal_name();
}
inline void TexturePacket::_internal_set_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  name_ = value;
}
inline void TexturePacket::set_name(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.name)
}

// optional uint32 target = 6;
inline bool TexturePacket::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TexturePacket::has_target() const {
  return _internal_has_target();
}
inline void TexturePacket::clear_target() {
  target_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::target() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.target)
  return _internal_target();
}
inline void TexturePacket::_internal_set_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  target_ = value;
}
inline void TexturePacket::set_target(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.target)
}

// optional uint32 dataformat = 7;
inline bool TexturePacket::_internal_has_dataformat() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TexturePacket::has_dataformat() const {
  return _internal_has_dataformat();
}
inline void TexturePacket::clear_dataformat() {
  dataformat_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::_internal_dataformat() const {
  return dataformat_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TexturePacket::dataformat() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.dataformat)
  return _internal_dataformat();
}
inline void TexturePacket::_internal_set_dataformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  dataformat_ = value;
}
inline void TexturePacket::set_dataformat(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dataformat(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.dataformat)
}

// optional uint64 glcontext = 8;
inline bool TexturePacket::_internal_has_glcontext() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TexturePacket::has_glcontext() const {
  return _internal_has_glcontext();
}
inline void TexturePacket::clear_glcontext() {
  glcontext_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TexturePacket::_internal_glcontext() const {
  return glcontext_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TexturePacket::glcontext() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.glcontext)
  return _internal_glcontext();
}
inline void TexturePacket::_internal_set_glcontext(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  glcontext_ = value;
}
inline void TexturePacket::set_glcontext(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_glcontext(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.glcontext)
}

// optional bytes data = 9;
inline bool TexturePacket::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TexturePacket::has_data() const {
  return _internal_has_data();
}
inline void TexturePacket::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TexturePacket::data() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.data)
  return _internal_data();
}
inline void TexturePacket::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.data)
}
inline std::string* TexturePacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.TexturePacket.data)
  return _internal_mutable_data();
}
inline const std::string& TexturePacket::_internal_data() const {
  return data_.GetNoArena();
}
inline void TexturePacket::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TexturePacket::set_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozilla.layers.layerscope.TexturePacket.data)
}
inline void TexturePacket::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozilla.layers.layerscope.TexturePacket.data)
}
inline void TexturePacket::set_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozilla.layers.layerscope.TexturePacket.data)
}
inline std::string* TexturePacket::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TexturePacket::release_data() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.TexturePacket.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TexturePacket::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.TexturePacket.data)
}

// optional .mozilla.layers.layerscope.TexturePacket.Rect mTextureCoords = 10;
inline bool TexturePacket::_internal_has_mtexturecoords() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || mtexturecoords_ != nullptr);
  return value;
}
inline bool TexturePacket::has_mtexturecoords() const {
  return _internal_has_mtexturecoords();
}
inline void TexturePacket::clear_mtexturecoords() {
  if (mtexturecoords_ != nullptr) mtexturecoords_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::layers::layerscope::TexturePacket_Rect& TexturePacket::_internal_mtexturecoords() const {
  const ::mozilla::layers::layerscope::TexturePacket_Rect* p = mtexturecoords_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::TexturePacket_Rect*>(
      &::mozilla::layers::layerscope::_TexturePacket_Rect_default_instance_);
}
inline const ::mozilla::layers::layerscope::TexturePacket_Rect& TexturePacket::mtexturecoords() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.mTextureCoords)
  return _internal_mtexturecoords();
}
inline ::mozilla::layers::layerscope::TexturePacket_Rect* TexturePacket::release_mtexturecoords() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.TexturePacket.mTextureCoords)
  _has_bits_[0] &= ~0x00000002u;
  ::mozilla::layers::layerscope::TexturePacket_Rect* temp = mtexturecoords_;
  mtexturecoords_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::TexturePacket_Rect* TexturePacket::_internal_mutable_mtexturecoords() {
  _has_bits_[0] |= 0x00000002u;
  if (mtexturecoords_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_Rect>(GetArenaNoVirtual());
    mtexturecoords_ = p;
  }
  return mtexturecoords_;
}
inline ::mozilla::layers::layerscope::TexturePacket_Rect* TexturePacket::mutable_mtexturecoords() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.TexturePacket.mTextureCoords)
  return _internal_mutable_mtexturecoords();
}
inline void TexturePacket::set_allocated_mtexturecoords(::mozilla::layers::layerscope::TexturePacket_Rect* mtexturecoords) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mtexturecoords_;
  }
  if (mtexturecoords) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mtexturecoords = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mtexturecoords, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  mtexturecoords_ = mtexturecoords;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.TexturePacket.mTextureCoords)
}

// optional bool mPremultiplied = 11;
inline bool TexturePacket::_internal_has_mpremultiplied() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TexturePacket::has_mpremultiplied() const {
  return _internal_has_mpremultiplied();
}
inline void TexturePacket::clear_mpremultiplied() {
  mpremultiplied_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool TexturePacket::_internal_mpremultiplied() const {
  return mpremultiplied_;
}
inline bool TexturePacket::mpremultiplied() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.mPremultiplied)
  return _internal_mpremultiplied();
}
inline void TexturePacket::_internal_set_mpremultiplied(bool value) {
  _has_bits_[0] |= 0x00001000u;
  mpremultiplied_ = value;
}
inline void TexturePacket::set_mpremultiplied(bool value) {
  _internal_set_mpremultiplied(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.mPremultiplied)
}

// optional .mozilla.layers.layerscope.TexturePacket.Filter mFilter = 12;
inline bool TexturePacket::_internal_has_mfilter() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TexturePacket::has_mfilter() const {
  return _internal_has_mfilter();
}
inline void TexturePacket::clear_mfilter() {
  mfilter_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::mozilla::layers::layerscope::TexturePacket_Filter TexturePacket::_internal_mfilter() const {
  return static_cast< ::mozilla::layers::layerscope::TexturePacket_Filter >(mfilter_);
}
inline ::mozilla::layers::layerscope::TexturePacket_Filter TexturePacket::mfilter() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.mFilter)
  return _internal_mfilter();
}
inline void TexturePacket::_internal_set_mfilter(::mozilla::layers::layerscope::TexturePacket_Filter value) {
  assert(::mozilla::layers::layerscope::TexturePacket_Filter_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  mfilter_ = value;
}
inline void TexturePacket::set_mfilter(::mozilla::layers::layerscope::TexturePacket_Filter value) {
  _internal_set_mfilter(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.mFilter)
}

// optional bool isMask = 20;
inline bool TexturePacket::_internal_has_ismask() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TexturePacket::has_ismask() const {
  return _internal_has_ismask();
}
inline void TexturePacket::clear_ismask() {
  ismask_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool TexturePacket::_internal_ismask() const {
  return ismask_;
}
inline bool TexturePacket::ismask() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.isMask)
  return _internal_ismask();
}
inline void TexturePacket::_internal_set_ismask(bool value) {
  _has_bits_[0] |= 0x00002000u;
  ismask_ = value;
}
inline void TexturePacket::set_ismask(bool value) {
  _internal_set_ismask(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.TexturePacket.isMask)
}

// optional .mozilla.layers.layerscope.TexturePacket.EffectMask mask = 21;
inline bool TexturePacket::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || mask_ != nullptr);
  return value;
}
inline bool TexturePacket::has_mask() const {
  return _internal_has_mask();
}
inline void TexturePacket::clear_mask() {
  if (mask_ != nullptr) mask_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozilla::layers::layerscope::TexturePacket_EffectMask& TexturePacket::_internal_mask() const {
  const ::mozilla::layers::layerscope::TexturePacket_EffectMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::TexturePacket_EffectMask*>(
      &::mozilla::layers::layerscope::_TexturePacket_EffectMask_default_instance_);
}
inline const ::mozilla::layers::layerscope::TexturePacket_EffectMask& TexturePacket::mask() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.TexturePacket.mask)
  return _internal_mask();
}
inline ::mozilla::layers::layerscope::TexturePacket_EffectMask* TexturePacket::release_mask() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.TexturePacket.mask)
  _has_bits_[0] &= ~0x00000004u;
  ::mozilla::layers::layerscope::TexturePacket_EffectMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::TexturePacket_EffectMask* TexturePacket::_internal_mutable_mask() {
  _has_bits_[0] |= 0x00000004u;
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket_EffectMask>(GetArenaNoVirtual());
    mask_ = p;
  }
  return mask_;
}
inline ::mozilla::layers::layerscope::TexturePacket_EffectMask* TexturePacket::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.TexturePacket.mask)
  return _internal_mutable_mask();
}
inline void TexturePacket::set_allocated_mask(::mozilla::layers::layerscope::TexturePacket_EffectMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mask_;
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.TexturePacket.mask)
}

// -------------------------------------------------------------------

// LayersPacket_Layer_Size

// optional int32 w = 1;
inline bool LayersPacket_Layer_Size::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Size::has_w() const {
  return _internal_has_w();
}
inline void LayersPacket_Layer_Size::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Size::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Size::w() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Size.w)
  return _internal_w();
}
inline void LayersPacket_Layer_Size::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  w_ = value;
}
inline void LayersPacket_Layer_Size::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Size.w)
}

// optional int32 h = 2;
inline bool LayersPacket_Layer_Size::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Size::has_h() const {
  return _internal_has_h();
}
inline void LayersPacket_Layer_Size::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Size::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Size::h() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Size.h)
  return _internal_h();
}
inline void LayersPacket_Layer_Size::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  h_ = value;
}
inline void LayersPacket_Layer_Size::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Size.h)
}

// -------------------------------------------------------------------

// LayersPacket_Layer_Rect

// optional int32 x = 1;
inline bool LayersPacket_Layer_Rect::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Rect::has_x() const {
  return _internal_has_x();
}
inline void LayersPacket_Layer_Rect::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::x() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Rect.x)
  return _internal_x();
}
inline void LayersPacket_Layer_Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void LayersPacket_Layer_Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Rect.x)
}

// optional int32 y = 2;
inline bool LayersPacket_Layer_Rect::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Rect::has_y() const {
  return _internal_has_y();
}
inline void LayersPacket_Layer_Rect::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::y() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Rect.y)
  return _internal_y();
}
inline void LayersPacket_Layer_Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void LayersPacket_Layer_Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Rect.y)
}

// optional int32 w = 3;
inline bool LayersPacket_Layer_Rect::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Rect::has_w() const {
  return _internal_has_w();
}
inline void LayersPacket_Layer_Rect::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::_internal_w() const {
  return w_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::w() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Rect.w)
  return _internal_w();
}
inline void LayersPacket_Layer_Rect::_internal_set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void LayersPacket_Layer_Rect::set_w(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Rect.w)
}

// optional int32 h = 4;
inline bool LayersPacket_Layer_Rect::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Rect::has_h() const {
  return _internal_has_h();
}
inline void LayersPacket_Layer_Rect::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::_internal_h() const {
  return h_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LayersPacket_Layer_Rect::h() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Rect.h)
  return _internal_h();
}
inline void LayersPacket_Layer_Rect::_internal_set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void LayersPacket_Layer_Rect::set_h(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Rect.h)
}

// -------------------------------------------------------------------

// LayersPacket_Layer_Region

// repeated .mozilla.layers.layerscope.LayersPacket.Layer.Rect r = 1;
inline int LayersPacket_Layer_Region::_internal_r_size() const {
  return r_.size();
}
inline int LayersPacket_Layer_Region::r_size() const {
  return _internal_r_size();
}
inline void LayersPacket_Layer_Region::clear_r() {
  r_.Clear();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Region::mutable_r(int index) {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.Region.r)
  return r_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >*
LayersPacket_Layer_Region::mutable_r() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.LayersPacket.Layer.Region.r)
  return &r_;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer_Region::_internal_r(int index) const {
  return r_.Get(index);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer_Region::r(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Region.r)
  return _internal_r(index);
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Region::_internal_add_r() {
  return r_.Add();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Region::add_r() {
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.LayersPacket.Layer.Region.r)
  return _internal_add_r();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >&
LayersPacket_Layer_Region::r() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.LayersPacket.Layer.Region.r)
  return r_;
}

// -------------------------------------------------------------------

// LayersPacket_Layer_Matrix

// optional bool is2D = 1;
inline bool LayersPacket_Layer_Matrix::_internal_has_is2d() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Matrix::has_is2d() const {
  return _internal_has_is2d();
}
inline void LayersPacket_Layer_Matrix::clear_is2d() {
  is2d_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool LayersPacket_Layer_Matrix::_internal_is2d() const {
  return is2d_;
}
inline bool LayersPacket_Layer_Matrix::is2d() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.is2D)
  return _internal_is2d();
}
inline void LayersPacket_Layer_Matrix::_internal_set_is2d(bool value) {
  _has_bits_[0] |= 0x00000001u;
  is2d_ = value;
}
inline void LayersPacket_Layer_Matrix::set_is2d(bool value) {
  _internal_set_is2d(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.is2D)
}

// optional bool isId = 2;
inline bool LayersPacket_Layer_Matrix::_internal_has_isid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LayersPacket_Layer_Matrix::has_isid() const {
  return _internal_has_isid();
}
inline void LayersPacket_Layer_Matrix::clear_isid() {
  isid_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool LayersPacket_Layer_Matrix::_internal_isid() const {
  return isid_;
}
inline bool LayersPacket_Layer_Matrix::isid() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.isId)
  return _internal_isid();
}
inline void LayersPacket_Layer_Matrix::_internal_set_isid(bool value) {
  _has_bits_[0] |= 0x00000002u;
  isid_ = value;
}
inline void LayersPacket_Layer_Matrix::set_isid(bool value) {
  _internal_set_isid(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.isId)
}

// repeated float m = 3;
inline int LayersPacket_Layer_Matrix::_internal_m_size() const {
  return m_.size();
}
inline int LayersPacket_Layer_Matrix::m_size() const {
  return _internal_m_size();
}
inline void LayersPacket_Layer_Matrix::clear_m() {
  m_.Clear();
}
inline float LayersPacket_Layer_Matrix::_internal_m(int index) const {
  return m_.Get(index);
}
inline float LayersPacket_Layer_Matrix::m(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.m)
  return _internal_m(index);
}
inline void LayersPacket_Layer_Matrix::set_m(int index, float value) {
  m_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.m)
}
inline void LayersPacket_Layer_Matrix::_internal_add_m(float value) {
  m_.Add(value);
}
inline void LayersPacket_Layer_Matrix::add_m(float value) {
  _internal_add_m(value);
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.m)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayersPacket_Layer_Matrix::_internal_m() const {
  return m_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
LayersPacket_Layer_Matrix::m() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.m)
  return _internal_m();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayersPacket_Layer_Matrix::_internal_mutable_m() {
  return &m_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
LayersPacket_Layer_Matrix::mutable_m() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.LayersPacket.Layer.Matrix.m)
  return _internal_mutable_m();
}

// -------------------------------------------------------------------

// LayersPacket_Layer_Shadow

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 1;
inline bool LayersPacket_Layer_Shadow::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || clip_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer_Shadow::has_clip() const {
  return _internal_has_clip();
}
inline void LayersPacket_Layer_Shadow::clear_clip() {
  if (clip_ != nullptr) clip_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer_Shadow::_internal_clip() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* p = clip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Rect_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer_Shadow::clip() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.clip)
  return _internal_clip();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Shadow::release_clip() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.clip)
  _has_bits_[0] &= ~0x00000001u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* temp = clip_;
  clip_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Shadow::_internal_mutable_clip() {
  _has_bits_[0] |= 0x00000001u;
  if (clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Rect>(GetArenaNoVirtual());
    clip_ = p;
  }
  return clip_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer_Shadow::mutable_clip() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.clip)
  return _internal_mutable_clip();
}
inline void LayersPacket_Layer_Shadow::set_allocated_clip(::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clip_;
  }
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.clip)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 2;
inline bool LayersPacket_Layer_Shadow::_internal_has_transform() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || transform_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer_Shadow::has_transform() const {
  return _internal_has_transform();
}
inline void LayersPacket_Layer_Shadow::clear_transform() {
  if (transform_ != nullptr) transform_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& LayersPacket_Layer_Shadow::_internal_transform() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* p = transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Matrix_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& LayersPacket_Layer_Shadow::transform() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.transform)
  return _internal_transform();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer_Shadow::release_transform() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.transform)
  _has_bits_[0] &= ~0x00000002u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer_Shadow::_internal_mutable_transform() {
  _has_bits_[0] |= 0x00000002u;
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Matrix>(GetArenaNoVirtual());
    transform_ = p;
  }
  return transform_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer_Shadow::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.transform)
  return _internal_mutable_transform();
}
inline void LayersPacket_Layer_Shadow::set_allocated_transform(::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.transform)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 3;
inline bool LayersPacket_Layer_Shadow::_internal_has_vregion() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer_Shadow::has_vregion() const {
  return _internal_has_vregion();
}
inline void LayersPacket_Layer_Shadow::clear_vregion() {
  if (vregion_ != nullptr) vregion_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer_Shadow::_internal_vregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = vregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer_Shadow::vregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.vRegion)
  return _internal_vregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer_Shadow::release_vregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.vRegion)
  _has_bits_[0] &= ~0x00000004u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = vregion_;
  vregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer_Shadow::_internal_mutable_vregion() {
  _has_bits_[0] |= 0x00000004u;
  if (vregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    vregion_ = p;
  }
  return vregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer_Shadow::mutable_vregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.vRegion)
  return _internal_mutable_vregion();
}
inline void LayersPacket_Layer_Shadow::set_allocated_vregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vregion_;
  }
  if (vregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vregion_ = vregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.Shadow.vRegion)
}

// -------------------------------------------------------------------

// LayersPacket_Layer

// required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
inline bool LayersPacket_Layer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_type() const {
  return _internal_has_type();
}
inline void LayersPacket_Layer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType LayersPacket_Layer::_internal_type() const {
  return static_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType >(type_);
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType LayersPacket_Layer::type() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.type)
  return _internal_type();
}
inline void LayersPacket_Layer::_internal_set_type(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType value) {
  assert(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  type_ = value;
}
inline void LayersPacket_Layer::set_type(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.type)
}

// required uint64 ptr = 2;
inline bool LayersPacket_Layer::_internal_has_ptr() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_ptr() const {
  return _internal_has_ptr();
}
inline void LayersPacket_Layer::clear_ptr() {
  ptr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::_internal_ptr() const {
  return ptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::ptr() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.ptr)
  return _internal_ptr();
}
inline void LayersPacket_Layer::_internal_set_ptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  ptr_ = value;
}
inline void LayersPacket_Layer::set_ptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ptr(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.ptr)
}

// required uint64 parentPtr = 3;
inline bool LayersPacket_Layer::_internal_has_parentptr() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_parentptr() const {
  return _internal_has_parentptr();
}
inline void LayersPacket_Layer::clear_parentptr() {
  parentptr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::_internal_parentptr() const {
  return parentptr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::parentptr() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.parentPtr)
  return _internal_parentptr();
}
inline void LayersPacket_Layer::_internal_set_parentptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  parentptr_ = value;
}
inline void LayersPacket_Layer::set_parentptr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_parentptr(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.parentPtr)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 10;
inline bool LayersPacket_Layer::_internal_has_clip() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || clip_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_clip() const {
  return _internal_has_clip();
}
inline void LayersPacket_Layer::clear_clip() {
  if (clip_ != nullptr) clip_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer::_internal_clip() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* p = clip_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Rect_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& LayersPacket_Layer::clip() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.clip)
  return _internal_clip();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer::release_clip() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.clip)
  _has_bits_[0] &= ~0x00000002u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* temp = clip_;
  clip_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer::_internal_mutable_clip() {
  _has_bits_[0] |= 0x00000002u;
  if (clip_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Rect>(GetArenaNoVirtual());
    clip_ = p;
  }
  return clip_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* LayersPacket_Layer::mutable_clip() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.clip)
  return _internal_mutable_clip();
}
inline void LayersPacket_Layer::set_allocated_clip(::mozilla::layers::layerscope::LayersPacket_Layer_Rect* clip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clip_;
  }
  if (clip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clip, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  clip_ = clip;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.clip)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 11;
inline bool LayersPacket_Layer::_internal_has_transform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || transform_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_transform() const {
  return _internal_has_transform();
}
inline void LayersPacket_Layer::clear_transform() {
  if (transform_ != nullptr) transform_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& LayersPacket_Layer::_internal_transform() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* p = transform_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Matrix_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& LayersPacket_Layer::transform() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.transform)
  return _internal_transform();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer::release_transform() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.transform)
  _has_bits_[0] &= ~0x00000004u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* temp = transform_;
  transform_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer::_internal_mutable_transform() {
  _has_bits_[0] |= 0x00000004u;
  if (transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Matrix>(GetArenaNoVirtual());
    transform_ = p;
  }
  return transform_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* LayersPacket_Layer::mutable_transform() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.transform)
  return _internal_mutable_transform();
}
inline void LayersPacket_Layer::set_allocated_transform(::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.transform)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 12;
inline bool LayersPacket_Layer::_internal_has_vregion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_vregion() const {
  return _internal_has_vregion();
}
inline void LayersPacket_Layer::clear_vregion() {
  if (vregion_ != nullptr) vregion_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_vregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = vregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::vregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.vRegion)
  return _internal_vregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_vregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.vRegion)
  _has_bits_[0] &= ~0x00000008u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = vregion_;
  vregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_vregion() {
  _has_bits_[0] |= 0x00000008u;
  if (vregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    vregion_ = p;
  }
  return vregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_vregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.vRegion)
  return _internal_mutable_vregion();
}
inline void LayersPacket_Layer::set_allocated_vregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vregion_;
  }
  if (vregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vregion_ = vregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.vRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Shadow shadow = 13;
inline bool LayersPacket_Layer::_internal_has_shadow() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || shadow_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_shadow() const {
  return _internal_has_shadow();
}
inline void LayersPacket_Layer::clear_shadow() {
  if (shadow_ != nullptr) shadow_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow& LayersPacket_Layer::_internal_shadow() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* p = shadow_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Shadow_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow& LayersPacket_Layer::shadow() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.shadow)
  return _internal_shadow();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* LayersPacket_Layer::release_shadow() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.shadow)
  _has_bits_[0] &= ~0x00000010u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* temp = shadow_;
  shadow_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* LayersPacket_Layer::_internal_mutable_shadow() {
  _has_bits_[0] |= 0x00000010u;
  if (shadow_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Shadow>(GetArenaNoVirtual());
    shadow_ = p;
  }
  return shadow_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* LayersPacket_Layer::mutable_shadow() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.shadow)
  return _internal_mutable_shadow();
}
inline void LayersPacket_Layer::set_allocated_shadow(::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* shadow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shadow_;
  }
  if (shadow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shadow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shadow, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  shadow_ = shadow;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.shadow)
}

// optional float opacity = 14;
inline bool LayersPacket_Layer::_internal_has_opacity() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_opacity() const {
  return _internal_has_opacity();
}
inline void LayersPacket_Layer::clear_opacity() {
  opacity_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float LayersPacket_Layer::_internal_opacity() const {
  return opacity_;
}
inline float LayersPacket_Layer::opacity() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.opacity)
  return _internal_opacity();
}
inline void LayersPacket_Layer::_internal_set_opacity(float value) {
  _has_bits_[0] |= 0x00008000u;
  opacity_ = value;
}
inline void LayersPacket_Layer::set_opacity(float value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.opacity)
}

// optional bool cOpaque = 15;
inline bool LayersPacket_Layer::_internal_has_copaque() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_copaque() const {
  return _internal_has_copaque();
}
inline void LayersPacket_Layer::clear_copaque() {
  copaque_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool LayersPacket_Layer::_internal_copaque() const {
  return copaque_;
}
inline bool LayersPacket_Layer::copaque() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.cOpaque)
  return _internal_copaque();
}
inline void LayersPacket_Layer::_internal_set_copaque(bool value) {
  _has_bits_[0] |= 0x00040000u;
  copaque_ = value;
}
inline void LayersPacket_Layer::set_copaque(bool value) {
  _internal_set_copaque(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.cOpaque)
}

// optional bool cAlpha = 16;
inline bool LayersPacket_Layer::_internal_has_calpha() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_calpha() const {
  return _internal_has_calpha();
}
inline void LayersPacket_Layer::clear_calpha() {
  calpha_ = false;
  _has_bits_[0] &= ~0x00080000u;
}
inline bool LayersPacket_Layer::_internal_calpha() const {
  return calpha_;
}
inline bool LayersPacket_Layer::calpha() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.cAlpha)
  return _internal_calpha();
}
inline void LayersPacket_Layer::_internal_set_calpha(bool value) {
  _has_bits_[0] |= 0x00080000u;
  calpha_ = value;
}
inline void LayersPacket_Layer::set_calpha(bool value) {
  _internal_set_calpha(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.cAlpha)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.ScrollingDirect direct = 17;
inline bool LayersPacket_Layer::_internal_has_direct() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_direct() const {
  return _internal_has_direct();
}
inline void LayersPacket_Layer::clear_direct() {
  direct_ = 1;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::_internal_direct() const {
  return static_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect >(direct_);
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::direct() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.direct)
  return _internal_direct();
}
inline void LayersPacket_Layer::_internal_set_direct(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect value) {
  assert(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect_IsValid(value));
  _has_bits_[0] |= 0x01000000u;
  direct_ = value;
}
inline void LayersPacket_Layer::set_direct(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect value) {
  _internal_set_direct(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.direct)
}

// optional uint64 barID = 18;
inline bool LayersPacket_Layer::_internal_has_barid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_barid() const {
  return _internal_has_barid();
}
inline void LayersPacket_Layer::clear_barid() {
  barid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::_internal_barid() const {
  return barid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::barid() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.barID)
  return _internal_barid();
}
inline void LayersPacket_Layer::_internal_set_barid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00010000u;
  barid_ = value;
}
inline void LayersPacket_Layer::set_barid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_barid(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.barID)
}

// optional uint64 mask = 19;
inline bool LayersPacket_Layer::_internal_has_mask() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_mask() const {
  return _internal_has_mask();
}
inline void LayersPacket_Layer::clear_mask() {
  mask_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::_internal_mask() const {
  return mask_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::mask() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.mask)
  return _internal_mask();
}
inline void LayersPacket_Layer::_internal_set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  mask_ = value;
}
inline void LayersPacket_Layer::set_mask(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_mask(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.mask)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hitRegion = 20;
inline bool LayersPacket_Layer::_internal_has_hitregion() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || hitregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_hitregion() const {
  return _internal_has_hitregion();
}
inline void LayersPacket_Layer::clear_hitregion() {
  if (hitregion_ != nullptr) hitregion_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_hitregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = hitregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::hitregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.hitRegion)
  return _internal_hitregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_hitregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.hitRegion)
  _has_bits_[0] &= ~0x00000020u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = hitregion_;
  hitregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_hitregion() {
  _has_bits_[0] |= 0x00000020u;
  if (hitregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    hitregion_ = p;
  }
  return hitregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_hitregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.hitRegion)
  return _internal_mutable_hitregion();
}
inline void LayersPacket_Layer::set_allocated_hitregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* hitregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hitregion_;
  }
  if (hitregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hitregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hitregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  hitregion_ = hitregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.hitRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region dispatchRegion = 21;
inline bool LayersPacket_Layer::_internal_has_dispatchregion() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || dispatchregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_dispatchregion() const {
  return _internal_has_dispatchregion();
}
inline void LayersPacket_Layer::clear_dispatchregion() {
  if (dispatchregion_ != nullptr) dispatchregion_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_dispatchregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = dispatchregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::dispatchregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.dispatchRegion)
  return _internal_dispatchregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_dispatchregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.dispatchRegion)
  _has_bits_[0] &= ~0x00000040u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = dispatchregion_;
  dispatchregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_dispatchregion() {
  _has_bits_[0] |= 0x00000040u;
  if (dispatchregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    dispatchregion_ = p;
  }
  return dispatchregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_dispatchregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.dispatchRegion)
  return _internal_mutable_dispatchregion();
}
inline void LayersPacket_Layer::set_allocated_dispatchregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* dispatchregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dispatchregion_;
  }
  if (dispatchregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dispatchregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dispatchregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  dispatchregion_ = dispatchregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.dispatchRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region noActionRegion = 22;
inline bool LayersPacket_Layer::_internal_has_noactionregion() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || noactionregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_noactionregion() const {
  return _internal_has_noactionregion();
}
inline void LayersPacket_Layer::clear_noactionregion() {
  if (noactionregion_ != nullptr) noactionregion_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_noactionregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = noactionregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::noactionregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.noActionRegion)
  return _internal_noactionregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_noactionregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.noActionRegion)
  _has_bits_[0] &= ~0x00000080u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = noactionregion_;
  noactionregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_noactionregion() {
  _has_bits_[0] |= 0x00000080u;
  if (noactionregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    noactionregion_ = p;
  }
  return noactionregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_noactionregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.noActionRegion)
  return _internal_mutable_noactionregion();
}
inline void LayersPacket_Layer::set_allocated_noactionregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* noactionregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete noactionregion_;
  }
  if (noactionregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      noactionregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noactionregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  noactionregion_ = noactionregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.noActionRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hPanRegion = 23;
inline bool LayersPacket_Layer::_internal_has_hpanregion() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || hpanregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_hpanregion() const {
  return _internal_has_hpanregion();
}
inline void LayersPacket_Layer::clear_hpanregion() {
  if (hpanregion_ != nullptr) hpanregion_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_hpanregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = hpanregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::hpanregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.hPanRegion)
  return _internal_hpanregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_hpanregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.hPanRegion)
  _has_bits_[0] &= ~0x00000100u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = hpanregion_;
  hpanregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_hpanregion() {
  _has_bits_[0] |= 0x00000100u;
  if (hpanregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    hpanregion_ = p;
  }
  return hpanregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_hpanregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.hPanRegion)
  return _internal_mutable_hpanregion();
}
inline void LayersPacket_Layer::set_allocated_hpanregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* hpanregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete hpanregion_;
  }
  if (hpanregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      hpanregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hpanregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  hpanregion_ = hpanregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.hPanRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vPanRegion = 24;
inline bool LayersPacket_Layer::_internal_has_vpanregion() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || vpanregion_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_vpanregion() const {
  return _internal_has_vpanregion();
}
inline void LayersPacket_Layer::clear_vpanregion() {
  if (vpanregion_ != nullptr) vpanregion_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_vpanregion() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = vpanregion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::vpanregion() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.vPanRegion)
  return _internal_vpanregion();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_vpanregion() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.vPanRegion)
  _has_bits_[0] &= ~0x00000200u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = vpanregion_;
  vpanregion_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_vpanregion() {
  _has_bits_[0] |= 0x00000200u;
  if (vpanregion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    vpanregion_ = p;
  }
  return vpanregion_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_vpanregion() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.vPanRegion)
  return _internal_mutable_vpanregion();
}
inline void LayersPacket_Layer::set_allocated_vpanregion(::mozilla::layers::layerscope::LayersPacket_Layer_Region* vpanregion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vpanregion_;
  }
  if (vpanregion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vpanregion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vpanregion, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  vpanregion_ = vpanregion;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.vPanRegion)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Region valid = 100;
inline bool LayersPacket_Layer::_internal_has_valid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || valid_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_valid() const {
  return _internal_has_valid();
}
inline void LayersPacket_Layer::clear_valid() {
  if (valid_ != nullptr) valid_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::_internal_valid() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Region* p = valid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& LayersPacket_Layer::valid() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.valid)
  return _internal_valid();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::release_valid() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.valid)
  _has_bits_[0] &= ~0x00000400u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region* temp = valid_;
  valid_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::_internal_mutable_valid() {
  _has_bits_[0] |= 0x00000400u;
  if (valid_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Region>(GetArenaNoVirtual());
    valid_ = p;
  }
  return valid_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Region* LayersPacket_Layer::mutable_valid() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.valid)
  return _internal_mutable_valid();
}
inline void LayersPacket_Layer::set_allocated_valid(::mozilla::layers::layerscope::LayersPacket_Layer_Region* valid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete valid_;
  }
  if (valid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  valid_ = valid;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.valid)
}

// optional uint32 color = 101;
inline bool LayersPacket_Layer::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_color() const {
  return _internal_has_color();
}
inline void LayersPacket_Layer::clear_color() {
  color_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayersPacket_Layer::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayersPacket_Layer::color() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.color)
  return _internal_color();
}
inline void LayersPacket_Layer::_internal_set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  color_ = value;
}
inline void LayersPacket_Layer::set_color(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.color)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Filter filter = 102;
inline bool LayersPacket_Layer::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_filter() const {
  return _internal_has_filter();
}
inline void LayersPacket_Layer::clear_filter() {
  filter_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Filter LayersPacket_Layer::_internal_filter() const {
  return static_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Filter >(filter_);
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Filter LayersPacket_Layer::filter() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.filter)
  return _internal_filter();
}
inline void LayersPacket_Layer::_internal_set_filter(::mozilla::layers::layerscope::LayersPacket_Layer_Filter value) {
  assert(::mozilla::layers::layerscope::LayersPacket_Layer_Filter_IsValid(value));
  _has_bits_[0] |= 0x00400000u;
  filter_ = value;
}
inline void LayersPacket_Layer::set_filter(::mozilla::layers::layerscope::LayersPacket_Layer_Filter value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.filter)
}

// optional uint64 refID = 103;
inline bool LayersPacket_Layer::_internal_has_refid() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_refid() const {
  return _internal_has_refid();
}
inline void LayersPacket_Layer::clear_refid() {
  refid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::_internal_refid() const {
  return refid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LayersPacket_Layer::refid() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.refID)
  return _internal_refid();
}
inline void LayersPacket_Layer::_internal_set_refid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00200000u;
  refid_ = value;
}
inline void LayersPacket_Layer::set_refid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_refid(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.refID)
}

// optional .mozilla.layers.layerscope.LayersPacket.Layer.Size size = 104;
inline bool LayersPacket_Layer::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || size_ != nullptr);
  return value;
}
inline bool LayersPacket_Layer::has_size() const {
  return _internal_has_size();
}
inline void LayersPacket_Layer::clear_size() {
  if (size_ != nullptr) size_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Size& LayersPacket_Layer::_internal_size() const {
  const ::mozilla::layers::layerscope::LayersPacket_Layer_Size* p = size_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket_Layer_Size*>(
      &::mozilla::layers::layerscope::_LayersPacket_Layer_Size_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer_Size& LayersPacket_Layer::size() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.size)
  return _internal_size();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Size* LayersPacket_Layer::release_size() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.size)
  _has_bits_[0] &= ~0x00000800u;
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size* temp = size_;
  size_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Size* LayersPacket_Layer::_internal_mutable_size() {
  _has_bits_[0] |= 0x00000800u;
  if (size_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket_Layer_Size>(GetArenaNoVirtual());
    size_ = p;
  }
  return size_;
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer_Size* LayersPacket_Layer::mutable_size() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.size)
  return _internal_mutable_size();
}
inline void LayersPacket_Layer::set_allocated_size(::mozilla::layers::layerscope::LayersPacket_Layer_Size* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete size_;
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  size_ = size;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.size)
}

// optional uint32 displayListLogLength = 105;
inline bool LayersPacket_Layer::_internal_has_displaylistloglength() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_displaylistloglength() const {
  return _internal_has_displaylistloglength();
}
inline void LayersPacket_Layer::clear_displaylistloglength() {
  displaylistloglength_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayersPacket_Layer::_internal_displaylistloglength() const {
  return displaylistloglength_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LayersPacket_Layer::displaylistloglength() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.displayListLogLength)
  return _internal_displaylistloglength();
}
inline void LayersPacket_Layer::_internal_set_displaylistloglength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  displaylistloglength_ = value;
}
inline void LayersPacket_Layer::set_displaylistloglength(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_displaylistloglength(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.displayListLogLength)
}

// optional bytes displayListLog = 106;
inline bool LayersPacket_Layer::_internal_has_displaylistlog() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LayersPacket_Layer::has_displaylistlog() const {
  return _internal_has_displaylistlog();
}
inline void LayersPacket_Layer::clear_displaylistlog() {
  displaylistlog_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LayersPacket_Layer::displaylistlog() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
  return _internal_displaylistlog();
}
inline void LayersPacket_Layer::set_displaylistlog(const std::string& value) {
  _internal_set_displaylistlog(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
}
inline std::string* LayersPacket_Layer::mutable_displaylistlog() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
  return _internal_mutable_displaylistlog();
}
inline const std::string& LayersPacket_Layer::_internal_displaylistlog() const {
  return displaylistlog_.GetNoArena();
}
inline void LayersPacket_Layer::_internal_set_displaylistlog(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  displaylistlog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LayersPacket_Layer::set_displaylistlog(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  displaylistlog_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
}
inline void LayersPacket_Layer::set_displaylistlog(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  displaylistlog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
}
inline void LayersPacket_Layer::set_displaylistlog(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  displaylistlog_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
}
inline std::string* LayersPacket_Layer::_internal_mutable_displaylistlog() {
  _has_bits_[0] |= 0x00000001u;
  return displaylistlog_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LayersPacket_Layer::release_displaylistlog() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
  if (!_internal_has_displaylistlog()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return displaylistlog_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LayersPacket_Layer::set_allocated_displaylistlog(std::string* displaylistlog) {
  if (displaylistlog != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  displaylistlog_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), displaylistlog);
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.LayersPacket.Layer.displayListLog)
}

// -------------------------------------------------------------------

// LayersPacket

// repeated .mozilla.layers.layerscope.LayersPacket.Layer layer = 1;
inline int LayersPacket::_internal_layer_size() const {
  return layer_.size();
}
inline int LayersPacket::layer_size() const {
  return _internal_layer_size();
}
inline void LayersPacket::clear_layer() {
  layer_.Clear();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer* LayersPacket::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.LayersPacket.layer)
  return layer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer >*
LayersPacket::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.LayersPacket.layer)
  return &layer_;
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer& LayersPacket::_internal_layer(int index) const {
  return layer_.Get(index);
}
inline const ::mozilla::layers::layerscope::LayersPacket_Layer& LayersPacket::layer(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.LayersPacket.layer)
  return _internal_layer(index);
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer* LayersPacket::_internal_add_layer() {
  return layer_.Add();
}
inline ::mozilla::layers::layerscope::LayersPacket_Layer* LayersPacket::add_layer() {
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.LayersPacket.layer)
  return _internal_add_layer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::LayersPacket_Layer >&
LayersPacket::layer() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.LayersPacket.layer)
  return layer_;
}

// -------------------------------------------------------------------

// MetaPacket

// optional bool composedByHwc = 1;
inline bool MetaPacket::_internal_has_composedbyhwc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MetaPacket::has_composedbyhwc() const {
  return _internal_has_composedbyhwc();
}
inline void MetaPacket::clear_composedbyhwc() {
  composedbyhwc_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool MetaPacket::_internal_composedbyhwc() const {
  return composedbyhwc_;
}
inline bool MetaPacket::composedbyhwc() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.MetaPacket.composedByHwc)
  return _internal_composedbyhwc();
}
inline void MetaPacket::_internal_set_composedbyhwc(bool value) {
  _has_bits_[0] |= 0x00000001u;
  composedbyhwc_ = value;
}
inline void MetaPacket::set_composedbyhwc(bool value) {
  _internal_set_composedbyhwc(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.MetaPacket.composedByHwc)
}

// -------------------------------------------------------------------

// DrawPacket_Rect

// required float x = 1;
inline bool DrawPacket_Rect::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawPacket_Rect::has_x() const {
  return _internal_has_x();
}
inline void DrawPacket_Rect::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DrawPacket_Rect::_internal_x() const {
  return x_;
}
inline float DrawPacket_Rect::x() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.Rect.x)
  return _internal_x();
}
inline void DrawPacket_Rect::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void DrawPacket_Rect::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.Rect.x)
}

// required float y = 2;
inline bool DrawPacket_Rect::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawPacket_Rect::has_y() const {
  return _internal_has_y();
}
inline void DrawPacket_Rect::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DrawPacket_Rect::_internal_y() const {
  return y_;
}
inline float DrawPacket_Rect::y() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.Rect.y)
  return _internal_y();
}
inline void DrawPacket_Rect::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void DrawPacket_Rect::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.Rect.y)
}

// required float w = 3;
inline bool DrawPacket_Rect::_internal_has_w() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawPacket_Rect::has_w() const {
  return _internal_has_w();
}
inline void DrawPacket_Rect::clear_w() {
  w_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DrawPacket_Rect::_internal_w() const {
  return w_;
}
inline float DrawPacket_Rect::w() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.Rect.w)
  return _internal_w();
}
inline void DrawPacket_Rect::_internal_set_w(float value) {
  _has_bits_[0] |= 0x00000004u;
  w_ = value;
}
inline void DrawPacket_Rect::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.Rect.w)
}

// required float h = 4;
inline bool DrawPacket_Rect::_internal_has_h() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawPacket_Rect::has_h() const {
  return _internal_has_h();
}
inline void DrawPacket_Rect::clear_h() {
  h_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DrawPacket_Rect::_internal_h() const {
  return h_;
}
inline float DrawPacket_Rect::h() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.Rect.h)
  return _internal_h();
}
inline void DrawPacket_Rect::_internal_set_h(float value) {
  _has_bits_[0] |= 0x00000008u;
  h_ = value;
}
inline void DrawPacket_Rect::set_h(float value) {
  _internal_set_h(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.Rect.h)
}

// -------------------------------------------------------------------

// DrawPacket

// required float offsetX = 1;
inline bool DrawPacket::_internal_has_offsetx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DrawPacket::has_offsetx() const {
  return _internal_has_offsetx();
}
inline void DrawPacket::clear_offsetx() {
  offsetx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float DrawPacket::_internal_offsetx() const {
  return offsetx_;
}
inline float DrawPacket::offsetx() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.offsetX)
  return _internal_offsetx();
}
inline void DrawPacket::_internal_set_offsetx(float value) {
  _has_bits_[0] |= 0x00000001u;
  offsetx_ = value;
}
inline void DrawPacket::set_offsetx(float value) {
  _internal_set_offsetx(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.offsetX)
}

// required float offsetY = 2;
inline bool DrawPacket::_internal_has_offsety() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DrawPacket::has_offsety() const {
  return _internal_has_offsety();
}
inline void DrawPacket::clear_offsety() {
  offsety_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float DrawPacket::_internal_offsety() const {
  return offsety_;
}
inline float DrawPacket::offsety() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.offsetY)
  return _internal_offsety();
}
inline void DrawPacket::_internal_set_offsety(float value) {
  _has_bits_[0] |= 0x00000002u;
  offsety_ = value;
}
inline void DrawPacket::set_offsety(float value) {
  _internal_set_offsety(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.offsetY)
}

// repeated float mvMatrix = 3;
inline int DrawPacket::_internal_mvmatrix_size() const {
  return mvmatrix_.size();
}
inline int DrawPacket::mvmatrix_size() const {
  return _internal_mvmatrix_size();
}
inline void DrawPacket::clear_mvmatrix() {
  mvmatrix_.Clear();
}
inline float DrawPacket::_internal_mvmatrix(int index) const {
  return mvmatrix_.Get(index);
}
inline float DrawPacket::mvmatrix(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.mvMatrix)
  return _internal_mvmatrix(index);
}
inline void DrawPacket::set_mvmatrix(int index, float value) {
  mvmatrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.mvMatrix)
}
inline void DrawPacket::_internal_add_mvmatrix(float value) {
  mvmatrix_.Add(value);
}
inline void DrawPacket::add_mvmatrix(float value) {
  _internal_add_mvmatrix(value);
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.DrawPacket.mvMatrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawPacket::_internal_mvmatrix() const {
  return mvmatrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DrawPacket::mvmatrix() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.DrawPacket.mvMatrix)
  return _internal_mvmatrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawPacket::_internal_mutable_mvmatrix() {
  return &mvmatrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DrawPacket::mutable_mvmatrix() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.DrawPacket.mvMatrix)
  return _internal_mutable_mvmatrix();
}

// required uint32 totalRects = 4;
inline bool DrawPacket::_internal_has_totalrects() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DrawPacket::has_totalrects() const {
  return _internal_has_totalrects();
}
inline void DrawPacket::clear_totalrects() {
  totalrects_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawPacket::_internal_totalrects() const {
  return totalrects_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawPacket::totalrects() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.totalRects)
  return _internal_totalrects();
}
inline void DrawPacket::_internal_set_totalrects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  totalrects_ = value;
}
inline void DrawPacket::set_totalrects(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_totalrects(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.totalRects)
}

// repeated .mozilla.layers.layerscope.DrawPacket.Rect layerRect = 5;
inline int DrawPacket::_internal_layerrect_size() const {
  return layerrect_.size();
}
inline int DrawPacket::layerrect_size() const {
  return _internal_layerrect_size();
}
inline void DrawPacket::clear_layerrect() {
  layerrect_.Clear();
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::mutable_layerrect(int index) {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.DrawPacket.layerRect)
  return layerrect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >*
DrawPacket::mutable_layerrect() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.DrawPacket.layerRect)
  return &layerrect_;
}
inline const ::mozilla::layers::layerscope::DrawPacket_Rect& DrawPacket::_internal_layerrect(int index) const {
  return layerrect_.Get(index);
}
inline const ::mozilla::layers::layerscope::DrawPacket_Rect& DrawPacket::layerrect(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.layerRect)
  return _internal_layerrect(index);
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::_internal_add_layerrect() {
  return layerrect_.Add();
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::add_layerrect() {
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.DrawPacket.layerRect)
  return _internal_add_layerrect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >&
DrawPacket::layerrect() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.DrawPacket.layerRect)
  return layerrect_;
}

// required uint64 layerref = 6;
inline bool DrawPacket::_internal_has_layerref() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DrawPacket::has_layerref() const {
  return _internal_has_layerref();
}
inline void DrawPacket::clear_layerref() {
  layerref_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DrawPacket::_internal_layerref() const {
  return layerref_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DrawPacket::layerref() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.layerref)
  return _internal_layerref();
}
inline void DrawPacket::_internal_set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  layerref_ = value;
}
inline void DrawPacket::set_layerref(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_layerref(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.layerref)
}

// repeated uint32 texIDs = 7;
inline int DrawPacket::_internal_texids_size() const {
  return texids_.size();
}
inline int DrawPacket::texids_size() const {
  return _internal_texids_size();
}
inline void DrawPacket::clear_texids() {
  texids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawPacket::_internal_texids(int index) const {
  return texids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DrawPacket::texids(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.texIDs)
  return _internal_texids(index);
}
inline void DrawPacket::set_texids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  texids_.Set(index, value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.DrawPacket.texIDs)
}
inline void DrawPacket::_internal_add_texids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  texids_.Add(value);
}
inline void DrawPacket::add_texids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_texids(value);
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.DrawPacket.texIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DrawPacket::_internal_texids() const {
  return texids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
DrawPacket::texids() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.DrawPacket.texIDs)
  return _internal_texids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DrawPacket::_internal_mutable_texids() {
  return &texids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
DrawPacket::mutable_texids() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.DrawPacket.texIDs)
  return _internal_mutable_texids();
}

// repeated .mozilla.layers.layerscope.DrawPacket.Rect textureRect = 8;
inline int DrawPacket::_internal_texturerect_size() const {
  return texturerect_.size();
}
inline int DrawPacket::texturerect_size() const {
  return _internal_texturerect_size();
}
inline void DrawPacket::clear_texturerect() {
  texturerect_.Clear();
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::mutable_texturerect(int index) {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.DrawPacket.textureRect)
  return texturerect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >*
DrawPacket::mutable_texturerect() {
  // @@protoc_insertion_point(field_mutable_list:mozilla.layers.layerscope.DrawPacket.textureRect)
  return &texturerect_;
}
inline const ::mozilla::layers::layerscope::DrawPacket_Rect& DrawPacket::_internal_texturerect(int index) const {
  return texturerect_.Get(index);
}
inline const ::mozilla::layers::layerscope::DrawPacket_Rect& DrawPacket::texturerect(int index) const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.DrawPacket.textureRect)
  return _internal_texturerect(index);
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::_internal_add_texturerect() {
  return texturerect_.Add();
}
inline ::mozilla::layers::layerscope::DrawPacket_Rect* DrawPacket::add_texturerect() {
  // @@protoc_insertion_point(field_add:mozilla.layers.layerscope.DrawPacket.textureRect)
  return _internal_add_texturerect();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::mozilla::layers::layerscope::DrawPacket_Rect >&
DrawPacket::texturerect() const {
  // @@protoc_insertion_point(field_list:mozilla.layers.layerscope.DrawPacket.textureRect)
  return texturerect_;
}

// -------------------------------------------------------------------

// Packet

// required .mozilla.layers.layerscope.Packet.DataType type = 1;
inline bool Packet::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Packet::has_type() const {
  return _internal_has_type();
}
inline void Packet::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::mozilla::layers::layerscope::Packet_DataType Packet::_internal_type() const {
  return static_cast< ::mozilla::layers::layerscope::Packet_DataType >(type_);
}
inline ::mozilla::layers::layerscope::Packet_DataType Packet::type() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.type)
  return _internal_type();
}
inline void Packet::_internal_set_type(::mozilla::layers::layerscope::Packet_DataType value) {
  assert(::mozilla::layers::layerscope::Packet_DataType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  type_ = value;
}
inline void Packet::set_type(::mozilla::layers::layerscope::Packet_DataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.Packet.type)
}

// optional .mozilla.layers.layerscope.FramePacket frame = 2;
inline bool Packet::_internal_has_frame() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || frame_ != nullptr);
  return value;
}
inline bool Packet::has_frame() const {
  return _internal_has_frame();
}
inline void Packet::clear_frame() {
  if (frame_ != nullptr) frame_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::mozilla::layers::layerscope::FramePacket& Packet::_internal_frame() const {
  const ::mozilla::layers::layerscope::FramePacket* p = frame_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::FramePacket*>(
      &::mozilla::layers::layerscope::_FramePacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::FramePacket& Packet::frame() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.frame)
  return _internal_frame();
}
inline ::mozilla::layers::layerscope::FramePacket* Packet::release_frame() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.frame)
  _has_bits_[0] &= ~0x00000001u;
  ::mozilla::layers::layerscope::FramePacket* temp = frame_;
  frame_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::FramePacket* Packet::_internal_mutable_frame() {
  _has_bits_[0] |= 0x00000001u;
  if (frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::FramePacket>(GetArenaNoVirtual());
    frame_ = p;
  }
  return frame_;
}
inline ::mozilla::layers::layerscope::FramePacket* Packet::mutable_frame() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.frame)
  return _internal_mutable_frame();
}
inline void Packet::set_allocated_frame(::mozilla::layers::layerscope::FramePacket* frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete frame_;
  }
  if (frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_ = frame;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.frame)
}

// optional .mozilla.layers.layerscope.ColorPacket color = 3;
inline bool Packet::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || color_ != nullptr);
  return value;
}
inline bool Packet::has_color() const {
  return _internal_has_color();
}
inline void Packet::clear_color() {
  if (color_ != nullptr) color_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::mozilla::layers::layerscope::ColorPacket& Packet::_internal_color() const {
  const ::mozilla::layers::layerscope::ColorPacket* p = color_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::ColorPacket*>(
      &::mozilla::layers::layerscope::_ColorPacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::ColorPacket& Packet::color() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.color)
  return _internal_color();
}
inline ::mozilla::layers::layerscope::ColorPacket* Packet::release_color() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.color)
  _has_bits_[0] &= ~0x00000002u;
  ::mozilla::layers::layerscope::ColorPacket* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::ColorPacket* Packet::_internal_mutable_color() {
  _has_bits_[0] |= 0x00000002u;
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::ColorPacket>(GetArenaNoVirtual());
    color_ = p;
  }
  return color_;
}
inline ::mozilla::layers::layerscope::ColorPacket* Packet::mutable_color() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.color)
  return _internal_mutable_color();
}
inline void Packet::set_allocated_color(::mozilla::layers::layerscope::ColorPacket* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.color)
}

// optional .mozilla.layers.layerscope.TexturePacket texture = 4;
inline bool Packet::_internal_has_texture() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || texture_ != nullptr);
  return value;
}
inline bool Packet::has_texture() const {
  return _internal_has_texture();
}
inline void Packet::clear_texture() {
  if (texture_ != nullptr) texture_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::mozilla::layers::layerscope::TexturePacket& Packet::_internal_texture() const {
  const ::mozilla::layers::layerscope::TexturePacket* p = texture_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::TexturePacket*>(
      &::mozilla::layers::layerscope::_TexturePacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::TexturePacket& Packet::texture() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.texture)
  return _internal_texture();
}
inline ::mozilla::layers::layerscope::TexturePacket* Packet::release_texture() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.texture)
  _has_bits_[0] &= ~0x00000004u;
  ::mozilla::layers::layerscope::TexturePacket* temp = texture_;
  texture_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::TexturePacket* Packet::_internal_mutable_texture() {
  _has_bits_[0] |= 0x00000004u;
  if (texture_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::TexturePacket>(GetArenaNoVirtual());
    texture_ = p;
  }
  return texture_;
}
inline ::mozilla::layers::layerscope::TexturePacket* Packet::mutable_texture() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.texture)
  return _internal_mutable_texture();
}
inline void Packet::set_allocated_texture(::mozilla::layers::layerscope::TexturePacket* texture) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete texture_;
  }
  if (texture) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      texture = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, texture, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  texture_ = texture;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.texture)
}

// optional .mozilla.layers.layerscope.LayersPacket layers = 5;
inline bool Packet::_internal_has_layers() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || layers_ != nullptr);
  return value;
}
inline bool Packet::has_layers() const {
  return _internal_has_layers();
}
inline void Packet::clear_layers() {
  if (layers_ != nullptr) layers_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::mozilla::layers::layerscope::LayersPacket& Packet::_internal_layers() const {
  const ::mozilla::layers::layerscope::LayersPacket* p = layers_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::LayersPacket*>(
      &::mozilla::layers::layerscope::_LayersPacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::LayersPacket& Packet::layers() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.layers)
  return _internal_layers();
}
inline ::mozilla::layers::layerscope::LayersPacket* Packet::release_layers() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.layers)
  _has_bits_[0] &= ~0x00000008u;
  ::mozilla::layers::layerscope::LayersPacket* temp = layers_;
  layers_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::LayersPacket* Packet::_internal_mutable_layers() {
  _has_bits_[0] |= 0x00000008u;
  if (layers_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::LayersPacket>(GetArenaNoVirtual());
    layers_ = p;
  }
  return layers_;
}
inline ::mozilla::layers::layerscope::LayersPacket* Packet::mutable_layers() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.layers)
  return _internal_mutable_layers();
}
inline void Packet::set_allocated_layers(::mozilla::layers::layerscope::LayersPacket* layers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete layers_;
  }
  if (layers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      layers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layers, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  layers_ = layers;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.layers)
}

// optional .mozilla.layers.layerscope.MetaPacket meta = 6;
inline bool Packet::_internal_has_meta() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || meta_ != nullptr);
  return value;
}
inline bool Packet::has_meta() const {
  return _internal_has_meta();
}
inline void Packet::clear_meta() {
  if (meta_ != nullptr) meta_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::mozilla::layers::layerscope::MetaPacket& Packet::_internal_meta() const {
  const ::mozilla::layers::layerscope::MetaPacket* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::MetaPacket*>(
      &::mozilla::layers::layerscope::_MetaPacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::MetaPacket& Packet::meta() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.meta)
  return _internal_meta();
}
inline ::mozilla::layers::layerscope::MetaPacket* Packet::release_meta() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.meta)
  _has_bits_[0] &= ~0x00000010u;
  ::mozilla::layers::layerscope::MetaPacket* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::MetaPacket* Packet::_internal_mutable_meta() {
  _has_bits_[0] |= 0x00000010u;
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::MetaPacket>(GetArenaNoVirtual());
    meta_ = p;
  }
  return meta_;
}
inline ::mozilla::layers::layerscope::MetaPacket* Packet::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.meta)
  return _internal_mutable_meta();
}
inline void Packet::set_allocated_meta(::mozilla::layers::layerscope::MetaPacket* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.meta)
}

// optional .mozilla.layers.layerscope.DrawPacket draw = 7;
inline bool Packet::_internal_has_draw() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || draw_ != nullptr);
  return value;
}
inline bool Packet::has_draw() const {
  return _internal_has_draw();
}
inline void Packet::clear_draw() {
  if (draw_ != nullptr) draw_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::mozilla::layers::layerscope::DrawPacket& Packet::_internal_draw() const {
  const ::mozilla::layers::layerscope::DrawPacket* p = draw_;
  return p != nullptr ? *p : *reinterpret_cast<const ::mozilla::layers::layerscope::DrawPacket*>(
      &::mozilla::layers::layerscope::_DrawPacket_default_instance_);
}
inline const ::mozilla::layers::layerscope::DrawPacket& Packet::draw() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.Packet.draw)
  return _internal_draw();
}
inline ::mozilla::layers::layerscope::DrawPacket* Packet::release_draw() {
  // @@protoc_insertion_point(field_release:mozilla.layers.layerscope.Packet.draw)
  _has_bits_[0] &= ~0x00000020u;
  ::mozilla::layers::layerscope::DrawPacket* temp = draw_;
  draw_ = nullptr;
  return temp;
}
inline ::mozilla::layers::layerscope::DrawPacket* Packet::_internal_mutable_draw() {
  _has_bits_[0] |= 0x00000020u;
  if (draw_ == nullptr) {
    auto* p = CreateMaybeMessage<::mozilla::layers::layerscope::DrawPacket>(GetArenaNoVirtual());
    draw_ = p;
  }
  return draw_;
}
inline ::mozilla::layers::layerscope::DrawPacket* Packet::mutable_draw() {
  // @@protoc_insertion_point(field_mutable:mozilla.layers.layerscope.Packet.draw)
  return _internal_mutable_draw();
}
inline void Packet::set_allocated_draw(::mozilla::layers::layerscope::DrawPacket* draw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete draw_;
  }
  if (draw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      draw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, draw, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  draw_ = draw;
  // @@protoc_insertion_point(field_set_allocated:mozilla.layers.layerscope.Packet.draw)
}

// -------------------------------------------------------------------

// CommandPacket

// required .mozilla.layers.layerscope.CommandPacket.CmdType type = 1;
inline bool CommandPacket::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CommandPacket::has_type() const {
  return _internal_has_type();
}
inline void CommandPacket::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::mozilla::layers::layerscope::CommandPacket_CmdType CommandPacket::_internal_type() const {
  return static_cast< ::mozilla::layers::layerscope::CommandPacket_CmdType >(type_);
}
inline ::mozilla::layers::layerscope::CommandPacket_CmdType CommandPacket::type() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.CommandPacket.type)
  return _internal_type();
}
inline void CommandPacket::_internal_set_type(::mozilla::layers::layerscope::CommandPacket_CmdType value) {
  assert(::mozilla::layers::layerscope::CommandPacket_CmdType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void CommandPacket::set_type(::mozilla::layers::layerscope::CommandPacket_CmdType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.CommandPacket.type)
}

// optional bool value = 2;
inline bool CommandPacket::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CommandPacket::has_value() const {
  return _internal_has_value();
}
inline void CommandPacket::clear_value() {
  value_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool CommandPacket::_internal_value() const {
  return value_;
}
inline bool CommandPacket::value() const {
  // @@protoc_insertion_point(field_get:mozilla.layers.layerscope.CommandPacket.value)
  return _internal_value();
}
inline void CommandPacket::_internal_set_value(bool value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void CommandPacket::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mozilla.layers.layerscope.CommandPacket.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace layerscope
}  // namespace layers
}  // namespace mozilla

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mozilla::layers::layerscope::TexturePacket_Filter> : ::std::true_type {};
template <> struct is_proto_enum< ::mozilla::layers::layerscope::LayersPacket_Layer_LayerType> : ::std::true_type {};
template <> struct is_proto_enum< ::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect> : ::std::true_type {};
template <> struct is_proto_enum< ::mozilla::layers::layerscope::LayersPacket_Layer_Filter> : ::std::true_type {};
template <> struct is_proto_enum< ::mozilla::layers::layerscope::Packet_DataType> : ::std::true_type {};
template <> struct is_proto_enum< ::mozilla::layers::layerscope::CommandPacket_CmdType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_LayerScopePacket_2eproto
