// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LayerScopePacket.proto

#include "LayerScopePacket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorPacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawPacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawPacket_Rect_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FramePacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersPacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LayersPacket_Layer_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexturePacket_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Matrix_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Rect_LayerScopePacket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_LayerScopePacket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Size_LayerScopePacket_2eproto;
namespace mozilla {
namespace layers {
namespace layerscope {
class FramePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FramePacket> _instance;
} _FramePacket_default_instance_;
class ColorPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ColorPacket> _instance;
} _ColorPacket_default_instance_;
class TexturePacket_RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexturePacket_Rect> _instance;
} _TexturePacket_Rect_default_instance_;
class TexturePacket_SizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexturePacket_Size> _instance;
} _TexturePacket_Size_default_instance_;
class TexturePacket_MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexturePacket_Matrix> _instance;
} _TexturePacket_Matrix_default_instance_;
class TexturePacket_EffectMaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexturePacket_EffectMask> _instance;
} _TexturePacket_EffectMask_default_instance_;
class TexturePacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TexturePacket> _instance;
} _TexturePacket_default_instance_;
class LayersPacket_Layer_SizeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer_Size> _instance;
} _LayersPacket_Layer_Size_default_instance_;
class LayersPacket_Layer_RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer_Rect> _instance;
} _LayersPacket_Layer_Rect_default_instance_;
class LayersPacket_Layer_RegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer_Region> _instance;
} _LayersPacket_Layer_Region_default_instance_;
class LayersPacket_Layer_MatrixDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer_Matrix> _instance;
} _LayersPacket_Layer_Matrix_default_instance_;
class LayersPacket_Layer_ShadowDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer_Shadow> _instance;
} _LayersPacket_Layer_Shadow_default_instance_;
class LayersPacket_LayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket_Layer> _instance;
} _LayersPacket_Layer_default_instance_;
class LayersPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LayersPacket> _instance;
} _LayersPacket_default_instance_;
class MetaPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetaPacket> _instance;
} _MetaPacket_default_instance_;
class DrawPacket_RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawPacket_Rect> _instance;
} _DrawPacket_Rect_default_instance_;
class DrawPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DrawPacket> _instance;
} _DrawPacket_default_instance_;
class PacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Packet> _instance;
} _Packet_default_instance_;
class CommandPacketDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CommandPacket> _instance;
} _CommandPacket_default_instance_;
}  // namespace layerscope
}  // namespace layers
}  // namespace mozilla
static void InitDefaultsscc_info_ColorPacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_ColorPacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::ColorPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::ColorPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ColorPacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ColorPacket_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_CommandPacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_CommandPacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::CommandPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::CommandPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CommandPacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CommandPacket_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_DrawPacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_DrawPacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::DrawPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::DrawPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DrawPacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DrawPacket_LayerScopePacket_2eproto}, {
      &scc_info_DrawPacket_Rect_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_DrawPacket_Rect_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_DrawPacket_Rect_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::DrawPacket_Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::DrawPacket_Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DrawPacket_Rect_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DrawPacket_Rect_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_FramePacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_FramePacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::FramePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::FramePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FramePacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FramePacket_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_LayersPacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersPacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LayersPacket_LayerScopePacket_2eproto}, {
      &scc_info_LayersPacket_Layer_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_LayersPacket_Layer_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_LayersPacket_Layer_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_LayersPacket_Layer_LayerScopePacket_2eproto}, {
      &scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_Matrix_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_Rect_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer_Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer_Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_Region_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer_Region();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer_Region::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto}, {
      &scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_Shadow_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto}, {
      &scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_LayersPacket_Layer_Size_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::LayersPacket_Layer_Size();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::LayersPacket_Layer_Size::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_MetaPacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_MetaPacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::MetaPacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::MetaPacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetaPacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetaPacket_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_Packet_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_Packet_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::Packet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::Packet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Packet_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Packet_LayerScopePacket_2eproto}, {
      &scc_info_FramePacket_LayerScopePacket_2eproto.base,
      &scc_info_ColorPacket_LayerScopePacket_2eproto.base,
      &scc_info_TexturePacket_LayerScopePacket_2eproto.base,
      &scc_info_LayersPacket_LayerScopePacket_2eproto.base,
      &scc_info_MetaPacket_LayerScopePacket_2eproto.base,
      &scc_info_DrawPacket_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_TexturePacket_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_TexturePacket_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::TexturePacket();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::TexturePacket::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexturePacket_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TexturePacket_LayerScopePacket_2eproto}, {
      &scc_info_TexturePacket_Rect_LayerScopePacket_2eproto.base,
      &scc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_TexturePacket_EffectMask_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::TexturePacket_EffectMask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::TexturePacket_EffectMask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto}, {
      &scc_info_TexturePacket_Size_LayerScopePacket_2eproto.base,
      &scc_info_TexturePacket_Matrix_LayerScopePacket_2eproto.base,}};

static void InitDefaultsscc_info_TexturePacket_Matrix_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_TexturePacket_Matrix_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::TexturePacket_Matrix();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::TexturePacket_Matrix::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Matrix_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexturePacket_Matrix_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_TexturePacket_Rect_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_TexturePacket_Rect_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::TexturePacket_Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::TexturePacket_Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Rect_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexturePacket_Rect_LayerScopePacket_2eproto}, {}};

static void InitDefaultsscc_info_TexturePacket_Size_LayerScopePacket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mozilla::layers::layerscope::_TexturePacket_Size_default_instance_;
    new (ptr) ::mozilla::layers::layerscope::TexturePacket_Size();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mozilla::layers::layerscope::TexturePacket_Size::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TexturePacket_Size_LayerScopePacket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TexturePacket_Size_LayerScopePacket_2eproto}, {}};

namespace mozilla {
namespace layers {
namespace layerscope {
bool TexturePacket_Filter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> TexturePacket_Filter_strings[3] = {};

static const char TexturePacket_Filter_names[] =
  "GOOD"
  "LINEAR"
  "POINT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry TexturePacket_Filter_entries[] = {
  { {TexturePacket_Filter_names + 0, 4}, 0 },
  { {TexturePacket_Filter_names + 4, 6}, 1 },
  { {TexturePacket_Filter_names + 10, 5}, 2 },
};

static const int TexturePacket_Filter_entries_by_number[] = {
  0, // 0 -> GOOD
  1, // 1 -> LINEAR
  2, // 2 -> POINT
};

const std::string& TexturePacket_Filter_Name(
    TexturePacket_Filter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          TexturePacket_Filter_entries,
          TexturePacket_Filter_entries_by_number,
          3, TexturePacket_Filter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      TexturePacket_Filter_entries,
      TexturePacket_Filter_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     TexturePacket_Filter_strings[idx].get();
}
bool TexturePacket_Filter_Parse(
    const std::string& name, TexturePacket_Filter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      TexturePacket_Filter_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<TexturePacket_Filter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TexturePacket_Filter TexturePacket::GOOD;
constexpr TexturePacket_Filter TexturePacket::LINEAR;
constexpr TexturePacket_Filter TexturePacket::POINT;
constexpr TexturePacket_Filter TexturePacket::Filter_MIN;
constexpr TexturePacket_Filter TexturePacket::Filter_MAX;
constexpr int TexturePacket::Filter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LayersPacket_Layer_LayerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayersPacket_Layer_LayerType_strings[10] = {};

static const char LayersPacket_Layer_LayerType_names[] =
  "CanvasLayer"
  "ColorLayer"
  "ContainerLayer"
  "DisplayItemLayer"
  "ImageLayer"
  "LayerManager"
  "PaintedLayer"
  "ReadbackLayer"
  "RefLayer"
  "UnknownLayer";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayersPacket_Layer_LayerType_entries[] = {
  { {LayersPacket_Layer_LayerType_names + 0, 11}, 4 },
  { {LayersPacket_Layer_LayerType_names + 11, 10}, 6 },
  { {LayersPacket_Layer_LayerType_names + 21, 14}, 2 },
  { {LayersPacket_Layer_LayerType_names + 35, 16}, 10 },
  { {LayersPacket_Layer_LayerType_names + 51, 10}, 5 },
  { {LayersPacket_Layer_LayerType_names + 61, 12}, 1 },
  { {LayersPacket_Layer_LayerType_names + 73, 12}, 3 },
  { {LayersPacket_Layer_LayerType_names + 85, 13}, 9 },
  { {LayersPacket_Layer_LayerType_names + 98, 8}, 8 },
  { {LayersPacket_Layer_LayerType_names + 106, 12}, 0 },
};

static const int LayersPacket_Layer_LayerType_entries_by_number[] = {
  9, // 0 -> UnknownLayer
  5, // 1 -> LayerManager
  2, // 2 -> ContainerLayer
  6, // 3 -> PaintedLayer
  0, // 4 -> CanvasLayer
  4, // 5 -> ImageLayer
  1, // 6 -> ColorLayer
  8, // 8 -> RefLayer
  7, // 9 -> ReadbackLayer
  3, // 10 -> DisplayItemLayer
};

const std::string& LayersPacket_Layer_LayerType_Name(
    LayersPacket_Layer_LayerType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayersPacket_Layer_LayerType_entries,
          LayersPacket_Layer_LayerType_entries_by_number,
          10, LayersPacket_Layer_LayerType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayersPacket_Layer_LayerType_entries,
      LayersPacket_Layer_LayerType_entries_by_number,
      10, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayersPacket_Layer_LayerType_strings[idx].get();
}
bool LayersPacket_Layer_LayerType_Parse(
    const std::string& name, LayersPacket_Layer_LayerType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayersPacket_Layer_LayerType_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<LayersPacket_Layer_LayerType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::UnknownLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::LayerManager;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::ContainerLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::PaintedLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::CanvasLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::ImageLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::ColorLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::RefLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::ReadbackLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::DisplayItemLayer;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::LayerType_MIN;
constexpr LayersPacket_Layer_LayerType LayersPacket_Layer::LayerType_MAX;
constexpr int LayersPacket_Layer::LayerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LayersPacket_Layer_ScrollingDirect_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayersPacket_Layer_ScrollingDirect_strings[2] = {};

static const char LayersPacket_Layer_ScrollingDirect_names[] =
  "HORIZONTAL"
  "VERTICAL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayersPacket_Layer_ScrollingDirect_entries[] = {
  { {LayersPacket_Layer_ScrollingDirect_names + 0, 10}, 2 },
  { {LayersPacket_Layer_ScrollingDirect_names + 10, 8}, 1 },
};

static const int LayersPacket_Layer_ScrollingDirect_entries_by_number[] = {
  1, // 1 -> VERTICAL
  0, // 2 -> HORIZONTAL
};

const std::string& LayersPacket_Layer_ScrollingDirect_Name(
    LayersPacket_Layer_ScrollingDirect value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayersPacket_Layer_ScrollingDirect_entries,
          LayersPacket_Layer_ScrollingDirect_entries_by_number,
          2, LayersPacket_Layer_ScrollingDirect_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayersPacket_Layer_ScrollingDirect_entries,
      LayersPacket_Layer_ScrollingDirect_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayersPacket_Layer_ScrollingDirect_strings[idx].get();
}
bool LayersPacket_Layer_ScrollingDirect_Parse(
    const std::string& name, LayersPacket_Layer_ScrollingDirect* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayersPacket_Layer_ScrollingDirect_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<LayersPacket_Layer_ScrollingDirect>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::VERTICAL;
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::HORIZONTAL;
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::ScrollingDirect_MIN;
constexpr LayersPacket_Layer_ScrollingDirect LayersPacket_Layer::ScrollingDirect_MAX;
constexpr int LayersPacket_Layer::ScrollingDirect_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool LayersPacket_Layer_Filter_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> LayersPacket_Layer_Filter_strings[9] = {};

static const char LayersPacket_Layer_Filter_names[] =
  "FILTER_BEST"
  "FILTER_BILINEAR"
  "FILTER_FAST"
  "FILTER_GAUSSIAN"
  "FILTER_GOOD"
  "FILTER_LINEAR"
  "FILTER_NEAREST"
  "FILTER_POINT"
  "FILTER_SENTINEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry LayersPacket_Layer_Filter_entries[] = {
  { {LayersPacket_Layer_Filter_names + 0, 11}, 2 },
  { {LayersPacket_Layer_Filter_names + 11, 15}, 4 },
  { {LayersPacket_Layer_Filter_names + 26, 11}, 0 },
  { {LayersPacket_Layer_Filter_names + 37, 15}, 5 },
  { {LayersPacket_Layer_Filter_names + 52, 11}, 1 },
  { {LayersPacket_Layer_Filter_names + 63, 13}, 7 },
  { {LayersPacket_Layer_Filter_names + 76, 14}, 3 },
  { {LayersPacket_Layer_Filter_names + 90, 12}, 8 },
  { {LayersPacket_Layer_Filter_names + 102, 15}, 6 },
};

static const int LayersPacket_Layer_Filter_entries_by_number[] = {
  2, // 0 -> FILTER_FAST
  4, // 1 -> FILTER_GOOD
  0, // 2 -> FILTER_BEST
  6, // 3 -> FILTER_NEAREST
  1, // 4 -> FILTER_BILINEAR
  3, // 5 -> FILTER_GAUSSIAN
  8, // 6 -> FILTER_SENTINEL
  5, // 7 -> FILTER_LINEAR
  7, // 8 -> FILTER_POINT
};

const std::string& LayersPacket_Layer_Filter_Name(
    LayersPacket_Layer_Filter value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          LayersPacket_Layer_Filter_entries,
          LayersPacket_Layer_Filter_entries_by_number,
          9, LayersPacket_Layer_Filter_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      LayersPacket_Layer_Filter_entries,
      LayersPacket_Layer_Filter_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     LayersPacket_Layer_Filter_strings[idx].get();
}
bool LayersPacket_Layer_Filter_Parse(
    const std::string& name, LayersPacket_Layer_Filter* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      LayersPacket_Layer_Filter_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<LayersPacket_Layer_Filter>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_FAST;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_GOOD;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_BEST;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_NEAREST;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_BILINEAR;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_GAUSSIAN;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_SENTINEL;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_LINEAR;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::FILTER_POINT;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::Filter_MIN;
constexpr LayersPacket_Layer_Filter LayersPacket_Layer::Filter_MAX;
constexpr int LayersPacket_Layer::Filter_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool Packet_DataType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Packet_DataType_strings[7] = {};

static const char Packet_DataType_names[] =
  "COLOR"
  "DRAW"
  "FRAMEEND"
  "FRAMESTART"
  "LAYERS"
  "META"
  "TEXTURE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Packet_DataType_entries[] = {
  { {Packet_DataType_names + 0, 5}, 3 },
  { {Packet_DataType_names + 5, 4}, 7 },
  { {Packet_DataType_names + 9, 8}, 2 },
  { {Packet_DataType_names + 17, 10}, 1 },
  { {Packet_DataType_names + 27, 6}, 5 },
  { {Packet_DataType_names + 33, 4}, 6 },
  { {Packet_DataType_names + 37, 7}, 4 },
};

static const int Packet_DataType_entries_by_number[] = {
  3, // 1 -> FRAMESTART
  2, // 2 -> FRAMEEND
  0, // 3 -> COLOR
  6, // 4 -> TEXTURE
  4, // 5 -> LAYERS
  5, // 6 -> META
  1, // 7 -> DRAW
};

const std::string& Packet_DataType_Name(
    Packet_DataType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Packet_DataType_entries,
          Packet_DataType_entries_by_number,
          7, Packet_DataType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Packet_DataType_entries,
      Packet_DataType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Packet_DataType_strings[idx].get();
}
bool Packet_DataType_Parse(
    const std::string& name, Packet_DataType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Packet_DataType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<Packet_DataType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Packet_DataType Packet::FRAMESTART;
constexpr Packet_DataType Packet::FRAMEEND;
constexpr Packet_DataType Packet::COLOR;
constexpr Packet_DataType Packet::TEXTURE;
constexpr Packet_DataType Packet::LAYERS;
constexpr Packet_DataType Packet::META;
constexpr Packet_DataType Packet::DRAW;
constexpr Packet_DataType Packet::DataType_MIN;
constexpr Packet_DataType Packet::DataType_MAX;
constexpr int Packet::DataType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
bool CommandPacket_CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CommandPacket_CmdType_strings[3] = {};

static const char CommandPacket_CmdType_names[] =
  "LAYERS_BUFFER"
  "LAYERS_TREE"
  "NO_OP";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CommandPacket_CmdType_entries[] = {
  { {CommandPacket_CmdType_names + 0, 13}, 2 },
  { {CommandPacket_CmdType_names + 13, 11}, 1 },
  { {CommandPacket_CmdType_names + 24, 5}, 0 },
};

static const int CommandPacket_CmdType_entries_by_number[] = {
  2, // 0 -> NO_OP
  1, // 1 -> LAYERS_TREE
  0, // 2 -> LAYERS_BUFFER
};

const std::string& CommandPacket_CmdType_Name(
    CommandPacket_CmdType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CommandPacket_CmdType_entries,
          CommandPacket_CmdType_entries_by_number,
          3, CommandPacket_CmdType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CommandPacket_CmdType_entries,
      CommandPacket_CmdType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CommandPacket_CmdType_strings[idx].get();
}
bool CommandPacket_CmdType_Parse(
    const std::string& name, CommandPacket_CmdType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CommandPacket_CmdType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CommandPacket_CmdType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CommandPacket_CmdType CommandPacket::NO_OP;
constexpr CommandPacket_CmdType CommandPacket::LAYERS_TREE;
constexpr CommandPacket_CmdType CommandPacket::LAYERS_BUFFER;
constexpr CommandPacket_CmdType CommandPacket::CmdType_MIN;
constexpr CommandPacket_CmdType CommandPacket::CmdType_MAX;
constexpr int CommandPacket::CmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FramePacket::InitAsDefaultInstance() {
}
class FramePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<FramePacket>()._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FramePacket::FramePacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.FramePacket)
}
FramePacket::FramePacket(const FramePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_, &from.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&scale_) -
    reinterpret_cast<char*>(&value_)) + sizeof(scale_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.FramePacket)
}

void FramePacket::SharedCtor() {
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scale_) -
      reinterpret_cast<char*>(&value_)) + sizeof(scale_));
}

FramePacket::~FramePacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.FramePacket)
  SharedDtor();
}

void FramePacket::SharedDtor() {
}

void FramePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FramePacket& FramePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FramePacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void FramePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.FramePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scale_) -
        reinterpret_cast<char*>(&value_)) + sizeof(scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* FramePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float scale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_scale(&has_bits);
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FramePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.FramePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // optional float scale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.FramePacket)
  return target;
}

size_t FramePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.FramePacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_value());
    }

    // optional float scale = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FramePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const FramePacket*>(
      &from));
}

void FramePacket::MergeFrom(const FramePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.FramePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000002u) {
      scale_ = from.scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FramePacket::CopyFrom(const FramePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.FramePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FramePacket::IsInitialized() const {
  return true;
}

void FramePacket::InternalSwap(FramePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(scale_, other->scale_);
}

std::string FramePacket::GetTypeName() const {
  return "mozilla.layers.layerscope.FramePacket";
}


// ===================================================================

void ColorPacket::InitAsDefaultInstance() {
}
class ColorPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ColorPacket>()._has_bits_);
  static void set_has_layerref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ColorPacket::ColorPacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.ColorPacket)
}
ColorPacket::ColorPacket(const ColorPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&layerref_, &from.layerref_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&layerref_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.ColorPacket)
}

void ColorPacket::SharedCtor() {
  ::memset(&layerref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&layerref_)) + sizeof(color_));
}

ColorPacket::~ColorPacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.ColorPacket)
  SharedDtor();
}

void ColorPacket::SharedDtor() {
}

void ColorPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ColorPacket& ColorPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ColorPacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void ColorPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.ColorPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&layerref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&layerref_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ColorPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 layerref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layerref(&has_bits);
          layerref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ColorPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.ColorPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 layerref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_layerref(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.ColorPacket)
  return target;
}

size_t ColorPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.ColorPacket)
  size_t total_size = 0;

  // required uint64 layerref = 1;
  if (_internal_has_layerref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_layerref());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColorPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ColorPacket*>(
      &from));
}

void ColorPacket::MergeFrom(const ColorPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.ColorPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      layerref_ = from.layerref_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColorPacket::CopyFrom(const ColorPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.ColorPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ColorPacket::InternalSwap(ColorPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(layerref_, other->layerref_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(color_, other->color_);
}

std::string ColorPacket::GetTypeName() const {
  return "mozilla.layers.layerscope.ColorPacket";
}


// ===================================================================

void TexturePacket_Rect::InitAsDefaultInstance() {
}
class TexturePacket_Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<TexturePacket_Rect>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

TexturePacket_Rect::TexturePacket_Rect()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.TexturePacket.Rect)
}
TexturePacket_Rect::TexturePacket_Rect(const TexturePacket_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.TexturePacket.Rect)
}

void TexturePacket_Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

TexturePacket_Rect::~TexturePacket_Rect() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.TexturePacket.Rect)
  SharedDtor();
}

void TexturePacket_Rect::SharedDtor() {
}

void TexturePacket_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexturePacket_Rect& TexturePacket_Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexturePacket_Rect_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void TexturePacket_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.TexturePacket.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&x_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TexturePacket_Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexturePacket_Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.TexturePacket.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // optional float w = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  // optional float h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.TexturePacket.Rect)
  return target;
}

size_t TexturePacket_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.TexturePacket.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float w = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float h = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexturePacket_Rect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexturePacket_Rect*>(
      &from));
}

void TexturePacket_Rect::MergeFrom(const TexturePacket_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.TexturePacket.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexturePacket_Rect::CopyFrom(const TexturePacket_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.TexturePacket.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturePacket_Rect::IsInitialized() const {
  return true;
}

void TexturePacket_Rect::InternalSwap(TexturePacket_Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string TexturePacket_Rect::GetTypeName() const {
  return "mozilla.layers.layerscope.TexturePacket.Rect";
}


// ===================================================================

void TexturePacket_Size::InitAsDefaultInstance() {
}
class TexturePacket_Size::_Internal {
 public:
  using HasBits = decltype(std::declval<TexturePacket_Size>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TexturePacket_Size::TexturePacket_Size()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.TexturePacket.Size)
}
TexturePacket_Size::TexturePacket_Size(const TexturePacket_Size& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.TexturePacket.Size)
}

void TexturePacket_Size::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

TexturePacket_Size::~TexturePacket_Size() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.TexturePacket.Size)
  SharedDtor();
}

void TexturePacket_Size::SharedDtor() {
}

void TexturePacket_Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexturePacket_Size& TexturePacket_Size::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexturePacket_Size_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void TexturePacket_Size::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.TexturePacket.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&w_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TexturePacket_Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexturePacket_Size::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.TexturePacket.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_w(), target);
  }

  // optional int32 h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.TexturePacket.Size)
  return target;
}

size_t TexturePacket_Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.TexturePacket.Size)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_w());
    }

    // optional int32 h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_h());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexturePacket_Size::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexturePacket_Size*>(
      &from));
}

void TexturePacket_Size::MergeFrom(const TexturePacket_Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.TexturePacket.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexturePacket_Size::CopyFrom(const TexturePacket_Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.TexturePacket.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturePacket_Size::IsInitialized() const {
  return true;
}

void TexturePacket_Size::InternalSwap(TexturePacket_Size* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string TexturePacket_Size::GetTypeName() const {
  return "mozilla.layers.layerscope.TexturePacket.Size";
}


// ===================================================================

void TexturePacket_Matrix::InitAsDefaultInstance() {
}
class TexturePacket_Matrix::_Internal {
 public:
  using HasBits = decltype(std::declval<TexturePacket_Matrix>()._has_bits_);
  static void set_has_is2d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

TexturePacket_Matrix::TexturePacket_Matrix()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.TexturePacket.Matrix)
}
TexturePacket_Matrix::TexturePacket_Matrix(const TexturePacket_Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      m_(from.m_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is2d_, &from.is2d_,
    static_cast<size_t>(reinterpret_cast<char*>(&isid_) -
    reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.TexturePacket.Matrix)
}

void TexturePacket_Matrix::SharedCtor() {
  ::memset(&is2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isid_) -
      reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
}

TexturePacket_Matrix::~TexturePacket_Matrix() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.TexturePacket.Matrix)
  SharedDtor();
}

void TexturePacket_Matrix::SharedDtor() {
}

void TexturePacket_Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexturePacket_Matrix& TexturePacket_Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexturePacket_Matrix_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void TexturePacket_Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.TexturePacket.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_.Clear();
  ::memset(&is2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isid_) -
      reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TexturePacket_Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is2D = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is2d(&has_bits);
          is2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isid(&has_bits);
          isid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexturePacket_Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.TexturePacket.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is2D = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is2d(), target);
  }

  // optional bool isId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isid(), target);
  }

  // repeated float m = 3;
  for (int i = 0, n = this->_internal_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.TexturePacket.Matrix)
  return target;
}

size_t TexturePacket_Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.TexturePacket.Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_m_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is2D = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool isId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexturePacket_Matrix::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexturePacket_Matrix*>(
      &from));
}

void TexturePacket_Matrix::MergeFrom(const TexturePacket_Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.TexturePacket.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_.MergeFrom(from.m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is2d_ = from.is2d_;
    }
    if (cached_has_bits & 0x00000002u) {
      isid_ = from.isid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexturePacket_Matrix::CopyFrom(const TexturePacket_Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.TexturePacket.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturePacket_Matrix::IsInitialized() const {
  return true;
}

void TexturePacket_Matrix::InternalSwap(TexturePacket_Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_.InternalSwap(&other->m_);
  swap(is2d_, other->is2d_);
  swap(isid_, other->isid_);
}

std::string TexturePacket_Matrix::GetTypeName() const {
  return "mozilla.layers.layerscope.TexturePacket.Matrix";
}


// ===================================================================

void TexturePacket_EffectMask::InitAsDefaultInstance() {
  ::mozilla::layers::layerscope::_TexturePacket_EffectMask_default_instance_._instance.get_mutable()->msize_ = const_cast< ::mozilla::layers::layerscope::TexturePacket_Size*>(
      ::mozilla::layers::layerscope::TexturePacket_Size::internal_default_instance());
  ::mozilla::layers::layerscope::_TexturePacket_EffectMask_default_instance_._instance.get_mutable()->mmasktransform_ = const_cast< ::mozilla::layers::layerscope::TexturePacket_Matrix*>(
      ::mozilla::layers::layerscope::TexturePacket_Matrix::internal_default_instance());
}
class TexturePacket_EffectMask::_Internal {
 public:
  using HasBits = decltype(std::declval<TexturePacket_EffectMask>()._has_bits_);
  static void set_has_mis3d(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozilla::layers::layerscope::TexturePacket_Size& msize(const TexturePacket_EffectMask* msg);
  static void set_has_msize(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozilla::layers::layerscope::TexturePacket_Matrix& mmasktransform(const TexturePacket_EffectMask* msg);
  static void set_has_mmasktransform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::mozilla::layers::layerscope::TexturePacket_Size&
TexturePacket_EffectMask::_Internal::msize(const TexturePacket_EffectMask* msg) {
  return *msg->msize_;
}
const ::mozilla::layers::layerscope::TexturePacket_Matrix&
TexturePacket_EffectMask::_Internal::mmasktransform(const TexturePacket_EffectMask* msg) {
  return *msg->mmasktransform_;
}
TexturePacket_EffectMask::TexturePacket_EffectMask()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.TexturePacket.EffectMask)
}
TexturePacket_EffectMask::TexturePacket_EffectMask(const TexturePacket_EffectMask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_msize()) {
    msize_ = new ::mozilla::layers::layerscope::TexturePacket_Size(*from.msize_);
  } else {
    msize_ = nullptr;
  }
  if (from._internal_has_mmasktransform()) {
    mmasktransform_ = new ::mozilla::layers::layerscope::TexturePacket_Matrix(*from.mmasktransform_);
  } else {
    mmasktransform_ = nullptr;
  }
  mis3d_ = from.mis3d_;
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.TexturePacket.EffectMask)
}

void TexturePacket_EffectMask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto.base);
  ::memset(&msize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mis3d_) -
      reinterpret_cast<char*>(&msize_)) + sizeof(mis3d_));
}

TexturePacket_EffectMask::~TexturePacket_EffectMask() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.TexturePacket.EffectMask)
  SharedDtor();
}

void TexturePacket_EffectMask::SharedDtor() {
  if (this != internal_default_instance()) delete msize_;
  if (this != internal_default_instance()) delete mmasktransform_;
}

void TexturePacket_EffectMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexturePacket_EffectMask& TexturePacket_EffectMask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexturePacket_EffectMask_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void TexturePacket_EffectMask::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.TexturePacket.EffectMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(msize_ != nullptr);
      msize_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mmasktransform_ != nullptr);
      mmasktransform_->Clear();
    }
  }
  mis3d_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TexturePacket_EffectMask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool mIs3D = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mis3d(&has_bits);
          mis3d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket.Size mSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_msize(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket.Matrix mMaskTransform = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_mmasktransform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexturePacket_EffectMask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.TexturePacket.EffectMask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool mIs3D = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_mis3d(), target);
  }

  // optional .mozilla.layers.layerscope.TexturePacket.Size mSize = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::msize(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.TexturePacket.Matrix mMaskTransform = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::mmasktransform(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.TexturePacket.EffectMask)
  return target;
}

size_t TexturePacket_EffectMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.TexturePacket.EffectMask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mozilla.layers.layerscope.TexturePacket.Size mSize = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msize_);
    }

    // optional .mozilla.layers.layerscope.TexturePacket.Matrix mMaskTransform = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mmasktransform_);
    }

    // optional bool mIs3D = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexturePacket_EffectMask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexturePacket_EffectMask*>(
      &from));
}

void TexturePacket_EffectMask::MergeFrom(const TexturePacket_EffectMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.TexturePacket.EffectMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_msize()->::mozilla::layers::layerscope::TexturePacket_Size::MergeFrom(from._internal_msize());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mmasktransform()->::mozilla::layers::layerscope::TexturePacket_Matrix::MergeFrom(from._internal_mmasktransform());
    }
    if (cached_has_bits & 0x00000004u) {
      mis3d_ = from.mis3d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexturePacket_EffectMask::CopyFrom(const TexturePacket_EffectMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.TexturePacket.EffectMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturePacket_EffectMask::IsInitialized() const {
  return true;
}

void TexturePacket_EffectMask::InternalSwap(TexturePacket_EffectMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msize_, other->msize_);
  swap(mmasktransform_, other->mmasktransform_);
  swap(mis3d_, other->mis3d_);
}

std::string TexturePacket_EffectMask::GetTypeName() const {
  return "mozilla.layers.layerscope.TexturePacket.EffectMask";
}


// ===================================================================

void TexturePacket::InitAsDefaultInstance() {
  ::mozilla::layers::layerscope::_TexturePacket_default_instance_._instance.get_mutable()->mtexturecoords_ = const_cast< ::mozilla::layers::layerscope::TexturePacket_Rect*>(
      ::mozilla::layers::layerscope::TexturePacket_Rect::internal_default_instance());
  ::mozilla::layers::layerscope::_TexturePacket_default_instance_._instance.get_mutable()->mask_ = const_cast< ::mozilla::layers::layerscope::TexturePacket_EffectMask*>(
      ::mozilla::layers::layerscope::TexturePacket_EffectMask::internal_default_instance());
}
class TexturePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<TexturePacket>()._has_bits_);
  static void set_has_layerref(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_stride(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dataformat(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_glcontext(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozilla::layers::layerscope::TexturePacket_Rect& mtexturecoords(const TexturePacket* msg);
  static void set_has_mtexturecoords(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mpremultiplied(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_mfilter(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_ismask(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::mozilla::layers::layerscope::TexturePacket_EffectMask& mask(const TexturePacket* msg);
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mozilla::layers::layerscope::TexturePacket_Rect&
TexturePacket::_Internal::mtexturecoords(const TexturePacket* msg) {
  return *msg->mtexturecoords_;
}
const ::mozilla::layers::layerscope::TexturePacket_EffectMask&
TexturePacket::_Internal::mask(const TexturePacket* msg) {
  return *msg->mask_;
}
TexturePacket::TexturePacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.TexturePacket)
}
TexturePacket::TexturePacket(const TexturePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_data()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from._internal_has_mtexturecoords()) {
    mtexturecoords_ = new ::mozilla::layers::layerscope::TexturePacket_Rect(*from.mtexturecoords_);
  } else {
    mtexturecoords_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new ::mozilla::layers::layerscope::TexturePacket_EffectMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  ::memcpy(&layerref_, &from.layerref_,
    static_cast<size_t>(reinterpret_cast<char*>(&ismask_) -
    reinterpret_cast<char*>(&layerref_)) + sizeof(ismask_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.TexturePacket)
}

void TexturePacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TexturePacket_LayerScopePacket_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mtexturecoords_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ismask_) -
      reinterpret_cast<char*>(&mtexturecoords_)) + sizeof(ismask_));
}

TexturePacket::~TexturePacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.TexturePacket)
  SharedDtor();
}

void TexturePacket::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete mtexturecoords_;
  if (this != internal_default_instance()) delete mask_;
}

void TexturePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TexturePacket& TexturePacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TexturePacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void TexturePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.TexturePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(mtexturecoords_ != nullptr);
      mtexturecoords_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(mask_ != nullptr);
      mask_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&layerref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&name_) -
        reinterpret_cast<char*>(&layerref_)) + sizeof(name_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&target_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ismask_) -
        reinterpret_cast<char*>(&target_)) + sizeof(ismask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* TexturePacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 layerref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_layerref(&has_bits);
          layerref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 stride = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stride(&has_bits);
          stride_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_name(&has_bits);
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_target(&has_bits);
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dataformat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_dataformat(&has_bits);
          dataformat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 glcontext = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_glcontext(&has_bits);
          glcontext_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket.Rect mTextureCoords = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_mtexturecoords(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool mPremultiplied = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_mpremultiplied(&has_bits);
          mpremultiplied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket.Filter mFilter = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::TexturePacket_Filter_IsValid(val))) {
            _internal_set_mfilter(static_cast<::mozilla::layers::layerscope::TexturePacket_Filter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool isMask = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_ismask(&has_bits);
          ismask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket.EffectMask mask = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TexturePacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.TexturePacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 layerref = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_layerref(), target);
  }

  // optional uint32 width = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 height = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // optional uint32 stride = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_stride(), target);
  }

  // optional uint32 name = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_name(), target);
  }

  // optional uint32 target = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_target(), target);
  }

  // optional uint32 dataformat = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dataformat(), target);
  }

  // optional uint64 glcontext = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_glcontext(), target);
  }

  // optional bytes data = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_data(), target);
  }

  // optional .mozilla.layers.layerscope.TexturePacket.Rect mTextureCoords = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::mtexturecoords(this), target, stream);
  }

  // optional bool mPremultiplied = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_mpremultiplied(), target);
  }

  // optional .mozilla.layers.layerscope.TexturePacket.Filter mFilter = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_mfilter(), target);
  }

  // optional bool isMask = 20;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_ismask(), target);
  }

  // optional .mozilla.layers.layerscope.TexturePacket.EffectMask mask = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.TexturePacket)
  return target;
}

size_t TexturePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.TexturePacket)
  size_t total_size = 0;

  // required uint64 layerref = 1;
  if (_internal_has_layerref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_layerref());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes data = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional .mozilla.layers.layerscope.TexturePacket.Rect mTextureCoords = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mtexturecoords_);
    }

    // optional .mozilla.layers.layerscope.TexturePacket.EffectMask mask = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mask_);
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_width());
    }

    // optional uint32 height = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_height());
    }

    // optional uint32 stride = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_stride());
    }

    // optional uint32 name = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_name());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 target = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target());
    }

    // optional uint32 dataformat = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dataformat());
    }

    // optional uint64 glcontext = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_glcontext());
    }

    // optional .mozilla.layers.layerscope.TexturePacket.Filter mFilter = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mfilter());
    }

    // optional bool mPremultiplied = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool isMask = 20;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TexturePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const TexturePacket*>(
      &from));
}

void TexturePacket::MergeFrom(const TexturePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.TexturePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_mtexturecoords()->::mozilla::layers::layerscope::TexturePacket_Rect::MergeFrom(from._internal_mtexturecoords());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_mask()->::mozilla::layers::layerscope::TexturePacket_EffectMask::MergeFrom(from._internal_mask());
    }
    if (cached_has_bits & 0x00000008u) {
      layerref_ = from.layerref_;
    }
    if (cached_has_bits & 0x00000010u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      stride_ = from.stride_;
    }
    if (cached_has_bits & 0x00000080u) {
      name_ = from.name_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      target_ = from.target_;
    }
    if (cached_has_bits & 0x00000200u) {
      dataformat_ = from.dataformat_;
    }
    if (cached_has_bits & 0x00000400u) {
      glcontext_ = from.glcontext_;
    }
    if (cached_has_bits & 0x00000800u) {
      mfilter_ = from.mfilter_;
    }
    if (cached_has_bits & 0x00001000u) {
      mpremultiplied_ = from.mpremultiplied_;
    }
    if (cached_has_bits & 0x00002000u) {
      ismask_ = from.ismask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TexturePacket::CopyFrom(const TexturePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.TexturePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TexturePacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;
  return true;
}

void TexturePacket::InternalSwap(TexturePacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mtexturecoords_, other->mtexturecoords_);
  swap(mask_, other->mask_);
  swap(layerref_, other->layerref_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(stride_, other->stride_);
  swap(name_, other->name_);
  swap(target_, other->target_);
  swap(dataformat_, other->dataformat_);
  swap(glcontext_, other->glcontext_);
  swap(mfilter_, other->mfilter_);
  swap(mpremultiplied_, other->mpremultiplied_);
  swap(ismask_, other->ismask_);
}

std::string TexturePacket::GetTypeName() const {
  return "mozilla.layers.layerscope.TexturePacket";
}


// ===================================================================

void LayersPacket_Layer_Size::InitAsDefaultInstance() {
}
class LayersPacket_Layer_Size::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer_Size>()._has_bits_);
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LayersPacket_Layer_Size::LayersPacket_Layer_Size()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer.Size)
}
LayersPacket_Layer_Size::LayersPacket_Layer_Size(const LayersPacket_Layer_Size& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&w_, &from.w_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&w_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer.Size)
}

void LayersPacket_Layer_Size::SharedCtor() {
  ::memset(&w_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&w_)) + sizeof(h_));
}

LayersPacket_Layer_Size::~LayersPacket_Layer_Size() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  SharedDtor();
}

void LayersPacket_Layer_Size::SharedDtor() {
}

void LayersPacket_Layer_Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer_Size& LayersPacket_Layer_Size::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_Size_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer_Size::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&w_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&w_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer_Size::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 w = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 h = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer_Size::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 w = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_w(), target);
  }

  // optional int32 h = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  return target;
}

size_t LayersPacket_Layer_Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 w = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_w());
    }

    // optional int32 h = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_h());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer_Size::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer_Size*>(
      &from));
}

void LayersPacket_Layer_Size::MergeFrom(const LayersPacket_Layer_Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000002u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayersPacket_Layer_Size::CopyFrom(const LayersPacket_Layer_Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer_Size::IsInitialized() const {
  return true;
}

void LayersPacket_Layer_Size::InternalSwap(LayersPacket_Layer_Size* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string LayersPacket_Layer_Size::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer.Size";
}


// ===================================================================

void LayersPacket_Layer_Rect::InitAsDefaultInstance() {
}
class LayersPacket_Layer_Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer_Rect>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

LayersPacket_Layer_Rect::LayersPacket_Layer_Rect()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
}
LayersPacket_Layer_Rect::LayersPacket_Layer_Rect(const LayersPacket_Layer_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
}

void LayersPacket_Layer_Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

LayersPacket_Layer_Rect::~LayersPacket_Layer_Rect() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  SharedDtor();
}

void LayersPacket_Layer_Rect::SharedDtor() {
}

void LayersPacket_Layer_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer_Rect& LayersPacket_Layer_Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_Rect_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&x_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer_Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer_Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // optional int32 w = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_w(), target);
  }

  // optional int32 h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  return target;
}

size_t LayersPacket_Layer_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_y());
    }

    // optional int32 w = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_w());
    }

    // optional int32 h = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_h());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer_Rect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer_Rect*>(
      &from));
}

void LayersPacket_Layer_Rect::MergeFrom(const LayersPacket_Layer_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayersPacket_Layer_Rect::CopyFrom(const LayersPacket_Layer_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer_Rect::IsInitialized() const {
  return true;
}

void LayersPacket_Layer_Rect::InternalSwap(LayersPacket_Layer_Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string LayersPacket_Layer_Rect::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer.Rect";
}


// ===================================================================

void LayersPacket_Layer_Region::InitAsDefaultInstance() {
}
class LayersPacket_Layer_Region::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer_Region>()._has_bits_);
};

LayersPacket_Layer_Region::LayersPacket_Layer_Region()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer.Region)
}
LayersPacket_Layer_Region::LayersPacket_Layer_Region(const LayersPacket_Layer_Region& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      r_(from.r_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer.Region)
}

void LayersPacket_Layer_Region::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto.base);
}

LayersPacket_Layer_Region::~LayersPacket_Layer_Region() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  SharedDtor();
}

void LayersPacket_Layer_Region::SharedDtor() {
}

void LayersPacket_Layer_Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer_Region& LayersPacket_Layer_Region::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_Region_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  r_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer_Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mozilla.layers.layerscope.LayersPacket.Layer.Rect r = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_r(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer_Region::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozilla.layers.layerscope.LayersPacket.Layer.Rect r = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_r_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_r(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  return target;
}

size_t LayersPacket_Layer_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozilla.layers.layerscope.LayersPacket.Layer.Rect r = 1;
  total_size += 1UL * this->_internal_r_size();
  for (const auto& msg : this->r_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer_Region::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer_Region*>(
      &from));
}

void LayersPacket_Layer_Region::MergeFrom(const LayersPacket_Layer_Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  r_.MergeFrom(from.r_);
}

void LayersPacket_Layer_Region::CopyFrom(const LayersPacket_Layer_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer_Region::IsInitialized() const {
  return true;
}

void LayersPacket_Layer_Region::InternalSwap(LayersPacket_Layer_Region* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  r_.InternalSwap(&other->r_);
}

std::string LayersPacket_Layer_Region::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer.Region";
}


// ===================================================================

void LayersPacket_Layer_Matrix::InitAsDefaultInstance() {
}
class LayersPacket_Layer_Matrix::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer_Matrix>()._has_bits_);
  static void set_has_is2d(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

LayersPacket_Layer_Matrix::LayersPacket_Layer_Matrix()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
}
LayersPacket_Layer_Matrix::LayersPacket_Layer_Matrix(const LayersPacket_Layer_Matrix& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      m_(from.m_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&is2d_, &from.is2d_,
    static_cast<size_t>(reinterpret_cast<char*>(&isid_) -
    reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
}

void LayersPacket_Layer_Matrix::SharedCtor() {
  ::memset(&is2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isid_) -
      reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
}

LayersPacket_Layer_Matrix::~LayersPacket_Layer_Matrix() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  SharedDtor();
}

void LayersPacket_Layer_Matrix::SharedDtor() {
}

void LayersPacket_Layer_Matrix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer_Matrix& LayersPacket_Layer_Matrix::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_Matrix_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer_Matrix::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  m_.Clear();
  ::memset(&is2d_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isid_) -
      reinterpret_cast<char*>(&is2d_)) + sizeof(isid_));
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer_Matrix::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool is2D = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_is2d(&has_bits);
          is2d_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool isId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_isid(&has_bits);
          isid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_m(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_m(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer_Matrix::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool is2D = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is2d(), target);
  }

  // optional bool isId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_isid(), target);
  }

  // repeated float m = 3;
  for (int i = 0, n = this->_internal_m_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_m(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  return target;
}

size_t LayersPacket_Layer_Matrix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float m = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_m_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_m_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool is2D = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool isId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer_Matrix::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer_Matrix*>(
      &from));
}

void LayersPacket_Layer_Matrix::MergeFrom(const LayersPacket_Layer_Matrix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  m_.MergeFrom(from.m_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      is2d_ = from.is2d_;
    }
    if (cached_has_bits & 0x00000002u) {
      isid_ = from.isid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LayersPacket_Layer_Matrix::CopyFrom(const LayersPacket_Layer_Matrix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Matrix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer_Matrix::IsInitialized() const {
  return true;
}

void LayersPacket_Layer_Matrix::InternalSwap(LayersPacket_Layer_Matrix* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  m_.InternalSwap(&other->m_);
  swap(is2d_, other->is2d_);
  swap(isid_, other->isid_);
}

std::string LayersPacket_Layer_Matrix::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer.Matrix";
}


// ===================================================================

void LayersPacket_Layer_Shadow::InitAsDefaultInstance() {
  ::mozilla::layers::layerscope::_LayersPacket_Layer_Shadow_default_instance_._instance.get_mutable()->clip_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Rect::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_Shadow_default_instance_._instance.get_mutable()->transform_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_Shadow_default_instance_._instance.get_mutable()->vregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
}
class LayersPacket_Layer_Shadow::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer_Shadow>()._has_bits_);
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& clip(const LayersPacket_Layer_Shadow* msg);
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& transform(const LayersPacket_Layer_Shadow* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vregion(const LayersPacket_Layer_Shadow* msg);
  static void set_has_vregion(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect&
LayersPacket_Layer_Shadow::_Internal::clip(const LayersPacket_Layer_Shadow* msg) {
  return *msg->clip_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix&
LayersPacket_Layer_Shadow::_Internal::transform(const LayersPacket_Layer_Shadow* msg) {
  return *msg->transform_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer_Shadow::_Internal::vregion(const LayersPacket_Layer_Shadow* msg) {
  return *msg->vregion_;
}
LayersPacket_Layer_Shadow::LayersPacket_Layer_Shadow()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
}
LayersPacket_Layer_Shadow::LayersPacket_Layer_Shadow(const LayersPacket_Layer_Shadow& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clip()) {
    clip_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Rect(*from.clip_);
  } else {
    clip_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from._internal_has_vregion()) {
    vregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.vregion_);
  } else {
    vregion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
}

void LayersPacket_Layer_Shadow::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto.base);
  ::memset(&clip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vregion_) -
      reinterpret_cast<char*>(&clip_)) + sizeof(vregion_));
}

LayersPacket_Layer_Shadow::~LayersPacket_Layer_Shadow() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  SharedDtor();
}

void LayersPacket_Layer_Shadow::SharedDtor() {
  if (this != internal_default_instance()) delete clip_;
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete vregion_;
}

void LayersPacket_Layer_Shadow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer_Shadow& LayersPacket_Layer_Shadow::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_Shadow_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer_Shadow::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(clip_ != nullptr);
      clip_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(transform_ != nullptr);
      transform_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vregion_ != nullptr);
      vregion_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer_Shadow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer_Shadow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::clip(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transform(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vregion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  return target;
}

size_t LayersPacket_Layer_Shadow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clip_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vregion_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer_Shadow::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer_Shadow*>(
      &from));
}

void LayersPacket_Layer_Shadow::MergeFrom(const LayersPacket_Layer_Shadow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_clip()->::mozilla::layers::layerscope::LayersPacket_Layer_Rect::MergeFrom(from._internal_clip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_transform()->::mozilla::layers::layerscope::LayersPacket_Layer_Matrix::MergeFrom(from._internal_transform());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_vregion());
    }
  }
}

void LayersPacket_Layer_Shadow::CopyFrom(const LayersPacket_Layer_Shadow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer.Shadow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer_Shadow::IsInitialized() const {
  return true;
}

void LayersPacket_Layer_Shadow::InternalSwap(LayersPacket_Layer_Shadow* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(clip_, other->clip_);
  swap(transform_, other->transform_);
  swap(vregion_, other->vregion_);
}

std::string LayersPacket_Layer_Shadow::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer.Shadow";
}


// ===================================================================

void LayersPacket_Layer::InitAsDefaultInstance() {
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->clip_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Rect::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->transform_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->vregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->shadow_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->hitregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->dispatchregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->noactionregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->hpanregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->vpanregion_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->valid_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Region*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Region::internal_default_instance());
  ::mozilla::layers::layerscope::_LayersPacket_Layer_default_instance_._instance.get_mutable()->size_ = const_cast< ::mozilla::layers::layerscope::LayersPacket_Layer_Size*>(
      ::mozilla::layers::layerscope::LayersPacket_Layer_Size::internal_default_instance());
}
class LayersPacket_Layer::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket_Layer>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_parentptr(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect& clip(const LayersPacket_Layer* msg);
  static void set_has_clip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix& transform(const LayersPacket_Layer* msg);
  static void set_has_transform(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vregion(const LayersPacket_Layer* msg);
  static void set_has_vregion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow& shadow(const LayersPacket_Layer* msg);
  static void set_has_shadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_copaque(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_calpha(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_direct(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_barid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& hitregion(const LayersPacket_Layer* msg);
  static void set_has_hitregion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& dispatchregion(const LayersPacket_Layer* msg);
  static void set_has_dispatchregion(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& noactionregion(const LayersPacket_Layer* msg);
  static void set_has_noactionregion(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& hpanregion(const LayersPacket_Layer* msg);
  static void set_has_hpanregion(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& vpanregion(const LayersPacket_Layer* msg);
  static void set_has_vpanregion(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Region& valid(const LayersPacket_Layer* msg);
  static void set_has_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_refid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket_Layer_Size& size(const LayersPacket_Layer* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_displaylistloglength(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_displaylistlog(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::mozilla::layers::layerscope::LayersPacket_Layer_Rect&
LayersPacket_Layer::_Internal::clip(const LayersPacket_Layer* msg) {
  return *msg->clip_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix&
LayersPacket_Layer::_Internal::transform(const LayersPacket_Layer* msg) {
  return *msg->transform_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::vregion(const LayersPacket_Layer* msg) {
  return *msg->vregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow&
LayersPacket_Layer::_Internal::shadow(const LayersPacket_Layer* msg) {
  return *msg->shadow_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::hitregion(const LayersPacket_Layer* msg) {
  return *msg->hitregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::dispatchregion(const LayersPacket_Layer* msg) {
  return *msg->dispatchregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::noactionregion(const LayersPacket_Layer* msg) {
  return *msg->noactionregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::hpanregion(const LayersPacket_Layer* msg) {
  return *msg->hpanregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::vpanregion(const LayersPacket_Layer* msg) {
  return *msg->vpanregion_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Region&
LayersPacket_Layer::_Internal::valid(const LayersPacket_Layer* msg) {
  return *msg->valid_;
}
const ::mozilla::layers::layerscope::LayersPacket_Layer_Size&
LayersPacket_Layer::_Internal::size(const LayersPacket_Layer* msg) {
  return *msg->size_;
}
LayersPacket_Layer::LayersPacket_Layer()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket.Layer)
}
LayersPacket_Layer::LayersPacket_Layer(const LayersPacket_Layer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  displaylistlog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_displaylistlog()) {
    displaylistlog_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displaylistlog_);
  }
  if (from._internal_has_clip()) {
    clip_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Rect(*from.clip_);
  } else {
    clip_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  if (from._internal_has_vregion()) {
    vregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.vregion_);
  } else {
    vregion_ = nullptr;
  }
  if (from._internal_has_shadow()) {
    shadow_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow(*from.shadow_);
  } else {
    shadow_ = nullptr;
  }
  if (from._internal_has_hitregion()) {
    hitregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.hitregion_);
  } else {
    hitregion_ = nullptr;
  }
  if (from._internal_has_dispatchregion()) {
    dispatchregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.dispatchregion_);
  } else {
    dispatchregion_ = nullptr;
  }
  if (from._internal_has_noactionregion()) {
    noactionregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.noactionregion_);
  } else {
    noactionregion_ = nullptr;
  }
  if (from._internal_has_hpanregion()) {
    hpanregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.hpanregion_);
  } else {
    hpanregion_ = nullptr;
  }
  if (from._internal_has_vpanregion()) {
    vpanregion_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.vpanregion_);
  } else {
    vpanregion_ = nullptr;
  }
  if (from._internal_has_valid()) {
    valid_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Region(*from.valid_);
  } else {
    valid_ = nullptr;
  }
  if (from._internal_has_size()) {
    size_ = new ::mozilla::layers::layerscope::LayersPacket_Layer_Size(*from.size_);
  } else {
    size_ = nullptr;
  }
  ::memcpy(&ptr_, &from.ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&direct_) -
    reinterpret_cast<char*>(&ptr_)) + sizeof(direct_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket.Layer)
}

void LayersPacket_Layer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersPacket_Layer_LayerScopePacket_2eproto.base);
  displaylistlog_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&displaylistloglength_) -
      reinterpret_cast<char*>(&clip_)) + sizeof(displaylistloglength_));
  direct_ = 1;
}

LayersPacket_Layer::~LayersPacket_Layer() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket.Layer)
  SharedDtor();
}

void LayersPacket_Layer::SharedDtor() {
  displaylistlog_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clip_;
  if (this != internal_default_instance()) delete transform_;
  if (this != internal_default_instance()) delete vregion_;
  if (this != internal_default_instance()) delete shadow_;
  if (this != internal_default_instance()) delete hitregion_;
  if (this != internal_default_instance()) delete dispatchregion_;
  if (this != internal_default_instance()) delete noactionregion_;
  if (this != internal_default_instance()) delete hpanregion_;
  if (this != internal_default_instance()) delete vpanregion_;
  if (this != internal_default_instance()) delete valid_;
  if (this != internal_default_instance()) delete size_;
}

void LayersPacket_Layer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket_Layer& LayersPacket_Layer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_Layer_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket_Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      displaylistlog_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(clip_ != nullptr);
      clip_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(transform_ != nullptr);
      transform_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vregion_ != nullptr);
      vregion_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(shadow_ != nullptr);
      shadow_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(hitregion_ != nullptr);
      hitregion_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dispatchregion_ != nullptr);
      dispatchregion_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(noactionregion_ != nullptr);
      noactionregion_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(hpanregion_ != nullptr);
      hpanregion_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(vpanregion_ != nullptr);
      vpanregion_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(valid_ != nullptr);
      valid_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(size_ != nullptr);
      size_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&ptr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opacity_) -
        reinterpret_cast<char*>(&ptr_)) + sizeof(opacity_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&barid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&displaylistloglength_) -
        reinterpret_cast<char*>(&barid_)) + sizeof(displaylistloglength_));
  }
  direct_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket_Layer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::LayersPacket_Layer_LayerType_IsValid(val))) {
            _internal_set_type(static_cast<::mozilla::layers::layerscope::LayersPacket_Layer_LayerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 ptr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ptr(&has_bits);
          ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 parentPtr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_parentptr(&has_bits);
          parentptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_clip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_vregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Shadow shadow = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_shadow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float opacity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_opacity(&has_bits);
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool cOpaque = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_copaque(&has_bits);
          copaque_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool cAlpha = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_calpha(&has_bits);
          calpha_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.ScrollingDirect direct = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect_IsValid(val))) {
            _internal_set_direct(static_cast<::mozilla::layers::layerscope::LayersPacket_Layer_ScrollingDirect>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 barID = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_barid(&has_bits);
          barid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 mask = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_mask(&has_bits);
          mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hitRegion = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_hitregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region dispatchRegion = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dispatchregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region noActionRegion = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_noactionregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hPanRegion = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_hpanregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vPanRegion = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_vpanregion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region valid = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 color = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_color(&has_bits);
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Filter filter = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::LayersPacket_Layer_Filter_IsValid(val))) {
            _internal_set_filter(static_cast<::mozilla::layers::layerscope::LayersPacket_Layer_Filter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(102, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint64 refID = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_refid(&has_bits);
          refid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket.Layer.Size size = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 displayListLogLength = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_displaylistloglength(&has_bits);
          displaylistloglength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes displayListLog = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_displaylistlog();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket_Layer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket.Layer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required uint64 ptr = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_ptr(), target);
  }

  // required uint64 parentPtr = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_parentptr(), target);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::clip(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 11;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::transform(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 12;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::vregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Shadow shadow = 13;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::shadow(this), target, stream);
  }

  // optional float opacity = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_opacity(), target);
  }

  // optional bool cOpaque = 15;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_copaque(), target);
  }

  // optional bool cAlpha = 16;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_calpha(), target);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.ScrollingDirect direct = 17;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_direct(), target);
  }

  // optional uint64 barID = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_barid(), target);
  }

  // optional uint64 mask = 19;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(19, this->_internal_mask(), target);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hitRegion = 20;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::hitregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region dispatchRegion = 21;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::dispatchregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region noActionRegion = 22;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::noactionregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hPanRegion = 23;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::hpanregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vPanRegion = 24;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::vpanregion(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region valid = 100;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        100, _Internal::valid(this), target, stream);
  }

  // optional uint32 color = 101;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(101, this->_internal_color(), target);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Filter filter = 102;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      102, this->_internal_filter(), target);
  }

  // optional uint64 refID = 103;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(103, this->_internal_refid(), target);
  }

  // optional .mozilla.layers.layerscope.LayersPacket.Layer.Size size = 104;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        104, _Internal::size(this), target, stream);
  }

  // optional uint32 displayListLogLength = 105;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(105, this->_internal_displaylistloglength(), target);
  }

  // optional bytes displayListLog = 106;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        106, this->_internal_displaylistlog(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket.Layer)
  return target;
}

size_t LayersPacket_Layer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozilla.layers.layerscope.LayersPacket.Layer)
  size_t total_size = 0;

  if (_internal_has_ptr()) {
    // required uint64 ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ptr());
  }

  if (_internal_has_parentptr()) {
    // required uint64 parentPtr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_parentptr());
  }

  if (_internal_has_type()) {
    // required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t LayersPacket_Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket.Layer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00007000) ^ 0x00007000) == 0) {  // All required fields are present.
    // required uint64 ptr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ptr());

    // required uint64 parentPtr = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_parentptr());

    // required .mozilla.layers.layerscope.LayersPacket.Layer.LayerType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes displayListLog = 106;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_displaylistlog());
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Rect clip = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *clip_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Matrix transform = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *transform_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vRegion = 12;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vregion_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Shadow shadow = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shadow_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hitRegion = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hitregion_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region dispatchRegion = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dispatchregion_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region noActionRegion = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *noactionregion_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region hPanRegion = 23;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hpanregion_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region vPanRegion = 24;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vpanregion_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Region valid = 100;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *valid_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Size size = 104;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *size_);
    }

  }
  // optional float opacity = 14;
  if (cached_has_bits & 0x00008000u) {
    total_size += 1 + 4;
  }

  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 barID = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_barid());
    }

    // optional uint64 mask = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_mask());
    }

    // optional bool cOpaque = 15;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool cAlpha = 16;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint32 color = 101;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_color());
    }

    // optional uint64 refID = 103;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_refid());
    }

    // optional .mozilla.layers.layerscope.LayersPacket.Layer.Filter filter = 102;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_filter());
    }

    // optional uint32 displayListLogLength = 105;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_displaylistloglength());
    }

  }
  // optional .mozilla.layers.layerscope.LayersPacket.Layer.ScrollingDirect direct = 17;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direct());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket_Layer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket_Layer*>(
      &from));
}

void LayersPacket_Layer::MergeFrom(const LayersPacket_Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      displaylistlog_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.displaylistlog_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_clip()->::mozilla::layers::layerscope::LayersPacket_Layer_Rect::MergeFrom(from._internal_clip());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_transform()->::mozilla::layers::layerscope::LayersPacket_Layer_Matrix::MergeFrom(from._internal_transform());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_vregion());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_shadow()->::mozilla::layers::layerscope::LayersPacket_Layer_Shadow::MergeFrom(from._internal_shadow());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_hitregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_hitregion());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dispatchregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_dispatchregion());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_noactionregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_noactionregion());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_hpanregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_hpanregion());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_vpanregion()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_vpanregion());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_valid()->::mozilla::layers::layerscope::LayersPacket_Layer_Region::MergeFrom(from._internal_valid());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_size()->::mozilla::layers::layerscope::LayersPacket_Layer_Size::MergeFrom(from._internal_size());
    }
    if (cached_has_bits & 0x00001000u) {
      ptr_ = from.ptr_;
    }
    if (cached_has_bits & 0x00002000u) {
      parentptr_ = from.parentptr_;
    }
    if (cached_has_bits & 0x00004000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00008000u) {
      opacity_ = from.opacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      barid_ = from.barid_;
    }
    if (cached_has_bits & 0x00020000u) {
      mask_ = from.mask_;
    }
    if (cached_has_bits & 0x00040000u) {
      copaque_ = from.copaque_;
    }
    if (cached_has_bits & 0x00080000u) {
      calpha_ = from.calpha_;
    }
    if (cached_has_bits & 0x00100000u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00200000u) {
      refid_ = from.refid_;
    }
    if (cached_has_bits & 0x00400000u) {
      filter_ = from.filter_;
    }
    if (cached_has_bits & 0x00800000u) {
      displaylistloglength_ = from.displaylistloglength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_direct(from._internal_direct());
  }
}

void LayersPacket_Layer::CopyFrom(const LayersPacket_Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket_Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007000) != 0x00007000) return false;
  return true;
}

void LayersPacket_Layer::InternalSwap(LayersPacket_Layer* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  displaylistlog_.Swap(&other->displaylistlog_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clip_, other->clip_);
  swap(transform_, other->transform_);
  swap(vregion_, other->vregion_);
  swap(shadow_, other->shadow_);
  swap(hitregion_, other->hitregion_);
  swap(dispatchregion_, other->dispatchregion_);
  swap(noactionregion_, other->noactionregion_);
  swap(hpanregion_, other->hpanregion_);
  swap(vpanregion_, other->vpanregion_);
  swap(valid_, other->valid_);
  swap(size_, other->size_);
  swap(ptr_, other->ptr_);
  swap(parentptr_, other->parentptr_);
  swap(type_, other->type_);
  swap(opacity_, other->opacity_);
  swap(barid_, other->barid_);
  swap(mask_, other->mask_);
  swap(copaque_, other->copaque_);
  swap(calpha_, other->calpha_);
  swap(color_, other->color_);
  swap(refid_, other->refid_);
  swap(filter_, other->filter_);
  swap(displaylistloglength_, other->displaylistloglength_);
  swap(direct_, other->direct_);
}

std::string LayersPacket_Layer::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket.Layer";
}


// ===================================================================

void LayersPacket::InitAsDefaultInstance() {
}
class LayersPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<LayersPacket>()._has_bits_);
};

LayersPacket::LayersPacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.LayersPacket)
}
LayersPacket::LayersPacket(const LayersPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.LayersPacket)
}

void LayersPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LayersPacket_LayerScopePacket_2eproto.base);
}

LayersPacket::~LayersPacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.LayersPacket)
  SharedDtor();
}

void LayersPacket::SharedDtor() {
}

void LayersPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LayersPacket& LayersPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LayersPacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void LayersPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.LayersPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* LayersPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .mozilla.layers.layerscope.LayersPacket.Layer layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LayersPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.LayersPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .mozilla.layers.layerscope.LayersPacket.Layer layer = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_layer(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.LayersPacket)
  return target;
}

size_t LayersPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.LayersPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .mozilla.layers.layerscope.LayersPacket.Layer layer = 1;
  total_size += 1UL * this->_internal_layer_size();
  for (const auto& msg : this->layer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LayersPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const LayersPacket*>(
      &from));
}

void LayersPacket::MergeFrom(const LayersPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.LayersPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
}

void LayersPacket::CopyFrom(const LayersPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.LayersPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayersPacket::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layer_)) return false;
  return true;
}

void LayersPacket::InternalSwap(LayersPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_.InternalSwap(&other->layer_);
}

std::string LayersPacket::GetTypeName() const {
  return "mozilla.layers.layerscope.LayersPacket";
}


// ===================================================================

void MetaPacket::InitAsDefaultInstance() {
}
class MetaPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<MetaPacket>()._has_bits_);
  static void set_has_composedbyhwc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MetaPacket::MetaPacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.MetaPacket)
}
MetaPacket::MetaPacket(const MetaPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  composedbyhwc_ = from.composedbyhwc_;
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.MetaPacket)
}

void MetaPacket::SharedCtor() {
  composedbyhwc_ = false;
}

MetaPacket::~MetaPacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.MetaPacket)
  SharedDtor();
}

void MetaPacket::SharedDtor() {
}

void MetaPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetaPacket& MetaPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetaPacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void MetaPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.MetaPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  composedbyhwc_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MetaPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bool composedByHwc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_composedbyhwc(&has_bits);
          composedbyhwc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetaPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.MetaPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool composedByHwc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_composedbyhwc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.MetaPacket)
  return target;
}

size_t MetaPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.MetaPacket)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool composedByHwc = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const MetaPacket*>(
      &from));
}

void MetaPacket::MergeFrom(const MetaPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.MetaPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_composedbyhwc()) {
    _internal_set_composedbyhwc(from._internal_composedbyhwc());
  }
}

void MetaPacket::CopyFrom(const MetaPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.MetaPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaPacket::IsInitialized() const {
  return true;
}

void MetaPacket::InternalSwap(MetaPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(composedbyhwc_, other->composedbyhwc_);
}

std::string MetaPacket::GetTypeName() const {
  return "mozilla.layers.layerscope.MetaPacket";
}


// ===================================================================

void DrawPacket_Rect::InitAsDefaultInstance() {
}
class DrawPacket_Rect::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawPacket_Rect>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_w(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_h(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

DrawPacket_Rect::DrawPacket_Rect()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.DrawPacket.Rect)
}
DrawPacket_Rect::DrawPacket_Rect(const DrawPacket_Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&h_) -
    reinterpret_cast<char*>(&x_)) + sizeof(h_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.DrawPacket.Rect)
}

void DrawPacket_Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&h_) -
      reinterpret_cast<char*>(&x_)) + sizeof(h_));
}

DrawPacket_Rect::~DrawPacket_Rect() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.DrawPacket.Rect)
  SharedDtor();
}

void DrawPacket_Rect::SharedDtor() {
}

void DrawPacket_Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawPacket_Rect& DrawPacket_Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawPacket_Rect_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void DrawPacket_Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.DrawPacket.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&h_) -
        reinterpret_cast<char*>(&x_)) + sizeof(h_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrawPacket_Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_w(&has_bits);
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float h = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_h(&has_bits);
          h_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawPacket_Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.DrawPacket.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // required float w = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  // required float h = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_h(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.DrawPacket.Rect)
  return target;
}

size_t DrawPacket_Rect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozilla.layers.layerscope.DrawPacket.Rect)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_w()) {
    // required float w = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_h()) {
    // required float h = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t DrawPacket_Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.DrawPacket.Rect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float w = 3;
    total_size += 1 + 4;

    // required float h = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawPacket_Rect::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrawPacket_Rect*>(
      &from));
}

void DrawPacket_Rect::MergeFrom(const DrawPacket_Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.DrawPacket.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      w_ = from.w_;
    }
    if (cached_has_bits & 0x00000008u) {
      h_ = from.h_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawPacket_Rect::CopyFrom(const DrawPacket_Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.DrawPacket.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawPacket_Rect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void DrawPacket_Rect::InternalSwap(DrawPacket_Rect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(w_, other->w_);
  swap(h_, other->h_);
}

std::string DrawPacket_Rect::GetTypeName() const {
  return "mozilla.layers.layerscope.DrawPacket.Rect";
}


// ===================================================================

void DrawPacket::InitAsDefaultInstance() {
}
class DrawPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<DrawPacket>()._has_bits_);
  static void set_has_offsetx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offsety(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_totalrects(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_layerref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DrawPacket::DrawPacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.DrawPacket)
}
DrawPacket::DrawPacket(const DrawPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      mvmatrix_(from.mvmatrix_),
      layerrect_(from.layerrect_),
      texids_(from.texids_),
      texturerect_(from.texturerect_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&offsetx_, &from.offsetx_,
    static_cast<size_t>(reinterpret_cast<char*>(&totalrects_) -
    reinterpret_cast<char*>(&offsetx_)) + sizeof(totalrects_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.DrawPacket)
}

void DrawPacket::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DrawPacket_LayerScopePacket_2eproto.base);
  ::memset(&offsetx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totalrects_) -
      reinterpret_cast<char*>(&offsetx_)) + sizeof(totalrects_));
}

DrawPacket::~DrawPacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.DrawPacket)
  SharedDtor();
}

void DrawPacket::SharedDtor() {
}

void DrawPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DrawPacket& DrawPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DrawPacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void DrawPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.DrawPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mvmatrix_.Clear();
  layerrect_.Clear();
  texids_.Clear();
  texturerect_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&offsetx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&totalrects_) -
        reinterpret_cast<char*>(&offsetx_)) + sizeof(totalrects_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* DrawPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float offsetX = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_offsetx(&has_bits);
          offsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float offsetY = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_offsety(&has_bits);
          offsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float mvMatrix = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mvmatrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_mvmatrix(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 totalRects = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_totalrects(&has_bits);
          totalrects_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozilla.layers.layerscope.DrawPacket.Rect layerRect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_layerrect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint64 layerref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_layerref(&has_bits);
          layerref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 texIDs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_texids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_texids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .mozilla.layers.layerscope.DrawPacket.Rect textureRect = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_texturerect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DrawPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.DrawPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float offsetX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_offsetx(), target);
  }

  // required float offsetY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_offsety(), target);
  }

  // repeated float mvMatrix = 3;
  for (int i = 0, n = this->_internal_mvmatrix_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_mvmatrix(i), target);
  }

  // required uint32 totalRects = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_totalrects(), target);
  }

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect layerRect = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_layerrect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_layerrect(i), target, stream);
  }

  // required uint64 layerref = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_layerref(), target);
  }

  // repeated uint32 texIDs = 7;
  for (int i = 0, n = this->_internal_texids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_texids(i), target);
  }

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect textureRect = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_texturerect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_texturerect(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.DrawPacket)
  return target;
}

size_t DrawPacket::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:mozilla.layers.layerscope.DrawPacket)
  size_t total_size = 0;

  if (_internal_has_offsetx()) {
    // required float offsetX = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_offsety()) {
    // required float offsetY = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_layerref()) {
    // required uint64 layerref = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_layerref());
  }

  if (_internal_has_totalrects()) {
    // required uint32 totalRects = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalrects());
  }

  return total_size;
}
size_t DrawPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.DrawPacket)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float offsetX = 1;
    total_size += 1 + 4;

    // required float offsetY = 2;
    total_size += 1 + 4;

    // required uint64 layerref = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_layerref());

    // required uint32 totalRects = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_totalrects());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float mvMatrix = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_mvmatrix_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mvmatrix_size());
    total_size += data_size;
  }

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect layerRect = 5;
  total_size += 1UL * this->_internal_layerrect_size();
  for (const auto& msg : this->layerrect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 texIDs = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->texids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_texids_size());
    total_size += data_size;
  }

  // repeated .mozilla.layers.layerscope.DrawPacket.Rect textureRect = 8;
  total_size += 1UL * this->_internal_texturerect_size();
  for (const auto& msg : this->texturerect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DrawPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const DrawPacket*>(
      &from));
}

void DrawPacket::MergeFrom(const DrawPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.DrawPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mvmatrix_.MergeFrom(from.mvmatrix_);
  layerrect_.MergeFrom(from.layerrect_);
  texids_.MergeFrom(from.texids_);
  texturerect_.MergeFrom(from.texturerect_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      offsetx_ = from.offsetx_;
    }
    if (cached_has_bits & 0x00000002u) {
      offsety_ = from.offsety_;
    }
    if (cached_has_bits & 0x00000004u) {
      layerref_ = from.layerref_;
    }
    if (cached_has_bits & 0x00000008u) {
      totalrects_ = from.totalrects_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrawPacket::CopyFrom(const DrawPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.DrawPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrawPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(layerrect_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(texturerect_)) return false;
  return true;
}

void DrawPacket::InternalSwap(DrawPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mvmatrix_.InternalSwap(&other->mvmatrix_);
  layerrect_.InternalSwap(&other->layerrect_);
  texids_.InternalSwap(&other->texids_);
  texturerect_.InternalSwap(&other->texturerect_);
  swap(offsetx_, other->offsetx_);
  swap(offsety_, other->offsety_);
  swap(layerref_, other->layerref_);
  swap(totalrects_, other->totalrects_);
}

std::string DrawPacket::GetTypeName() const {
  return "mozilla.layers.layerscope.DrawPacket";
}


// ===================================================================

void Packet::InitAsDefaultInstance() {
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->frame_ = const_cast< ::mozilla::layers::layerscope::FramePacket*>(
      ::mozilla::layers::layerscope::FramePacket::internal_default_instance());
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->color_ = const_cast< ::mozilla::layers::layerscope::ColorPacket*>(
      ::mozilla::layers::layerscope::ColorPacket::internal_default_instance());
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->texture_ = const_cast< ::mozilla::layers::layerscope::TexturePacket*>(
      ::mozilla::layers::layerscope::TexturePacket::internal_default_instance());
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->layers_ = const_cast< ::mozilla::layers::layerscope::LayersPacket*>(
      ::mozilla::layers::layerscope::LayersPacket::internal_default_instance());
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->meta_ = const_cast< ::mozilla::layers::layerscope::MetaPacket*>(
      ::mozilla::layers::layerscope::MetaPacket::internal_default_instance());
  ::mozilla::layers::layerscope::_Packet_default_instance_._instance.get_mutable()->draw_ = const_cast< ::mozilla::layers::layerscope::DrawPacket*>(
      ::mozilla::layers::layerscope::DrawPacket::internal_default_instance());
}
class Packet::_Internal {
 public:
  using HasBits = decltype(std::declval<Packet>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::mozilla::layers::layerscope::FramePacket& frame(const Packet* msg);
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::mozilla::layers::layerscope::ColorPacket& color(const Packet* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::mozilla::layers::layerscope::TexturePacket& texture(const Packet* msg);
  static void set_has_texture(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::mozilla::layers::layerscope::LayersPacket& layers(const Packet* msg);
  static void set_has_layers(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::mozilla::layers::layerscope::MetaPacket& meta(const Packet* msg);
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::mozilla::layers::layerscope::DrawPacket& draw(const Packet* msg);
  static void set_has_draw(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::mozilla::layers::layerscope::FramePacket&
Packet::_Internal::frame(const Packet* msg) {
  return *msg->frame_;
}
const ::mozilla::layers::layerscope::ColorPacket&
Packet::_Internal::color(const Packet* msg) {
  return *msg->color_;
}
const ::mozilla::layers::layerscope::TexturePacket&
Packet::_Internal::texture(const Packet* msg) {
  return *msg->texture_;
}
const ::mozilla::layers::layerscope::LayersPacket&
Packet::_Internal::layers(const Packet* msg) {
  return *msg->layers_;
}
const ::mozilla::layers::layerscope::MetaPacket&
Packet::_Internal::meta(const Packet* msg) {
  return *msg->meta_;
}
const ::mozilla::layers::layerscope::DrawPacket&
Packet::_Internal::draw(const Packet* msg) {
  return *msg->draw_;
}
Packet::Packet()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.Packet)
}
Packet::Packet(const Packet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_frame()) {
    frame_ = new ::mozilla::layers::layerscope::FramePacket(*from.frame_);
  } else {
    frame_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::mozilla::layers::layerscope::ColorPacket(*from.color_);
  } else {
    color_ = nullptr;
  }
  if (from._internal_has_texture()) {
    texture_ = new ::mozilla::layers::layerscope::TexturePacket(*from.texture_);
  } else {
    texture_ = nullptr;
  }
  if (from._internal_has_layers()) {
    layers_ = new ::mozilla::layers::layerscope::LayersPacket(*from.layers_);
  } else {
    layers_ = nullptr;
  }
  if (from._internal_has_meta()) {
    meta_ = new ::mozilla::layers::layerscope::MetaPacket(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_draw()) {
    draw_ = new ::mozilla::layers::layerscope::DrawPacket(*from.draw_);
  } else {
    draw_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.Packet)
}

void Packet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Packet_LayerScopePacket_2eproto.base);
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draw_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(draw_));
  type_ = 1;
}

Packet::~Packet() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.Packet)
  SharedDtor();
}

void Packet::SharedDtor() {
  if (this != internal_default_instance()) delete frame_;
  if (this != internal_default_instance()) delete color_;
  if (this != internal_default_instance()) delete texture_;
  if (this != internal_default_instance()) delete layers_;
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete draw_;
}

void Packet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Packet& Packet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Packet_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void Packet::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(frame_ != nullptr);
      frame_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(color_ != nullptr);
      color_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(texture_ != nullptr);
      texture_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(layers_ != nullptr);
      layers_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(meta_ != nullptr);
      meta_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(draw_ != nullptr);
      draw_->Clear();
    }
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Packet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozilla.layers.layerscope.Packet.DataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::Packet_DataType_IsValid(val))) {
            _internal_set_type(static_cast<::mozilla::layers::layerscope::Packet_DataType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.FramePacket frame = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.ColorPacket color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.TexturePacket texture = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_texture(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.LayersPacket layers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_layers(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.MetaPacket meta = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .mozilla.layers.layerscope.DrawPacket draw = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_draw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Packet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.Packet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozilla.layers.layerscope.Packet.DataType type = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .mozilla.layers.layerscope.FramePacket frame = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::frame(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.ColorPacket color = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::color(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.TexturePacket texture = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::texture(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.LayersPacket layers = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::layers(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.MetaPacket meta = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::meta(this), target, stream);
  }

  // optional .mozilla.layers.layerscope.DrawPacket draw = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::draw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.Packet)
  return target;
}

size_t Packet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.Packet)
  size_t total_size = 0;

  // required .mozilla.layers.layerscope.Packet.DataType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .mozilla.layers.layerscope.FramePacket frame = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_);
    }

    // optional .mozilla.layers.layerscope.ColorPacket color = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *color_);
    }

    // optional .mozilla.layers.layerscope.TexturePacket texture = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *texture_);
    }

    // optional .mozilla.layers.layerscope.LayersPacket layers = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *layers_);
    }

    // optional .mozilla.layers.layerscope.MetaPacket meta = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meta_);
    }

    // optional .mozilla.layers.layerscope.DrawPacket draw = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *draw_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Packet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const Packet*>(
      &from));
}

void Packet::MergeFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.Packet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_frame()->::mozilla::layers::layerscope::FramePacket::MergeFrom(from._internal_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_color()->::mozilla::layers::layerscope::ColorPacket::MergeFrom(from._internal_color());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_texture()->::mozilla::layers::layerscope::TexturePacket::MergeFrom(from._internal_texture());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_layers()->::mozilla::layers::layerscope::LayersPacket::MergeFrom(from._internal_layers());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_meta()->::mozilla::layers::layerscope::MetaPacket::MergeFrom(from._internal_meta());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_draw()->::mozilla::layers::layerscope::DrawPacket::MergeFrom(from._internal_draw());
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Packet::CopyFrom(const Packet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.Packet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Packet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;
  if (_internal_has_color()) {
    if (!color_->IsInitialized()) return false;
  }
  if (_internal_has_texture()) {
    if (!texture_->IsInitialized()) return false;
  }
  if (_internal_has_layers()) {
    if (!layers_->IsInitialized()) return false;
  }
  if (_internal_has_draw()) {
    if (!draw_->IsInitialized()) return false;
  }
  return true;
}

void Packet::InternalSwap(Packet* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(frame_, other->frame_);
  swap(color_, other->color_);
  swap(texture_, other->texture_);
  swap(layers_, other->layers_);
  swap(meta_, other->meta_);
  swap(draw_, other->draw_);
  swap(type_, other->type_);
}

std::string Packet::GetTypeName() const {
  return "mozilla.layers.layerscope.Packet";
}


// ===================================================================

void CommandPacket::InitAsDefaultInstance() {
}
class CommandPacket::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPacket>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CommandPacket::CommandPacket()
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mozilla.layers.layerscope.CommandPacket)
}
CommandPacket::CommandPacket(const CommandPacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&type_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:mozilla.layers.layerscope.CommandPacket)
}

void CommandPacket::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

CommandPacket::~CommandPacket() {
  // @@protoc_insertion_point(destructor:mozilla.layers.layerscope.CommandPacket)
  SharedDtor();
}

void CommandPacket::SharedDtor() {
}

void CommandPacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CommandPacket& CommandPacket::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CommandPacket_LayerScopePacket_2eproto.base);
  return *internal_default_instance();
}


void CommandPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:mozilla.layers.layerscope.CommandPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&type_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* CommandPacket::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .mozilla.layers.layerscope.CommandPacket.CmdType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::mozilla::layers::layerscope::CommandPacket_CmdType_IsValid(val))) {
            _internal_set_type(static_cast<::mozilla::layers::layerscope::CommandPacket_CmdType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandPacket::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mozilla.layers.layerscope.CommandPacket)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .mozilla.layers.layerscope.CommandPacket.CmdType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional bool value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields().data(),
        static_cast<int>(_internal_metadata_.unknown_fields().size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mozilla.layers.layerscope.CommandPacket)
  return target;
}

size_t CommandPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mozilla.layers.layerscope.CommandPacket)
  size_t total_size = 0;

  // required .mozilla.layers.layerscope.CommandPacket.CmdType type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields().size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandPacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CommandPacket*>(
      &from));
}

void CommandPacket::MergeFrom(const CommandPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mozilla.layers.layerscope.CommandPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CommandPacket::CopyFrom(const CommandPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mozilla.layers.layerscope.CommandPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void CommandPacket::InternalSwap(CommandPacket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(value_, other->value_);
}

std::string CommandPacket::GetTypeName() const {
  return "mozilla.layers.layerscope.CommandPacket";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace layerscope
}  // namespace layers
}  // namespace mozilla
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::FramePacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::FramePacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::FramePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::ColorPacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::ColorPacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::ColorPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::TexturePacket_Rect* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::TexturePacket_Rect >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::TexturePacket_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::TexturePacket_Size* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::TexturePacket_Size >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::TexturePacket_Size >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::TexturePacket_Matrix* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::TexturePacket_Matrix >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::TexturePacket_Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::TexturePacket_EffectMask* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::TexturePacket_EffectMask >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::TexturePacket_EffectMask >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::TexturePacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::TexturePacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::TexturePacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer_Size* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer_Size >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer_Size >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer_Rect* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer_Region* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer_Region >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer_Matrix >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer_Shadow >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket_Layer* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket_Layer >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket_Layer >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::LayersPacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::LayersPacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::LayersPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::MetaPacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::MetaPacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::MetaPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::DrawPacket_Rect* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::DrawPacket_Rect >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::DrawPacket_Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::DrawPacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::DrawPacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::DrawPacket >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::Packet* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::Packet >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::Packet >(arena);
}
template<> PROTOBUF_NOINLINE ::mozilla::layers::layerscope::CommandPacket* Arena::CreateMaybeMessage< ::mozilla::layers::layerscope::CommandPacket >(Arena* arena) {
  return Arena::CreateInternal< ::mozilla::layers::layerscope::CommandPacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
