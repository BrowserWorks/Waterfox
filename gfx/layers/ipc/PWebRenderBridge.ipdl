/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * vim: sw=2 ts=8 et :
 */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include LayersSurfaces;
include LayersMessages;
include "mozilla/GfxMessageUtils.h";
include "mozilla/layers/WebRenderMessageUtils.h";

include WebRenderMessages;
include protocol PCompositorBridge;
include protocol PTexture;

using mozilla::layers::APZTestData from "mozilla/layers/APZTestData.h";
using struct mozilla::layers::ScrollableLayerGuid from "FrameMetrics.h";
using struct mozilla::layers::TextureInfo from "mozilla/layers/CompositorTypes.h";
using mozilla::layers::CompositableHandle from "mozilla/layers/LayersTypes.h";
using mozilla::wr::ByteBuffer from "mozilla/webrender/WebRenderTypes.h";
using mozilla::wr::ExternalImageId from "mozilla/webrender/WebRenderTypes.h";
using mozilla::wr::ImageKey from "mozilla/webrender/WebRenderTypes.h";
using mozilla::wr::FontKey from "mozilla/webrender/WebRenderTypes.h";
using mozilla::wr::PipelineId from "mozilla/webrender/WebRenderTypes.h";
using WrBuiltDisplayListDescriptor from "mozilla/webrender/webrender_ffi.h";
using mozilla::layers::WebRenderScrollData from "mozilla/layers/WebRenderScrollData.h";

namespace mozilla {
namespace layers {

sync protocol PWebRenderBridge
{
  manager PCompositorBridge;

parent:
  async NewCompositable(CompositableHandle handle, TextureInfo info);
  async ReleaseCompositable(CompositableHandle compositable);

  // Creates a set of mappings between TextureReadLocks and an associated
  // ReadLockHandle that can be used in Update, and persist until the
  // next Update call.
  async InitReadLocks(ReadLockInit[] locks);

  sync Create(IntSize aSize);
  async AddImage(ImageKey aImageKey, IntSize aSize, uint32_t aStride,
                 SurfaceFormat aFormat, ByteBuffer aBytes);
  async AddBlobImage(ImageKey aImageKey, IntSize aSize, uint32_t aStride,
                     SurfaceFormat aFormat, ByteBuffer aBytes);
  async UpdateImage(ImageKey aImageKey, IntSize aSize,
                   SurfaceFormat aFormat, ByteBuffer aBytes);
  async DeleteImage(ImageKey aImageKey);
  async DeleteCompositorAnimations(uint64_t[] aIds);
  async AddRawFont(FontKey aFontKey, ByteBuffer aBytes, uint32_t aFontIndex);
  async DeleteFont(FontKey aFontKey);
  async DPBegin(IntSize aSize);
  async DPEnd(IntSize aSize, WebRenderParentCommand[] commands, OpDestroy[] toDestroy, uint64_t fwdTransactionId, uint64_t transactionId,
              WrSize aContentSize, ByteBuffer aDL, WrBuiltDisplayListDescriptor aDLDesc,
              WebRenderScrollData aScrollData);
  sync DPSyncEnd(IntSize aSize, WebRenderParentCommand[] commands, OpDestroy[] toDestroy, uint64_t fwdTransactionId, uint64_t transactionId,
                 WrSize aContentSize, ByteBuffer aDL, WrBuiltDisplayListDescriptor aDLDesc,
                 WebRenderScrollData aScrollData);
  sync DPGetSnapshot(PTexture texture);
  async AddPipelineIdForAsyncCompositable(PipelineId aImageId, CompositableHandle aHandle);
  async RemovePipelineIdForAsyncCompositable(PipelineId aPipelineId);
  async AddExternalImageIdForCompositable(ExternalImageId aImageId, CompositableHandle aHandle);
  async RemoveExternalImageId(ExternalImageId aImageId);
  async SetLayerObserverEpoch(uint64_t layerObserverEpoch);
  async ClearCachedResources();
  // Schedule a composite if one isn't already scheduled.
  async ForceComposite();

  // These correspond exactly to the equivalent APIs in PLayerTransaction -
  // see those for documentation.
  async SetConfirmedTargetAPZC(uint64_t aInputBlockId, ScrollableLayerGuid[] aTargets);
  // More copied from PLayerTransaction, but these are only used for testing.
  sync SetAsyncScrollOffset(ViewID scrollId, float x, float y);
  sync SetAsyncZoom(ViewID scrollId, float zoom);
  async FlushApzRepaints();
  sync GetAPZTestData() returns (APZTestData data);

  async Shutdown();
child:
  async __delete__();
};

} // layers
} // mozilla
