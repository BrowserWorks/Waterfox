
#
# WARNING WARNING WARNING
#
# This file is generated by generate_mozbuild.py (from
# https://github.com/mozilla/angle). Do not modify it without also modifying
# generate_mozbuild.py.
#
# WARNING WARNING WARNING
#
UNIFIED_SOURCES += [
    'src/common/angleutils.cpp',
    'src/common/debug.cpp',
    'src/common/Float16ToFloat32.cpp',
    'src/common/mathutil.cpp',
    'src/common/MemoryBuffer.cpp',
    'src/common/string_utils.cpp',
    'src/common/tls.cpp',
    'src/common/utilities.cpp',
    'src/compiler/preprocessor/DiagnosticsBase.cpp',
    'src/compiler/preprocessor/DirectiveHandlerBase.cpp',
    'src/compiler/preprocessor/DirectiveParser.cpp',
    'src/compiler/preprocessor/ExpressionParser.cpp',
    'src/compiler/preprocessor/Input.cpp',
    'src/compiler/preprocessor/Lexer.cpp',
    'src/compiler/preprocessor/Macro.cpp',
    'src/compiler/preprocessor/MacroExpander.cpp',
    'src/compiler/preprocessor/Preprocessor.cpp',
    'src/compiler/preprocessor/Token.cpp',
    'src/compiler/preprocessor/Tokenizer.cpp',
    'src/compiler/translator/AddAndTrueToLoopCondition.cpp',
    'src/compiler/translator/AddDefaultReturnStatements.cpp',
    'src/compiler/translator/ArrayReturnValueToOutParameter.cpp',
    'src/compiler/translator/ASTMetadataHLSL.cpp',
    'src/compiler/translator/blocklayout.cpp',
    'src/compiler/translator/blocklayoutHLSL.cpp',
    'src/compiler/translator/BreakVariableAliasingInInnerLoops.cpp',
    'src/compiler/translator/BuiltInFunctionEmulator.cpp',
    'src/compiler/translator/BuiltInFunctionEmulatorGLSL.cpp',
    'src/compiler/translator/BuiltInFunctionEmulatorHLSL.cpp',
    'src/compiler/translator/Cache.cpp',
    'src/compiler/translator/CallDAG.cpp',
    'src/compiler/translator/CodeGen.cpp',
    'src/compiler/translator/Compiler.cpp',
    'src/compiler/translator/ConstantUnion.cpp',
    'src/compiler/translator/DeferGlobalInitializers.cpp',
    'src/compiler/translator/Diagnostics.cpp',
    'src/compiler/translator/DirectiveHandler.cpp',
    'src/compiler/translator/EmulatePrecision.cpp',
    'src/compiler/translator/ExpandIntegerPowExpressions.cpp',
    'src/compiler/translator/ExtensionGLSL.cpp',
    'src/compiler/translator/FlagStd140Structs.cpp',
    'src/compiler/translator/InfoSink.cpp',
    'src/compiler/translator/Initialize.cpp',
    'src/compiler/translator/InitializeDll.cpp',
    'src/compiler/translator/InitializeParseContext.cpp',
    'src/compiler/translator/InitializeVariables.cpp',
    'src/compiler/translator/Intermediate.cpp',
    'src/compiler/translator/IntermNode.cpp',
    'src/compiler/translator/IntermNodePatternMatcher.cpp',
    'src/compiler/translator/intermOut.cpp',
    'src/compiler/translator/IntermTraverse.cpp',
    'src/compiler/translator/Operator.cpp',
    'src/compiler/translator/OutputESSL.cpp',
    'src/compiler/translator/OutputGLSL.cpp',
    'src/compiler/translator/OutputGLSLBase.cpp',
    'src/compiler/translator/OutputHLSL.cpp',
    'src/compiler/translator/ParseContext.cpp',
    'src/compiler/translator/PoolAlloc.cpp',
    'src/compiler/translator/PruneEmptyDeclarations.cpp',
    'src/compiler/translator/QualifierTypes.cpp',
    'src/compiler/translator/RecordConstantPrecision.cpp',
    'src/compiler/translator/RegenerateStructNames.cpp',
    'src/compiler/translator/RemoveDynamicIndexing.cpp',
    'src/compiler/translator/RemoveInvariantDeclaration.cpp',
    'src/compiler/translator/RemovePow.cpp',
    'src/compiler/translator/RemoveSwitchFallThrough.cpp',
    'src/compiler/translator/RewriteDoWhile.cpp',
    'src/compiler/translator/RewriteElseBlocks.cpp',
    'src/compiler/translator/RewriteUnaryMinusOperatorInt.cpp',
    'src/compiler/translator/ScalarizeVecAndMatConstructorArgs.cpp',
    'src/compiler/translator/SearchSymbol.cpp',
    'src/compiler/translator/SeparateArrayInitialization.cpp',
    'src/compiler/translator/SeparateDeclarations.cpp',
    'src/compiler/translator/SeparateExpressionsReturningArrays.cpp',
    'src/compiler/translator/ShaderVars.cpp',
    'src/compiler/translator/SimplifyLoopConditions.cpp',
    'src/compiler/translator/SplitSequenceOperator.cpp',
    'src/compiler/translator/StructureHLSL.cpp',
    'src/compiler/translator/SymbolTable.cpp',
    'src/compiler/translator/TextureFunctionHLSL.cpp',
    'src/compiler/translator/TranslatorESSL.cpp',
    'src/compiler/translator/TranslatorGLSL.cpp',
    'src/compiler/translator/TranslatorHLSL.cpp',
    'src/compiler/translator/Types.cpp',
    'src/compiler/translator/UnfoldShortCircuitAST.cpp',
    'src/compiler/translator/UnfoldShortCircuitToIf.cpp',
    'src/compiler/translator/UniformHLSL.cpp',
    'src/compiler/translator/UseInterfaceBlockFields.cpp',
    'src/compiler/translator/util.cpp',
    'src/compiler/translator/UtilsHLSL.cpp',
    'src/compiler/translator/ValidateGlobalInitializer.cpp',
    'src/compiler/translator/ValidateLimitations.cpp',
    'src/compiler/translator/ValidateMaxParameters.cpp',
    'src/compiler/translator/ValidateOutputs.cpp',
    'src/compiler/translator/ValidateSwitch.cpp',
    'src/compiler/translator/VariableInfo.cpp',
    'src/compiler/translator/VariablePacker.cpp',
    'src/compiler/translator/VersionGLSL.cpp',
    'src/third_party/compiler/ArrayBoundsClamper.cpp',
]
SOURCES += [
    'src/compiler/translator/EmulateGLFragColorBroadcast.cpp',
    'src/compiler/translator/glslang_lex.cpp',
    'src/compiler/translator/glslang_tab.cpp',
    'src/compiler/translator/RewriteTexelFetchOffset.cpp',
    'src/compiler/translator/ShaderLang.cpp',
]


if CONFIG['GNU_CXX']:
    CXXFLAGS += [
        '-Wno-attributes',
        '-Wno-shadow',
        '-Wno-sign-compare',
        '-Wno-unknown-pragmas',
        '-Wno-unreachable-code',
    ]
    if CONFIG['CLANG_CXX']:
        CXXFLAGS += [
            '-Wno-implicit-fallthrough',
            '-Wno-inconsistent-missing-override',
            '-Wno-unused-private-field',
        ]
    else:
        CXXFLAGS += [
            '-Wno-shadow-compatible-local',
            '-Wno-shadow-local',
        ]

if CONFIG['MOZ_DIRECTX_SDK_PATH'] and not CONFIG['MOZ_HAS_WINSDK_WITH_D3D']:
    LOCAL_INCLUDES += ['%' + '%s/include/' % CONFIG['MOZ_DIRECTX_SDK_PATH']]

DEFINES['_CRT_SECURE_NO_DEPRECATE'] = True
DEFINES['_HAS_EXCEPTIONS'] = 0

if not CONFIG['MOZ_DEBUG']:
    DEFINES['_SECURE_SCL'] = 0

DEFINES['ANGLE_ENABLE_D3D9'] = True
DEFINES['ANGLE_SKIP_DXGI_1_2_CHECK'] = True
if CONFIG['MOZ_HAS_WINSDK_WITH_D3D']:
    DEFINES['ANGLE_ENABLE_D3D11'] = True

DEFINES['ANGLE_COMPILE_OPTIMIZATION_LEVEL'] = 'D3DCOMPILE_OPTIMIZATION_LEVEL1'
DEFINES['ANGLE_NO_EXCEPTIONS'] = True

# We need these defined to nothing so that we don't get bogus dllimport declspecs
DEFINES['GL_APICALL'] = ""
DEFINES['GL_GLEXT_PROTOTYPES'] = ""
DEFINES['EGLAPI'] = ""


# Enable asserts for UNIMPLEMENTED()
DEFINES['NOASSERT_UNIMPLEMENTED'] = '0'

# Only build libEGL/libGLESv2 on Windows
if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
    DIRS += [ 'src/libANGLE', 'src/libGLESv2', 'src/libEGL' ]

DEFINES['ANGLE_ENABLE_HLSL'] = "1"
DEFINES['ANGLE_ENABLE_GLSL'] = "1"
DEFINES['ANGLE_ENABLE_ESSL'] = "1"
DEFINES['ANGLE_ENABLE_KEYEDMUTEX'] = "1"

EXPORTS.angle += [ 'include/GLSLANG/ShaderLang.h', 'include/GLSLANG/ShaderVars.h', 'include/platform/Platform.h' ]
EXPORTS.angle.KHR += [ 'include/KHR/khrplatform.h' ]

LOCAL_INCLUDES += [ 'include', 'src', 'src/common/third_party/numerics' ]

# We allow warnings for third-party code that can be updated from upstream.
ALLOW_COMPILER_WARNINGS = True

FINAL_LIBRARY = 'gkmedias'
