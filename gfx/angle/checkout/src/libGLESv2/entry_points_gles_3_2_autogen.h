// GENERATED FILE - DO NOT EDIT.
// Generated by generate_entry_points.py using data from gl.xml.
//
// Copyright 2020 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// entry_points_gles_3_2_autogen.h:
//   Defines the GLES 3.2 entry points.

#ifndef LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_
#define LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_

#include <GLES3/gl32.h>
#include <export.h>

namespace gl
{
ANGLE_EXPORT void GL_APIENTRY BlendBarrier();
ANGLE_EXPORT void GL_APIENTRY BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
ANGLE_EXPORT void GL_APIENTRY BlendEquationi(GLuint buf, GLenum mode);
ANGLE_EXPORT void GL_APIENTRY
BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
ANGLE_EXPORT void GL_APIENTRY BlendFunci(GLuint buf, GLenum src, GLenum dst);
ANGLE_EXPORT void GL_APIENTRY
ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
ANGLE_EXPORT void GL_APIENTRY CopyImageSubData(GLuint srcName,
                                               GLenum srcTarget,
                                               GLint srcLevel,
                                               GLint srcX,
                                               GLint srcY,
                                               GLint srcZ,
                                               GLuint dstName,
                                               GLenum dstTarget,
                                               GLint dstLevel,
                                               GLint dstX,
                                               GLint dstY,
                                               GLint dstZ,
                                               GLsizei srcWidth,
                                               GLsizei srcHeight,
                                               GLsizei srcDepth);
ANGLE_EXPORT void GL_APIENTRY DebugMessageCallback(GLDEBUGPROC callback, const void *userParam);
ANGLE_EXPORT void GL_APIENTRY DebugMessageControl(GLenum source,
                                                  GLenum type,
                                                  GLenum severity,
                                                  GLsizei count,
                                                  const GLuint *ids,
                                                  GLboolean enabled);
ANGLE_EXPORT void GL_APIENTRY DebugMessageInsert(GLenum source,
                                                 GLenum type,
                                                 GLuint id,
                                                 GLenum severity,
                                                 GLsizei length,
                                                 const GLchar *buf);
ANGLE_EXPORT void GL_APIENTRY Disablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY DrawElementsBaseVertex(GLenum mode,
                                                     GLsizei count,
                                                     GLenum type,
                                                     const void *indices,
                                                     GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY DrawElementsInstancedBaseVertex(GLenum mode,
                                                              GLsizei count,
                                                              GLenum type,
                                                              const void *indices,
                                                              GLsizei instancecount,
                                                              GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY DrawRangeElementsBaseVertex(GLenum mode,
                                                          GLuint start,
                                                          GLuint end,
                                                          GLsizei count,
                                                          GLenum type,
                                                          const void *indices,
                                                          GLint basevertex);
ANGLE_EXPORT void GL_APIENTRY Enablei(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY FramebufferTexture(GLenum target,
                                                 GLenum attachment,
                                                 GLuint texture,
                                                 GLint level);
ANGLE_EXPORT GLuint GL_APIENTRY GetDebugMessageLog(GLuint count,
                                                   GLsizei bufSize,
                                                   GLenum *sources,
                                                   GLenum *types,
                                                   GLuint *ids,
                                                   GLenum *severities,
                                                   GLsizei *lengths,
                                                   GLchar *messageLog);
ANGLE_EXPORT GLenum GL_APIENTRY GetGraphicsResetStatus();
ANGLE_EXPORT void GL_APIENTRY
GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GetObjectPtrLabel(const void *ptr,
                                                GLsizei bufSize,
                                                GLsizei *length,
                                                GLchar *label);
ANGLE_EXPORT void GL_APIENTRY GetPointerv(GLenum pname, void **params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GetTexParameterIiv(GLenum target, GLenum pname, GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params);
ANGLE_EXPORT void GL_APIENTRY GetnUniformfv(GLuint program,
                                            GLint location,
                                            GLsizei bufSize,
                                            GLfloat *params);
ANGLE_EXPORT void GL_APIENTRY GetnUniformiv(GLuint program,
                                            GLint location,
                                            GLsizei bufSize,
                                            GLint *params);
ANGLE_EXPORT void GL_APIENTRY GetnUniformuiv(GLuint program,
                                             GLint location,
                                             GLsizei bufSize,
                                             GLuint *params);
ANGLE_EXPORT GLboolean GL_APIENTRY IsEnabledi(GLenum target, GLuint index);
ANGLE_EXPORT void GL_APIENTRY MinSampleShading(GLfloat value);
ANGLE_EXPORT void GL_APIENTRY ObjectLabel(GLenum identifier,
                                          GLuint name,
                                          GLsizei length,
                                          const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY ObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label);
ANGLE_EXPORT void GL_APIENTRY PatchParameteri(GLenum pname, GLint value);
ANGLE_EXPORT void GL_APIENTRY PopDebugGroup();
ANGLE_EXPORT void GL_APIENTRY PrimitiveBoundingBox(GLfloat minX,
                                                   GLfloat minY,
                                                   GLfloat minZ,
                                                   GLfloat minW,
                                                   GLfloat maxX,
                                                   GLfloat maxY,
                                                   GLfloat maxZ,
                                                   GLfloat maxW);
ANGLE_EXPORT void GL_APIENTRY PushDebugGroup(GLenum source,
                                             GLuint id,
                                             GLsizei length,
                                             const GLchar *message);
ANGLE_EXPORT void GL_APIENTRY ReadnPixels(GLint x,
                                          GLint y,
                                          GLsizei width,
                                          GLsizei height,
                                          GLenum format,
                                          GLenum type,
                                          GLsizei bufSize,
                                          void *data);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param);
ANGLE_EXPORT void GL_APIENTRY SamplerParameterIuiv(GLuint sampler,
                                                   GLenum pname,
                                                   const GLuint *param);
ANGLE_EXPORT void GL_APIENTRY TexBuffer(GLenum target, GLenum internalformat, GLuint buffer);
ANGLE_EXPORT void GL_APIENTRY TexBufferRange(GLenum target,
                                             GLenum internalformat,
                                             GLuint buffer,
                                             GLintptr offset,
                                             GLsizeiptr size);
ANGLE_EXPORT void GL_APIENTRY TexParameterIiv(GLenum target, GLenum pname, const GLint *params);
ANGLE_EXPORT void GL_APIENTRY TexParameterIuiv(GLenum target, GLenum pname, const GLuint *params);
ANGLE_EXPORT void GL_APIENTRY TexStorage3DMultisample(GLenum target,
                                                      GLsizei samples,
                                                      GLenum internalformat,
                                                      GLsizei width,
                                                      GLsizei height,
                                                      GLsizei depth,
                                                      GLboolean fixedsamplelocations);
}  // namespace gl

#endif  // LIBGLESV2_ENTRY_POINTS_GLES_3_2_AUTOGEN_H_
