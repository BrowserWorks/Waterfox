/* -*- Mode: IDL; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

/* XXX we should define device and entry info as well (stats, etc) */

interface nsICacheDeviceInfo;
interface nsICacheEntryInfo;


[scriptable, uuid(f8c08c4b-d778-49d1-a59b-866fdc500d95)]
interface nsICacheVisitor : nsISupports
{
    /**
     * Called to provide information about a cache device.
     *
     * @param deviceID - specifies the device being visited.
     * @param deviceInfo - specifies information about this device.
     *
     * @return true to start visiting all entries for this device.
     * @return false to advance to the next device.
     */
    boolean visitDevice(in string               deviceID,
                        in nsICacheDeviceInfo   deviceInfo);

    /**
     * Called to provide information about a cache entry.
     *
     * @param deviceID - specifies the device being visited.
     * @param entryInfo - specifies information about this entry.
     *
     * @return true to visit the next entry on the current device, or if the
     *   end of the device has been reached, advance to the next device.
     * @return false to advance to the next device.
     */
    boolean visitEntry(in string                deviceID,
                       in nsICacheEntryInfo     entryInfo);
};


[scriptable, uuid(31d1c294-1dd2-11b2-be3a-c79230dca297)]
interface nsICacheDeviceInfo : nsISupports
{
    /**
     * Get a human readable description of the cache device.
     */
    readonly attribute ACString  description;

    /**
     * Get a usage report, statistics, miscellaneous data about
     * the cache device.
     */
    readonly attribute ACString  usageReport;

    /**
     * Get the number of stored cache entries.
     */
    readonly attribute unsigned long  entryCount;

    /**
     * Get the total size of the stored cache entries.
     */
    readonly attribute unsigned long  totalSize;

    /**
     * Get the upper limit of the size of the data the cache can store.
     */
    readonly attribute unsigned long  maximumSize;
};


[scriptable, uuid(fab51c92-95c3-4468-b317-7de4d7588254)]
interface nsICacheEntryInfo : nsISupports
{
    /**
     * Get the client id associated with this cache entry.
     */
    readonly attribute ACString clientID;

    /**
     * Get the id for the device that stores this cache entry.
     */
    readonly attribute ACString deviceID;

    /**
     * Get the key identifying the cache entry.
     */
    readonly attribute ACString key;

    /**
     * Get the number of times the cache entry has been opened.
     */
    readonly attribute long  fetchCount;

    /**
     * Get the last time the cache entry was opened (in seconds since the Epoch).
     */
    readonly attribute uint32_t  lastFetched;

    /**
     * Get the last time the cache entry was modified (in seconds since the Epoch).
     */
    readonly attribute uint32_t  lastModified;

    /**
     * Get the expiration time of the cache entry (in seconds since the Epoch).
     */
    readonly attribute uint32_t  expirationTime;

    /**
     * Get the cache entry data size.
     */
    readonly attribute unsigned long  dataSize;

    /**
     * Find out whether or not the cache entry is stream based.
     */
    boolean  isStreamBased();
};
