/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsIProtocolHandler.idl"

interface nsISubstitutionObserver;

/**
 * Protocol handler superinterface for a protocol which performs substitutions
 * from URIs of its scheme to URIs of another scheme.
 */
[scriptable, uuid(154c64fd-a69e-4105-89f8-bd7dfe621372)]
interface nsISubstitutingProtocolHandler : nsIProtocolHandler
{
  /**
   * Content script may access files in this package.
   */
  const short ALLOW_CONTENT_ACCESS = 1;

  /**
   * Sets the substitution for the root key:
   *   resource://root/path ==> baseURI.resolve(path)
   *
   * A null baseURI removes the specified substitution.
   *
   * A root key should always be lowercase; however, this may not be
   * enforced.
   */
  [must_use] void setSubstitution(in ACString root, in nsIURI baseURI);

  /**
   * Same as setSubstitution, but with specific flags.
   */
  [must_use] void setSubstitutionWithFlags(in ACString root, in nsIURI baseURI, in uint32_t flags);

  /**
   * Gets the substitution for the root key.
   *
   * @throws NS_ERROR_NOT_AVAILABLE if none exists.
   */
  [must_use] nsIURI getSubstitution(in ACString root);

  /**
   * Returns TRUE if the substitution exists and FALSE otherwise.
   */
  [must_use] boolean hasSubstitution(in ACString root);

  /**
   * Utility function to resolve a substituted URI.  A resolved URI is not
   * guaranteed to reference a resource that exists (ie. opening a channel to
   * the resolved URI may fail).
   *
   * @throws NS_ERROR_NOT_AVAILABLE if resURI.host() is an unknown root key.
   */
  [must_use] AUTF8String resolveURI(in nsIURI resURI);

  /**
   * Adds an observer that will be notified on the main thread whenever a
   * substitition is set or unset. Notifications are not sent for substitutions
   * that were set prior to the observer being added. Holds an owning reference
   * to the observer until removeObserver is called or the protocol handler is
   * destroyed.
   */
  [must_use] void addObserver(in nsISubstitutionObserver observer);

  /**
   * Removes the observer.
   */
  [must_use] void removeObserver(in nsISubstitutionObserver observer);
};
