/* Any copyright is dedicated to the Public Domain.
  http://creativecommons.org/publicdomain/zero/1.0/ */
/* eslint-disable max-len */

"use strict";

/*
 * THIS FILE IS AUTOGENERATED. DO NOT MODIFY BY HAND. RUN TESTS IN FIXTURES/ TO UPDATE.
 */

const {
  parsePacketsWithFronts,
} = require("chrome://mochitests/content/browser/devtools/client/webconsole/test/browser/stub-generator-helpers");
const { prepareMessage } = require("devtools/client/webconsole/utils/messages");
const {
  ConsoleMessage,
  NetworkEventMessage,
} = require("devtools/client/webconsole/types");

const rawPackets = new Map();
rawPackets.set(`GET request`, {
  "type": "networkEvent",
  "timeStamp": 1572867483805,
  "node": null,
  "actor": "server0.conn0.netEvent4",
  "discardRequestBody": true,
  "discardResponseBody": true,
  "startedDateTime": "2019-11-04T11:06:34.542Z",
  "request": {
    "url": "http://example.com/inexistent.html",
    "method": "GET",
    "headersSize": 396
  },
  "isXHR": false,
  "cause": {
    "type": "img",
    "loadingDocumentUri": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
    "lastFrame": {
      "filename": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
      "lineNumber": 3,
      "columnNumber": 1,
      "functionName": "triggerPacket",
      "asyncCause": null
    },
    "stacktraceAvailable": true
  },
  "response": {
    "httpVersion": "HTTP/1.1",
    "status": "404",
    "statusText": "Not Found",
    "headersSize": 160,
    "remoteAddress": "127.0.0.1",
    "remotePort": 8888,
    "content": {
      "mimeType": "text/html; charset=utf-8"
    },
    "bodySize": 418,
    "transferredSize": 578
  },
  "timings": {},
  "updates": [
    "requestHeaders",
    "requestCookies",
    "responseStart",
    "securityInfo",
    "responseHeaders",
    "responseCookies",
    "eventTimings",
    "responseContent"
  ],
  "private": false,
  "isThirdPartyTrackingResource": false,
  "referrerPolicy": "no-referrer-when-downgrade",
  "channelId": 265845590720515
});

rawPackets.set(`GET request update`, {
  "networkInfo": {
    "type": "networkEvent",
    "actor": "server0.conn0.netEvent4",
    "request": {
      "url": "http://example.com/inexistent.html",
      "method": "GET",
      "headersSize": 396
    },
    "response": {
      "httpVersion": "HTTP/1.1",
      "status": "404",
      "statusText": "Not Found",
      "headersSize": 160,
      "remoteAddress": "127.0.0.1",
      "remotePort": 8888,
      "content": {
        "mimeType": "text/html; charset=utf-8"
      },
      "bodySize": 418,
      "transferredSize": 578
    },
    "totalTime": 14
  }
});

rawPackets.set(`XHR GET request`, {
  "type": "networkEvent",
  "timeStamp": 1572867483805,
  "node": null,
  "actor": "server0.conn0.netEvent20",
  "discardRequestBody": true,
  "discardResponseBody": true,
  "startedDateTime": "2019-11-04T11:06:34.909Z",
  "request": {
    "url": "http://example.com/inexistent.html",
    "method": "GET",
    "headersSize": 385
  },
  "isXHR": true,
  "cause": {
    "type": "xhr",
    "loadingDocumentUri": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
    "lastFrame": {
      "filename": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
      "lineNumber": 4,
      "columnNumber": 5,
      "functionName": "triggerPacket",
      "asyncCause": null
    },
    "stacktraceAvailable": true
  },
  "response": {
    "httpVersion": "HTTP/1.1",
    "status": "404",
    "statusText": "Not Found",
    "headersSize": 160,
    "remoteAddress": "127.0.0.1",
    "remotePort": 8888,
    "content": {
      "mimeType": "text/html; charset=utf-8"
    },
    "bodySize": 418,
    "transferredSize": 578
  },
  "timings": {},
  "updates": [
    "requestHeaders",
    "requestCookies",
    "responseStart",
    "securityInfo",
    "responseHeaders",
    "responseCookies",
    "eventTimings",
    "responseContent"
  ],
  "private": false,
  "isThirdPartyTrackingResource": false,
  "referrerPolicy": "no-referrer-when-downgrade",
  "channelId": 265845590720516
});

rawPackets.set(`XHR GET request update`, {
  "networkInfo": {
    "type": "networkEvent",
    "actor": "server0.conn0.netEvent20",
    "request": {
      "url": "http://example.com/inexistent.html",
      "method": "GET",
      "headersSize": 385
    },
    "response": {
      "httpVersion": "HTTP/1.1",
      "status": "404",
      "statusText": "Not Found",
      "headersSize": 160,
      "remoteAddress": "127.0.0.1",
      "remotePort": 8888,
      "content": {
        "mimeType": "text/html; charset=utf-8"
      },
      "bodySize": 418,
      "transferredSize": 578
    },
    "totalTime": 27
  }
});

rawPackets.set(`XHR POST request`, {
  "type": "networkEvent",
  "timeStamp": 1572867483805,
  "node": null,
  "actor": "server0.conn0.netEvent36",
  "discardRequestBody": true,
  "discardResponseBody": true,
  "startedDateTime": "2019-11-04T11:06:35.007Z",
  "request": {
    "url": "http://example.com/inexistent.html",
    "method": "POST",
    "headersSize": 433
  },
  "isXHR": true,
  "cause": {
    "type": "xhr",
    "loadingDocumentUri": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
    "lastFrame": {
      "filename": "http://example.com/browser/devtools/client/webconsole/test/browser/stub-generators/test-network-event.html",
      "lineNumber": 4,
      "columnNumber": 5,
      "functionName": "triggerPacket",
      "asyncCause": null
    },
    "stacktraceAvailable": true
  },
  "response": {
    "httpVersion": "HTTP/1.1",
    "status": "404",
    "statusText": "Not Found",
    "headersSize": 160,
    "remoteAddress": "127.0.0.1",
    "remotePort": 8888,
    "content": {
      "mimeType": "text/html; charset=utf-8"
    },
    "bodySize": 418,
    "transferredSize": 578
  },
  "timings": {},
  "updates": [
    "requestHeaders",
    "requestCookies",
    "responseStart",
    "securityInfo",
    "responseHeaders",
    "responseCookies",
    "eventTimings",
    "responseContent"
  ],
  "private": false,
  "isThirdPartyTrackingResource": false,
  "referrerPolicy": "no-referrer-when-downgrade",
  "channelId": 265845590720517
});

rawPackets.set(`XHR POST request update`, {
  "networkInfo": {
    "type": "networkEvent",
    "actor": "server0.conn0.netEvent36",
    "request": {
      "url": "http://example.com/inexistent.html",
      "method": "POST",
      "headersSize": 433
    },
    "response": {
      "httpVersion": "HTTP/1.1",
      "status": "404",
      "statusText": "Not Found",
      "headersSize": 160,
      "remoteAddress": "127.0.0.1",
      "remotePort": 8888,
      "content": {
        "mimeType": "text/html; charset=utf-8"
      },
      "bodySize": 418,
      "transferredSize": 578
    },
    "totalTime": 8
  }
});


const stubPackets = parsePacketsWithFronts(rawPackets);

const stubPreparedMessages = new Map();
for (const [key, packet] of Array.from(stubPackets.entries())) {
  const transformedPacket = prepareMessage(packet.networkInfo || packet, {
    getNextId: () => "1",
  });
  const message = NetworkEventMessage(transformedPacket);
  stubPreparedMessages.set(key, message);
}

module.exports = {
  rawPackets,
  stubPreparedMessages,
  stubPackets,
};
