<?xml version="1.0"?>
<?xml-stylesheet type="text/css" href="chrome://global/skin"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>
<!--
The test case creates 3 <xul:browser>s, load entries into them, modify the
documents, and then check if grouped history merge / back / forward all work
with bfcache preserved.

Related bugs:
https://bugzilla.mozilla.org/show_bug.cgi?id=1276553
https://bugzilla.mozilla.org/show_bug.cgi?id=1310768
-->
<window title="Test GroupedSHistory"
        xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul" onload="run();">

  <!-- test code goes here -->
  <script type="application/javascript">
  <![CDATA[

  const {interfaces: Ci, classes: Cc, results: Cr, utils: Cu} = Components;
  Cu.import("resource://testing-common/TestUtils.jsm");
  Cu.import("resource://testing-common/ContentTask.jsm");
  Cu.import("resource://testing-common/BrowserTestUtils.jsm");
  ContentTask.setTestScope(window.opener.wrappedJSObject);

  let imports = ['SimpleTest', 'SpecialPowers', 'ok', 'is', 'info'];
  for (let name of imports) {
    window[name] = window.opener.wrappedJSObject[name];
  }

  function run() {
    SpecialPowers.pushPrefEnv(
      {'set' : [[ 'browser.groupedhistory.enabled', true ]]})
    // Since we're not going to use GroupedSHistory in non-10s or
    // chrome-only URLs, we don't test for non-remote browsers anymore.
    //
    // As a note, there are 2 known issues in non-10s:
    // 1. nsDocShell::InternalLoad could start before nsFrameLoader calls
    // EvictAllContentViewers, and causes RestoreFromHistory fails.
    // 2. If using sendAsyncMessage, messages may be queued in
    // SameProcessMessageQueue, and cause "pagehide" being delivered to the
    // message manager of background <xul:browser> after swap.
    .then(() => test(true))
    .then(() => {
      window.close();
      SimpleTest.finish();
    });
  }

  function test(remote) {
    let act, bg1, bg2;
    return Promise.resolve()

    // create background browser 1 with 1 entry
    .then(() => info('TEST-INFO | test create browser #1, remote=' + remote))
    .then(() => createBrowser('pineapple', remote))
    .then(b => bg1 = b)
    .then(() => verifyBrowser(bg1, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    false      /* canGoForward */,
                                    false      /* partial */ ))
    .then(() => addBfcachedText(bg1))

     // create background browser 2 with 2 entries
    .then(() => info('TEST-INFO | test create browser #2, remote=' + remote))
    .then(() => createBrowser('apple', remote))
    .then(b => bg2 = b)
    .then(() => verifyBrowser(bg2, 'apple'     /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    false      /* canGoForward */,
                                    false      /* partial */ ))
    .then(() => addBfcachedText(bg2))
    .then(() => loadURI(bg2, getDummyHtml('pencil')))
    .then(() => verifyBrowser(bg2, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    false      /* partial */ ))
    .then(() => addBfcachedText(bg2))

    // create active browser with 1 entry
    .then(() => info('TEST-INFO | test create browser #3, remote=' + remote))
    .then(() => createBrowser('pen', remote, true))
    .then(b => act = b)
    .then(() => verifyBrowser(act, 'pen'       /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    false      /* canGoForward */,
                                    false      /* partial */ ))
    .then(() => addBfcachedText(act))

    // merge to 2 entries pen-pineapple
    // act: pineapple
    // bg1: pen
    .then(() => info('TEST-INFO | test merge history #1, remote=' + remote))
    .then(() => mergeHistory(act, bg1, 'pineapple'))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    2          /* globalLength */,
                                    true       /* bfcached */ ))

    // merge to 4 entries pen-pineapple-apple-pencil
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test merge history #2, remote=' + remote))
    .then(() => mergeHistory(act, bg2, 'pencil'))
    .then(() => verifyBrowser(act, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test go back
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history go back #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goBack.bind(act), 'pencil', 'apple'))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test go back
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test history go back #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goBack.bind(act), 'apple', 'pineapple', bg2))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test go back
    // act: pen
    // bg1: pineapple
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test history go back #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goBack.bind(act), 'pineapple', 'pen', bg1))
    .then(() => verifyBrowser(act, 'pen'       /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    0          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test go forward
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test history go forward #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goForward.bind(act), 'pen', 'pineapple', bg1))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test go forward
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history go forward #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goForward.bind(act), 'pineapple', 'apple', bg2))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test go forward
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history go forward #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.goForward.bind(act), 'apple', 'pencil'))
    .then(() => verifyBrowser(act, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test goto index
    // act: pen
    // bg1: apple-pencil
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history goto index #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.gotoIndex.bind(act, 0), 'pencil', 'pen', bg1))
    .then(() => verifyBrowser(act, 'pen'       /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    0          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test goto index
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history goto index #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.gotoIndex.bind(act, 2), 'pen', 'apple', bg1))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test goto index
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test history goto index #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.gotoIndex.bind(act, 1), 'apple', 'pineapple', bg2))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test goto index
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test history goto index #4, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.gotoIndex.bind(act, 3), 'pineapple', 'pencil', bg2))
    .then(() => verifyBrowser(act, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test content go back
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go back #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoBack.bind(null, act), 'pencil', 'apple'))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go back
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test content history go back #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoBack.bind(null, act), 'apple', 'pineapple', bg2))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go back
    // act: pen
    // bg1: pineapple
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test content history go back #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoBack.bind(null, act), 'pineapple', 'pen', bg1))
    .then(() => verifyBrowser(act, 'pen'       /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    0          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test content go forward
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test content history go forward #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoForward.bind(null, act), 'pen', 'pineapple', bg1))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go forward
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go forward #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoForward.bind(null, act), 'pineapple', 'apple', bg2))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test content go forward
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go forward #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGoForward.bind(null, act), 'apple', 'pencil'))
    .then(() => verifyBrowser(act, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test content go
    // act: pen
    // bg1: apple-pencil
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go #1, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGo.bind(null, act, -3), 'pencil', 'pen', bg1))
    .then(() => verifyBrowser(act, 'pen'       /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    false      /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    0          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go #2, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGo.bind(null, act, 2), 'pen', 'apple', bg1))
    .then(() => verifyBrowser(act, 'apple'     /* title */,
                                    0          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test content history go #3, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGo.bind(null, act, -1), 'apple', 'pineapple', bg2))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))
    // test content go
    // act: apple-pencil
    // bg1: pen
    // bg2: pineapple
    .then(() => info('TEST-INFO | test content history go #4, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, contentGo.bind(null, act, 2), 'pineapple', 'pencil', bg2))
    .then(() => verifyBrowser(act, 'pencil'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    2          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // test history change to 3 entries pen-pineapple-banana
    // act: pineapple
    // bg1: pen
    // bg2: apple-pencil
    .then(() => info('TEST-INFO | test history change, remote=' + remote))
    .then(() => wrapHistoryNavFn(act, act.gotoIndex.bind(act, 1), 'pencil', 'pineapple', bg2))
    .then(() => verifyBrowser(act, 'pineapple' /* title */,
                                    0          /* index */,
                                    1          /* length */,
                                    true       /* canGoBack */,
                                    true       /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    4          /* globalLength */,
                                    true       /* bfcached */ ))

    // act: pineapple-banana
    // bg1: pen
    // bg2: (removed from group)
    .then(() => loadURI(act, getDummyHtml('banana')))
    .then(() => verifyBrowser(act, 'banana'    /* title */,
                                    1          /* index */,
                                    2          /* length */,
                                    true       /* canGoBack */,
                                    false      /* canGoForward */,
                                    true       /* partial */,
                                    1          /* offset */,
                                    3          /* globalLength */ ))
  }

  function getDummyHtml(title) {
    return 'data:text/html;charset=UTF-8,' +
     '<html><head><title>' + title + '</title><script>' +
     'window.addEventListener("pageshow", e => document.dispatchEvent(' +
     '  new CustomEvent("test:content-pageshow", {detail: document.title})));' +
     'window.addEventListener("pagehide", e => document.dispatchEvent(' +
     '  new CustomEvent("test:content-pagehide", {detail: document.title})));' +
     'window.addEventListener("visibilitychange", e => document.dispatchEvent(' +
     '  new CustomEvent("test:content-visibilitychange", {detail: ' +
     '    {title: document.title, visibility: document.visibilityState}})));' +
     '</script></head><body><h1>' + title + '</h1><p id="p1"></p></body></html>';
  }

  let gBrowserCount = 0;
  function createBrowser(title, remote, active = false) {
    let browser = document.createElement('browser');
    browser.testId = ++gBrowserCount; // for debugging
    browser.setAttribute('type', 'content');
    browser.setAttribute('remote', remote);
    browser.setAttribute('src', getDummyHtml(title));
    browser.docShellIsActive = active;
    document.getElementById('stack').appendChild(browser);
    return BrowserTestUtils.browserLoaded(browser)
           .then(() => {
             // Register our own event listeners.
             //
             // We don't use BrowserTestUtils.waitForContentEvents, because when
             // swapping frameloaders, the event listeners at content side are
             // also swapped to another browser. The message listener registered
             // by waitForContentEvents will never receive messages consequently.
             browser.messageManager.loadFrameScript('data:,' +
               'addEventListener("test:content-pageshow", e => {' +
                 'if (e.target == content.document) {' +
                   'sendAsyncMessage("test:content-pageshow", { title: e.detail });' +
                 '}' +
               '}, true, true);' +
               'addEventListener("test:content-pagehide", e => {' +
                 'if (e.target == content.document) {' +
                   'sendAsyncMessage("test:content-pagehide", { title: e.detail });' +
                 '}' +
               '}, true, true);' +
               'addEventListener("test:content-visibilitychange", e => {' +
                 'sendAsyncMessage("test:content-visibilitychange", e.detail);' +
               '}, true, true);',
               true);

             // Log for debugging purpose.
             browser.messageManager.addMessageListener('test:content-pageshow',
               msg => info('TEST-INFO | pageshow#' + browser.testId + ' ' + JSON.stringify(msg.data)));
             browser.messageManager.addMessageListener('test:content-pagehide',
               msg => info('TEST-INFO | pagehide#' + browser.testId + ' ' + JSON.stringify(msg.data)));
             browser.messageManager.addMessageListener('test:content-visibilitychange',
               msg => info('TEST-INFO | visibilitychange#' + browser.testId + ' ' + JSON.stringify(msg.data)));
           })
           .then(() => {
             // A trick to ensure webProgress object is created for e10s case.
             // Otherwise canGoBack / canGoForward won't be updated.
             ok(browser.webProgress, 'check browser.webProgress exists');
             return browser;
           });
  }

  function addBfcachedText(browser) {
    return ContentTask.spawn(browser, null, () => {
      content.document.getElementById('p1').textContent = 'modified';
    });
  }

  function loadURI(browser, uri) {
    let promise = BrowserTestUtils.browserLoaded(browser, false);
    browser.loadURI(uri);
    return promise;
  }

  function mergeHistory(b1, b2, title) {
    let promises = [];
    let pagehide1, pagehide2;

    promises.push(BrowserTestUtils.waitForMessage(b1.messageManager,
      'test:content-visibilitychange', msg => msg.data &&
        (msg.data.title == title) && (msg.data.visibility == 'visible')));

    // For swapping remote browsers, we'll also receive Content:LocationChange
    if (b1.isRemoteBrowser) {
      // It's guaranteed location change can be delivered to b1's message
      // manager, since frameloader is synchronously swapping on main thread
      // after calling PartialSHistory::OnActive(). Therefore the message could
      // only be handled after swapping.
      promises.push(BrowserTestUtils.waitForMessage(b1.messageManager, 'Content:LocationChange'));
    }

    promises.push(Promise.resolve().then(() => {
      let f1 = b1.QueryInterface(Components.interfaces.nsIFrameLoaderOwner).frameLoader;
      let f2 = b2.QueryInterface(Components.interfaces.nsIFrameLoaderOwner).frameLoader;
      return f1.appendPartialSHistoryAndSwap(f2);
    }));

    return Promise.all(promises);
  }

  function wrapHistoryNavFn(browser, navFn, prevTitle, nextTitle, browserToSwap) {
    let promises = [];

    // Expecting pagehide from previous page, and a pageshow from next page.
    //
    // "Pagehide" is sent before calling OnRequestCrossBrowserNavigation(),
    // so it should be handled before swapping. "Pageshow" on the other hand
    // should be handled after swapping cause frameloader is synchronously
    // swapping on main thread after calling PartialSHistory::OnActive().
    //
    // Therefore both messages should be delivered to browser.messageManager.
    promises.push(BrowserTestUtils.waitForMessage(browser.messageManager,
      'test:content-pagehide', msg => msg.data && (msg.data.title == prevTitle)));
    promises.push(BrowserTestUtils.waitForMessage(browser.messageManager,
      'test:content-pageshow', msg => msg.data && (msg.data.title == nextTitle)));
    promises.push(navFn() || Promise.resolve());

    // For swapping remote browsers, we'll also receive Content:LocationChange
    if (browserToSwap && browser.isRemoteBrowser) {
      promises.push(BrowserTestUtils.waitForMessage(browser.messageManager,
        'Content:LocationChange'));
    }

    return Promise.all(promises);
  }

  function contentGoBack(browser) {
    ContentTask.spawn(browser, null, () => content.history.back());
  }

  function contentGoForward(browser) {
    ContentTask.spawn(browser, null, () => content.history.forward());
  }

  function contentGo(browser, offset) {
    ContentTask.spawn(browser, { offset },
      ({ offset }) => content.history.go(offset));
  }

  function verifyBrowser(browser, title, index, length, canGoBack, canGoForward,
                         partial, offset = 0, globalLength = length, bfcached = false) {
    is(browser.canGoBack, canGoBack, 'check browser.canGoBack');
    is(browser.canGoForward, canGoForward, 'check browser.canGoForward');
    if (partial) {
      let frameLoader = browser.QueryInterface(Components.interfaces.nsIFrameLoaderOwner).frameLoader;
      is(frameLoader.groupedSHistory.count, globalLength, 'check groupedSHistory.count');
    }

    return ContentTask.spawn(browser,
        { title, index, length, canGoBack, canGoForward, partial, offset, globalLength, bfcached },
        ({ title, index, length, canGoBack, canGoForward, partial, offset, globalLength, bfcached }) => {
      let webNav = docShell.QueryInterface(Ci.nsIWebNavigation);
      let shistory = webNav.sessionHistory;
      is(webNav.canGoBack, canGoBack, 'check webNav.canGoBack');
      is(webNav.canGoForward, canGoForward, 'check webNav.canGoForward');
      is(shistory.index, index, 'check shistory.index');
      is(shistory.count, length, 'check shistory.count');
      is(shistory.isPartial, partial, 'check shistory.isPartial');
      is(shistory.globalIndexOffset, offset, 'check shistory.globalIndexOffset');
      is(shistory.globalCount, globalLength, 'check shistory.globalCount');
      is(content.document.title, title, 'check title');
      is(content.document.getElementById('p1').textContent, bfcached ? 'modified' : '', 'check bfcached content');
      is(content.history.length, globalLength, 'check history.legnth');
    });
  }

  ]]>
  </script>
  <stack id="stack" flex="1" />
</window>
