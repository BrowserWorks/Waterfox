# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

TEST_DIRS += ['tests']

XPIDL_SOURCES += [
    'nsCExternalHandlerService.idl',
    'nsIContentDispatchChooser.idl',
    'nsIExternalHelperAppService.idl',
    'nsIExternalProtocolService.idl',
    'nsIExternalSharingAppService.idl',
    'nsIExternalURLHandlerService.idl',
    'nsIHandlerService.idl',
    'nsIHelperAppLauncherDialog.idl',
]

XPIDL_MODULE = 'exthandler'

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
    osdir = 'win'
    LOCAL_INCLUDES += ['win']
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
    osdir = 'mac'
elif CONFIG['MOZ_WIDGET_TOOLKIT'] in ('android', 'uikit'):
    osdir = CONFIG['MOZ_WIDGET_TOOLKIT']
else:
    osdir = 'unix'

EXPORTS += [
    osdir + '/nsOSHelperAppService.h'
]

EXPORTS += [
    'ContentHandlerService.h',
    'nsExternalHelperAppService.h',
]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':
    EXPORTS += [ '%s/%s' % (osdir, f) for f in [
        'nsExternalSharingAppService.h',
        'nsExternalURLHandlerService.h',
    ]]

EXPORTS.mozilla.dom += [
    'ExternalHelperAppChild.h',
    'ExternalHelperAppParent.h',
]

UNIFIED_SOURCES += [
    'ContentHandlerService.cpp',
    'ExternalHelperAppChild.cpp',
    'ExternalHelperAppParent.cpp',
    'HandlerServiceParent.cpp',
    'nsExternalHelperAppService.cpp',
    'nsExternalProtocolHandler.cpp',
    'nsLocalHandlerApp.cpp',
    'nsMIMEInfoImpl.cpp',
]

if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'cocoa':
    UNIFIED_SOURCES += [
        'mac/nsLocalHandlerAppMac.mm',
        'mac/nsMIMEInfoMac.mm',
        'mac/nsOSHelperAppService.mm',
    ]
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'uikit':
    UNIFIED_SOURCES += [
        'uikit/nsLocalHandlerAppUIKit.mm',
        'uikit/nsMIMEInfoUIKit.mm',
        'uikit/nsOSHelperAppService.mm',
    ]
else:
    # These files can't be built in unified mode because they redefine LOG.
    SOURCES += [
        osdir + '/nsOSHelperAppService.cpp',
    ]
    if CONFIG['GNU_CXX']:
        CXXFLAGS += ['-Wno-error=shadow']

if 'gtk' in CONFIG['MOZ_WIDGET_TOOLKIT']:
    UNIFIED_SOURCES += [
        'unix/nsGNOMERegistry.cpp',
        'unix/nsMIMEInfoUnix.cpp',
    ]
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'android':
    UNIFIED_SOURCES += [
        'android/nsAndroidHandlerApp.cpp',
        'android/nsExternalSharingAppService.cpp',
        'android/nsExternalURLHandlerService.cpp',
        'android/nsMIMEInfoAndroid.cpp',
    ]
elif CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
    UNIFIED_SOURCES += [
        'win/nsMIMEInfoWin.cpp',
    ]

if CONFIG['MOZ_ENABLE_DBUS']:
    UNIFIED_SOURCES += [
        'nsDBusHandlerApp.cpp',
    ]

if CONFIG['MOZ_ENABLE_CONTENTACTION']:
    UNIFIED_SOURCES += [
        'nsContentHandlerApp.cpp',
    ]

EXTRA_COMPONENTS += [
    'nsHandlerService-json.js',
    'nsHandlerService-json.manifest',
    'nsHandlerService.js',
    'nsHandlerService.manifest',
    'nsWebHandlerApp.js',
    'nsWebHandlerApp.manifest',
]

IPDL_SOURCES += [
    'PExternalHelperApp.ipdl',
    'PHandlerService.ipdl',
]

include('/ipc/chromium/chromium-config.mozbuild')

FINAL_LIBRARY = 'xul'

LOCAL_INCLUDES += [
    '/dom/base',
    '/dom/ipc',
    '/netwerk/base',
    '/netwerk/protocol/http',
]

if CONFIG['MOZ_ENABLE_DBUS']:
    CXXFLAGS += CONFIG['TK_CFLAGS']
    CXXFLAGS += CONFIG['MOZ_DBUS_CFLAGS']

if CONFIG['MOZ_WIDGET_TOOLKIT'] in ('gtk2', 'gtk3'):
    CXXFLAGS += CONFIG['TK_CFLAGS']
    CXXFLAGS += CONFIG['MOZ_DBUS_GLIB_CFLAGS']
