// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT
// file at the top-level directory of this distribution and at
// http://rust-lang.org/COPYRIGHT.
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// Characters and their corresponding confusables were collected from
// http://www.unicode.org/Public/security/revision-06/confusables.txt

use syntax_pos::mk_sp as make_span;
use errors::DiagnosticBuilder;
use super::StringReader;

const UNICODE_ARRAY: &'static [(char, &'static str, char)] = &[
    ('¬†', "No-Break Space", ' '),
    ('·öÄ', "Ogham Space Mark", ' '),
    ('‚ÄÄ', "En Quad", ' '),
    ('‚ÄÅ', "Em Quad", ' '),
    ('‚ÄÇ', "En Space", ' '),
    ('‚ÄÉ', "Em Space", ' '),
    ('‚ÄÑ', "Three-Per-Em Space", ' '),
    ('‚ÄÖ', "Four-Per-Em Space", ' '),
    ('‚ÄÜ', "Six-Per-Em Space", ' '),
    ('‚Äá', "Figure Space", ' '),
    ('‚Äà', "Punctuation Space", ' '),
    ('‚Äâ', "Thin Space", ' '),
    ('‚Ää', "Hair Space", ' '),
    ('‚ÄØ', "Narrow No-Break Space", ' '),
    ('‚Åü', "Medium Mathematical Space", ' '),
    ('„ÄÄ', "Ideographic Space", ' '),
    ('ﬂ∫', "Nko Lajanyalan", '_'),
    ('Ôπç', "Dashed Low Line", '_'),
    ('Ôπé', "Centreline Low Line", '_'),
    ('Ôπè', "Wavy Low Line", '_'),
    ('‚Äê', "Hyphen", '-'),
    ('‚Äë', "Non-Breaking Hyphen", '-'),
    ('‚Äí', "Figure Dash", '-'),
    ('‚Äì', "En Dash", '-'),
    ('‚Äî', "Em Dash", '-'),
    ('Ôπò', "Small Em Dash", '-'),
    ('‚ÅÉ', "Hyphen Bullet", '-'),
    ('Àó', "Modifier Letter Minus Sign", '-'),
    ('‚àí', "Minus Sign", '-'),
    ('„Éº', "Katakana-Hiragana Prolonged Sound Mark", '-'),
    ('Ÿ´', "Arabic Decimal Separator", ','),
    ('‚Äö', "Single Low-9 Quotation Mark", ','),
    ('Íìπ', "Lisu Letter Tone Na Po", ','),
    ('Ôºå', "Fullwidth Comma", ','),
    ('Õæ', "Greek Question Mark", ';'),
    ('Ôºõ', "Fullwidth Semicolon", ';'),
    ('‡§É', "Devanagari Sign Visarga", ':'),
    ('‡™É', "Gujarati Sign Visarga", ':'),
    ('Ôºö', "Fullwidth Colon", ':'),
    ('÷â', "Armenian Full Stop", ':'),
    ('‹É', "Syriac Supralinear Colon", ':'),
    ('‹Ñ', "Syriac Sublinear Colon", ':'),
    ('Ô∏∞', "Presentation Form For Vertical Two Dot Leader", ':'),
    ('·†É', "Mongolian Full Stop", ':'),
    ('·†â', "Mongolian Manchu Full Stop", ':'),
    ('‚Åö', "Two Dot Punctuation", ':'),
    ('◊É', "Hebrew Punctuation Sof Pasuq", ':'),
    ('À∏', "Modifier Letter Raised Colon", ':'),
    ('Íûâ', "Modifier Letter Colon", ':'),
    ('‚à∂', "Ratio", ':'),
    ('Àê', "Modifier Letter Triangular Colon", ':'),
    ('ÍìΩ', "Lisu Letter Tone Mya Jeu", ':'),
    ('ÔºÅ', "Fullwidth Exclamation Mark", '!'),
    ('«É', "Latin Letter Retroflex Click", '!'),
    (' î', "Latin Letter Glottal Stop", '?'),
    ('‡•Ω', "Devanagari Letter Glottal Stop", '?'),
    ('·éÆ', "Cherokee Letter He", '?'),
    ('Ôºü', "Fullwidth Question Mark", '?'),
    ('ùÖ≠', "Musical Symbol Combining Augmentation Dot", '.'),
    ('‚Ä§', "One Dot Leader", '.'),
    ('€î', "Arabic Full Stop", '.'),
    ('‹Å', "Syriac Supralinear Full Stop", '.'),
    ('‹Ç', "Syriac Sublinear Full Stop", '.'),
    ('Íòé', "Vai Full Stop", '.'),
    ('ê©ê', "Kharoshthi Punctuation Dot", '.'),
    ('¬∑', "Middle Dot", '.'),
    ('Ÿ†', "Arabic-Indic Digit Zero", '.'),
    ('€∞', "Extended Arabic-Indic Digit Zero", '.'),
    ('Íì∏', "Lisu Letter Tone Mya Ti", '.'),
    ('„ÄÇ', "Ideographic Full Stop", '.'),
    ('„Éª', "Katakana Middle Dot", '.'),
    ('’ù', "Armenian Comma", '\''),
    ('Ôºá', "Fullwidth Apostrophe", '\''),
    ('‚Äò', "Left Single Quotation Mark", '\''),
    ('‚Äô', "Right Single Quotation Mark", '\''),
    ('‚Äõ', "Single High-Reversed-9 Quotation Mark", '\''),
    ('‚Ä≤', "Prime", '\''),
    ('‚Äµ', "Reversed Prime", '\''),
    ('’ö', "Armenian Apostrophe", '\''),
    ('◊≥', "Hebrew Punctuation Geresh", '\''),
    ('·øØ', "Greek Varia", '\''),
    ('ÔΩÄ', "Fullwidth Grave Accent", '\''),
    ('ŒÑ', "Greek Tonos", '\''),
    ('·øΩ', "Greek Oxia", '\''),
    ('·æΩ', "Greek Koronis", '\''),
    ('·æø', "Greek Psili", '\''),
    ('·øæ', "Greek Dasia", '\''),
    (' π', "Modifier Letter Prime", '\''),
    ('Õ¥', "Greek Numeral Sign", '\''),
    ('Àä', "Modifier Letter Acute Accent", '\''),
    ('Àã', "Modifier Letter Grave Accent", '\''),
    ('À¥', "Modifier Letter Middle Grave Accent", '\''),
    (' ª', "Modifier Letter Turned Comma", '\''),
    (' Ω', "Modifier Letter Reversed Comma", '\''),
    (' º', "Modifier Letter Apostrophe", '\''),
    (' æ', "Modifier Letter Right Half Ring", '\''),
    ('Íûå', "Latin Small Letter Saltillo", '\''),
    ('◊ô', "Hebrew Letter Yod", '\''),
    ('ﬂ¥', "Nko High Tone Apostrophe", '\''),
    ('ﬂµ', "Nko Low Tone Apostrophe", '\''),
    ('ÔºÇ', "Fullwidth Quotation Mark", '"'),
    ('‚Äú', "Left Double Quotation Mark", '"'),
    ('‚Äù', "Right Double Quotation Mark", '"'),
    ('‚Äü', "Double High-Reversed-9 Quotation Mark", '"'),
    ('‚Ä≥', "Double Prime", '"'),
    ('‚Ä∂', "Reversed Double Prime", '"'),
    ('„ÄÉ', "Ditto Mark", '"'),
    ('◊¥', "Hebrew Punctuation Gershayim", '"'),
    ('Àù', "Double Acute Accent", '"'),
    (' ∫', "Modifier Letter Double Prime", '"'),
    ('À∂', "Modifier Letter Middle Double Acute Accent", '"'),
    ('Àµ', "Modifier Letter Middle Double Grave Accent", '"'),
    ('ÀÆ', "Modifier Letter Double Apostrophe", '"'),
    ('◊≤', "Hebrew Ligature Yiddish Double Yod", '"'),
    ('‚ùû', "Heavy Double Comma Quotation Mark Ornament", '"'),
    ('‚ùù', "Heavy Double Turned Comma Quotation Mark Ornament", '"'),
    ('‚ù®', "Medium Left Parenthesis Ornament", '('),
    ('Ô¥æ', "Ornate Left Parenthesis", '('),
    ('Ôºà', "Fullwidth Left Parenthesis", '('),
    ('‚ù©', "Medium Right Parenthesis Ornament", ')'),
    ('Ô¥ø', "Ornate Right Parenthesis", ')'),
    ('Ôºâ', "Fullwidth Right Parenthesis", ')'),
    ('Ôºª', "Fullwidth Left Square Bracket", '['),
    ('‚ù≤', "Light Left Tortoise Shell Bracket Ornament", '['),
    ('„Äå', "Left Corner Bracket", '['),
    ('„Äé', "Left White Corner Bracket", '['),
    ('„Äê', "Left Black Lenticular Bracket", '['),
    ('„Äî', "Left Tortoise Shell Bracket", '['),
    ('„Äñ', "Left White Lenticular Bracket", '['),
    ('„Äò', "Left White Tortoise Shell Bracket", '['),
    ('„Äö', "Left White Square Bracket", '['),
    ('ÔºΩ', "Fullwidth Right Square Bracket", ']'),
    ('‚ù≥', "Light Right Tortoise Shell Bracket Ornament", ']'),
    ('„Äç', "Right Corner Bracket", ']'),
    ('„Äè', "Right White Corner Bracket", ']'),
    ('„Äë', "Right Black Lenticular Bracket", ']'),
    ('„Äï', "Right Tortoise Shell Bracket", ']'),
    ('„Äó', "Right White Lenticular Bracket", ']'),
    ('„Äô', "Right White Tortoise Shell Bracket", ']'),
    ('„Äõ', "Right White Square Bracket", ']'),
    ('‚ù¥', "Medium Left Curly Bracket Ornament", '{'),
    ('‚ùµ', "Medium Right Curly Bracket Ornament", '}'),
    ('‚Åé', "Low Asterisk", '*'),
    ('Ÿ≠', "Arabic Five Pointed Star", '*'),
    ('‚àó', "Asterisk Operator", '*'),
    ('·úµ', "Philippine Single Punctuation", '/'),
    ('‚ÅÅ', "Caret Insertion Point", '/'),
    ('‚àï', "Division Slash", '/'),
    ('‚ÅÑ', "Fraction Slash", '/'),
    ('‚ï±', "Box Drawings Light Diagonal Upper Right To Lower Left", '/'),
    ('‚üã', "Mathematical Rising Diagonal", '/'),
    ('‚ß∏', "Big Solidus", '/'),
    ('„áì', "Cjk Stroke Sp", '/'),
    ('„Ä≥', "Vertical Kana Repeat Mark Upper Half", '/'),
    ('‰∏ø', "Cjk Unified Ideograph-4E3F", '/'),
    ('‚ºÉ', "Kangxi Radical Slash", '/'),
    ('Ôºº', "Fullwidth Reverse Solidus", '\\'),
    ('Ôπ®', "Small Reverse Solidus", '\\'),
    ('‚àñ', "Set Minus", '\\'),
    ('‚üç', "Mathematical Falling Diagonal", '\\'),
    ('‚ßµ', "Reverse Solidus Operator", '\\'),
    ('‚ßπ', "Big Reverse Solidus", '\\'),
    ('„ÄÅ', "Ideographic Comma", '\\'),
    ('„ÉΩ', "Katakana Iteration Mark", '\\'),
    ('„áî', "Cjk Stroke D", '\\'),
    ('‰∏∂', "Cjk Unified Ideograph-4E36", '\\'),
    ('‚ºÇ', "Kangxi Radical Dot", '\\'),
    ('Íù∏', "Latin Small Letter Um", '&'),
    ('Ô¨©', "Hebrew Letter Alternative Plus Sign", '+'),
    ('‚Äπ', "Single Left-Pointing Angle Quotation Mark", '<'),
    ('‚ùÆ', "Heavy Left-Pointing Angle Quotation Mark Ornament", '<'),
    ('ÀÇ', "Modifier Letter Left Arrowhead", '<'),
    ('„Äà', "Left Angle Bracket", '<'),
    ('„Ää', "Left Double Angle Bracket", '<'),
    ('Íìø', "Lisu Punctuation Full Stop", '='),
    ('‚Ä∫', "Single Right-Pointing Angle Quotation Mark", '>'),
    ('‚ùØ', "Heavy Right-Pointing Angle Quotation Mark Ornament", '>'),
    ('ÀÉ', "Modifier Letter Right Arrowhead", '>'),
    ('„Äâ', "Right Angle Bracket", '>'),
    ('„Äã', "Right Double Angle Bracket", '>'),
    ('‚≤∫', "Coptic Capital Letter Dialect-P Ni", '-'),
    ('…Å', "Latin Capital Letter Glottal Stop", '?'),
    ('‚≥Ü', "Coptic Capital Letter Old Coptic Esh", '/'), ];

const ASCII_ARRAY: &'static [(char, &'static str)] = &[
    (' ', "Space"),
    ('_', "Underscore"),
    ('-', "Minus/Hyphen"),
    (',', "Comma"),
    (';', "Semicolon"),
    (':', "Colon"),
    ('!', "Exclamation Mark"),
    ('?', "Question Mark"),
    ('.', "Period"),
    ('\'', "Single Quote"),
    ('"', "Quotation Mark"),
    ('(', "Left Parenthesis"),
    (')', "Right Parenthesis"),
    ('[', "Left Square Bracket"),
    (']', "Right Square Bracket"),
    ('{', "Left Curly Brace"),
    ('}', "Right Curly Brace"),
    ('*', "Asterisk"),
    ('/', "Slash"),
    ('\\', "Backslash"),
    ('&', "Ampersand"),
    ('+', "Plus Sign"),
    ('<', "Less-Than Sign"),
    ('=', "Equals Sign"),
    ('>', "Greater-Than Sign"), ];

pub fn check_for_substitution<'a>(reader: &StringReader<'a>,
                                  ch: char,
                                  err: &mut DiagnosticBuilder<'a>) {
    UNICODE_ARRAY
    .iter()
    .find(|&&(c, _, _)| c == ch)
    .map(|&(_, u_name, ascii_char)| {
        let span = make_span(reader.pos, reader.next_pos);
        match ASCII_ARRAY.iter().find(|&&(c, _)| c == ascii_char) {
            Some(&(ascii_char, ascii_name)) => {
                let msg =
                    format!("unicode character '{}' ({}) looks much like '{}' ({}), but it's not",
                            ch, u_name, ascii_char, ascii_name);
                err.span_help(span, &msg);
            },
            None => {
                let msg = format!("substitution character not found for '{}'", ch);
                reader.sess.span_diagnostic.span_bug_no_panic(span, &msg);
            }
        }
    });
}
