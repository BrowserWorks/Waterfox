[workspace]

# These are the "root" crates, which we build and test as top-level targets.
# Their transitive dependencies and dev-dependencies are included automatically
# and do not need to be listed here. Their external dependencies are vendored
# into `third_party/rust` by `mach vendor rust`.
members = [
  "js/src/frontend/smoosh",
  "js/src/rust",
  "netwerk/test/http3server",
  "security/manager/ssl/builtins",
  "security/manager/ssl/ipcclientcerts",
  "security/manager/ssl/osclientcerts",
  "testing/geckodriver",
  "toolkit/components/uniffi-bindgen-gecko-js",
  "toolkit/crashreporter/mozwer-rust",
  "toolkit/crashreporter/rust_minidump_writer_linux",
  "toolkit/library/gtest/rust",
  "toolkit/library/rust/",
  "toolkit/mozapps/defaultagent/rust",
]

# Excluded crates may be built as dependencies, but won't be considered members
# of the workspace and their dev-dependencies won't be included.
exclude = [
  # Exclude third-party code vendored into mozilla-central.
  "servo",
  "third_party/rust",

  # Excluded because these crates have their own Cargo workspaces so they can't
  # be included in the top-level one.
  "gfx/wr",

  # Excluded because they are used only as dependencies, not top-level targets,
  # so we don't need to vendor their dev-dependencies.
  "gfx/webrender_bindings",
  "media/mp4parse-rust/mp4parse",
  "media/mp4parse-rust/mp4parse_capi",
  "xpcom/rust/gkrust_utils",
  "tools/lint/test/files/clippy",
  "tools/fuzzing/rust",
  "dom/base/rust",
  "dom/origin-trials/ffi",
]

# Use the new dependency resolver to reduce some of the platform-specific dependencies.
# This is required for 'third_party/rust/wgpu-hal'
resolver = "2"

[workspace.dependencies]
# Shared across multiple UniFFI consumers.
uniffi = "0.23"

# Explicitly specify what our profiles use.  The opt-level setting here is
# a total fiction; see the setup of MOZ_RUST_DEFAULT_FLAGS for what the
# opt-level setting will be as a result of various other configure flags.
[profile.dev]
opt-level = 1
rpath = false
lto = false
debug-assertions = true
panic = "abort"

[profile.release]
opt-level = 2
rpath = false
debug-assertions = false
panic = "abort"

# Optimize build dependencies, because bindgen and proc macros / style
# compilation take more to run than to build otherwise.
[profile.dev.build-override]
opt-level = 1

[profile.release.build-override]
opt-level = 1

# optimizing glsl more makes a big difference in swgl build times
[profile.dev.package.glsl]
opt-level = 2

[profile.release.package.glsl]
opt-level = 2

[patch.crates-io]
# The build system doesn't want those to be used, but they are pulled anyways (because
# dependencies can't be disabled based on features), but remain unused. We ensure they
# stay unused by overriding them with crates that contain enough to build the current
# code and will fail the build in unwanted cases.
cmake = { path = "build/rust/cmake" }
vcpkg = { path = "build/rust/vcpkg" }

# Helper crate for integration in the gecko build system.
mozbuild = { path = "build/rust/mozbuild" }

# Dummy oslog replacement. It's only used by glean in code that is not actually used.
oslog = { path = "build/rust/oslog" }

# Patch bitflags 2.0 to 1.0 while not too many crates use 2.0 features
bitflags = { path = "build/rust/bitflags" }

# Patch cfg-if 0.1 to 1.0
cfg-if = { path = "build/rust/cfg-if" }

# Patch darling 0.13 to 0.14
darling = { path = "build/rust/darling" }

# Patch redox_users to an empty crate
redox_users = { path = "build/rust/redox_users" }

# Patch env_logger 0.9 to 0.10
env_logger = { path = "build/rust/env_logger" }

# Patch parking_lot 0.12 down to 0.11, which is compatible for most crates that use it, to avoid
# dependencies on windows-sys.
parking_lot = { path = "build/rust/parking_lot" }

# Override tinyvec with smallvec
tinyvec = { path = "build/rust/tinyvec" }

# Patch base64 0.13 to 0.21
base64 = { path = "build/rust/base64" }

# Patch wasi 0.10 to 0.11
wasi = { path = "build/rust/wasi" }

# Patch bindgen 0.63 to 0.64
bindgen = { path = "build/rust/bindgen" }

# Patch ntapi 0.3 to 0.4
ntapi = { path = "build/rust/ntapi" }

# Patch nix 0.24 to 0.26
nix = { path = "build/rust/nix" }

# Patch autocfg to hide rustc output. Workaround for https://github.com/cuviper/autocfg/issues/30
autocfg = { path = "third_party/rust/autocfg" }

# The following overrides point to dummy projects, as a temporary measure until this is resolved:
# https://github.com/rust-lang/cargo/issues/6179
js-sys = { path = "build/rust/dummy-web/js-sys" }
wasm-bindgen = { path = "build/rust/dummy-web/wasm-bindgen" }
web-sys = { path = "build/rust/dummy-web/web-sys" }

# Overrides to allow easier use of common internal crates.
moz_asserts = { path = "mozglue/static/rust/moz_asserts" }

# Patch `rure` to disable building the cdylib and staticlib targets
# Cargo has no way to disable building targets your dependencies provide which
# you don't depend on, and linking the cdylib breaks during instrumentation
# builds.
# Workaround for https://github.com/rust-lang/cargo/issues/11232
rure = { path = "third_party/rust/rure" }

# 0.31.1 but without rust-cssparser#342.
# TODO: Remove these, and just use v0.31.1 once bug 1836219 lands
# (which will get syn 2 into the tree).
cssparser = { path = "third_party/rust/cssparser" }
cssparser-macros = { path = "third_party/rust/cssparser-macros" }

# Other overrides
chardetng = { git = "https://github.com/hsivonen/chardetng", rev="3484d3e3ebdc8931493aa5df4d7ee9360a90e76b" }
chardetng_c = { git = "https://github.com/hsivonen/chardetng_c", rev="ed8a4c6f900a90d4dbc1d64b856e61490a1c3570" }
coremidi = { git = "https://github.com/chris-zen/coremidi.git", rev="fc68464b5445caf111e41f643a2e69ccce0b4f83" }
firefox-on-glean = { path = "toolkit/components/glean/api" }
libudev-sys = { path = "dom/webauthn/libudev-sys" }
packed_simd = { git = "https://github.com/hsivonen/packed_simd", rev = "e588ceb568878e1a3156ea9ce551d5b63ef0cdc4" }
midir = { git = "https://github.com/mozilla/midir.git", rev = "519e651241e867af3391db08f9ae6400bc023e18" }
# warp 0.3.3 + https://github.com/seanmonstar/warp/pull/1007
warp = { git = "https://github.com/glandium/warp", rev = "4af45fae95bc98b0eba1ef0db17e1dac471bb23d" }

# application-services overrides to make updating them all simpler.
interrupt-support = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }
sql-support = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }
sync15 = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }
tabs = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }
viaduct = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }
webext-storage = { git = "https://github.com/mozilla/application-services", rev = "86c84c217036c12283d19368867323a66bf35883" }

# add unmerged mime types
mime_guess = { path = "third_party/rust/mime_guess" }

# Patch mio 0.6 to use winapi 0.3 and miow 0.3, getting rid of winapi 0.2.
# There is not going to be new version of mio 0.6, mio now being >= 0.7.11.
[patch.crates-io.mio]
path = "third_party/rust/mio-0.6.23"

[patch."https://github.com/mozilla/uniffi-rs.git"]
uniffi = "=0.23.0"
uniffi_bindgen = "=0.23.0"
uniffi_build = "=0.23.0"
uniffi_macros = "=0.23.0"
weedle2 = "=4.0.0"
