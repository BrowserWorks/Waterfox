/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

[scriptable, uuid(51191434-1dd2-11b2-a17c-e49c4e99a4e3)]
interface nsIPK11Token : nsISupports
{
  const long ASK_EVERY_TIME  = -1;
  const long ASK_FIRST_TIME  =  0;
  const long ASK_EXPIRE_TIME =  1;

  /*
   * The name of the token
   */
  [must_use]
  readonly attribute AUTF8String tokenName;
  [must_use]
  readonly attribute AUTF8String tokenLabel;
  /**
   * Manufacturer ID of the token.
   */
  [must_use]
  readonly attribute AUTF8String tokenManID;
  /**
   * Hardware version of the token.
   */
  [must_use]
  readonly attribute AUTF8String tokenHWVersion;
  /**
   * Firmware version of the token.
   */
  [must_use]
  readonly attribute AUTF8String tokenFWVersion;
  [must_use]
  readonly attribute AUTF8String tokenSerialNumber;

  /*
   * Login information
   */
  [must_use]
  boolean isLoggedIn();
  [must_use]
  void login(in boolean force);
  [must_use]
  void logoutSimple();
  [must_use]
  void logoutAndDropAuthenticatedResources();

  /*
   * Reset password
   */
  [must_use]
  void reset();

  /*
   * Password information
   */
  [must_use]
  readonly attribute long minimumPasswordLength;
  [must_use]
  readonly attribute boolean needsUserInit;
  /**
   * Checks whether the given password is correct. Logs the token out if an
   * incorrect password is given.
   *
   * @param password The password to check.
   * @return true if the password was correct, false otherwise.
   */
  [must_use]
  boolean checkPassword(in AUTF8String password);
  [must_use]
  void initPassword(in AUTF8String initialPassword);
  [must_use]
  void changePassword(in AUTF8String oldPassword, in AUTF8String newPassword);
  [must_use]
  long getAskPasswordTimes();
  [must_use]
  long getAskPasswordTimeout();
  [must_use]
  void setAskPasswordDefaults([const] in long askTimes, [const] in long timeout);

  /*
   * True if a password has been configured for this token, and false otherwise.
   * (Whether or not the user is currently logged in makes no difference.)
   * In particular, this can be used to determine if a user has set a master
   * password (if this is the internal key token).
   */
  [must_use]
  readonly attribute boolean hasPassword;

  /*
   * Other attributes
   */
  [must_use]
  boolean isHardwareToken();
  [must_use]
  boolean needsLogin();
};
