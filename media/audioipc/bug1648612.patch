diff --git a/media/audioipc/client/src/stream.rs b/media/audioipc/client/src/stream.rs
--- a/media/audioipc/client/src/stream.rs
+++ b/media/audioipc/client/src/stream.rs
@@ -41,26 +41,30 @@ impl Drop for Device {
 #[derive(Debug)]
 pub struct ClientStream<'ctx> {
     // This must be a reference to Context for cubeb, cubeb accesses
     // stream methods via stream->context->ops
     context: &'ctx ClientContext,
     user_ptr: *mut c_void,
     token: usize,
     device_change_cb: Arc<Mutex<ffi::cubeb_device_changed_callback>>,
+    // Signals ClientStream that CallbackServer has dropped.
+    shutdown_rx: mpsc::Receiver<()>,
 }
 
 struct CallbackServer {
     input_shm: Option<SharedMemSlice>,
     output_shm: Option<SharedMemMutSlice>,
     data_cb: ffi::cubeb_data_callback,
     state_cb: ffi::cubeb_state_callback,
     user_ptr: usize,
     cpu_pool: CpuPool,
     device_change_cb: Arc<Mutex<ffi::cubeb_device_changed_callback>>,
+    // Signals ClientStream that CallbackServer has dropped.
+    _shutdown_tx: mpsc::Sender<()>,
 }
 
 impl rpc::Server for CallbackServer {
     type Request = CallbackReq;
     type Response = CallbackResp;
     type Future = CpuFuture<Self::Response, ()>;
     type Transport = Framed<audioipc::AsyncMessageStream, LengthDelimitedCodec<Self::Response, Self::Request>>;
 
@@ -201,24 +205,27 @@ impl<'ctx> ClientStream<'ctx> {
 
         let user_data = user_ptr as usize;
 
         let cpu_pool = ctx.cpu_pool();
 
         let null_cb: ffi::cubeb_device_changed_callback = None;
         let device_change_cb = Arc::new(Mutex::new(null_cb));
 
+        let (_shutdown_tx, shutdown_rx) = mpsc::channel();
+
         let server = CallbackServer {
             input_shm,
             output_shm,
             data_cb: data_callback,
             state_cb: state_callback,
             user_ptr: user_data,
             cpu_pool,
             device_change_cb: device_change_cb.clone(),
+            _shutdown_tx,
         };
 
         let (wait_tx, wait_rx) = mpsc::channel();
         ctx.handle()
             .spawn(futures::future::lazy(move || {
                 let handle = reactor::Handle::default();
                 let stream = stream.into_tokio_ipc(&handle).unwrap();
                 let transport = framed(stream, Default::default());
@@ -229,26 +236,35 @@ impl<'ctx> ClientStream<'ctx> {
             .expect("Failed to spawn CallbackServer");
         wait_rx.recv().unwrap();
 
         let stream = Box::into_raw(Box::new(ClientStream {
             context: ctx,
             user_ptr,
             token: data.token,
             device_change_cb,
+            shutdown_rx,
         }));
         Ok(unsafe { Stream::from_ptr(stream as *mut _) })
     }
 }
 
 impl<'ctx> Drop for ClientStream<'ctx> {
     fn drop(&mut self) {
-        debug!("ClientStream dropped...");
+        debug!("ClientStream drop");
         let rpc = self.context.rpc();
         let _ = send_recv!(rpc, StreamDestroy(self.token) => StreamDestroyed);
+        debug!("ClientStream drop - stream destroyed");
+        // Wait for CallbackServer to shutdown.  The remote server drops the RPC
+        // connection during StreamDestroy, which will cause CallbackServer to drop
+        // once the connection close is detected.  Dropping CallbackServer will
+        // cause the shutdown channel to error on recv, which we rely on to
+        // synchronize with CallbackServer dropping.
+        let _ = self.shutdown_rx.recv();
+        debug!("ClientStream dropped");
     }
 }
 
 impl<'ctx> StreamOps for ClientStream<'ctx> {
     fn start(&mut self) -> Result<()> {
         assert_not_in_callback();
         let rpc = self.context.rpc();
         send_recv!(rpc, StreamStart(self.token) => StreamStarted)
